
MotorDashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  000062fc  00006390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001be  008001be  000064ee  2**0
                  ALLOC
  3 .stab         00005520  00000000  00000000  000064f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bfa  00000000  00000000  0000ba10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d60a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d74a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000103ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001119c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011589  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 24 	call	0x4978	; 0x4978 <main>
      8a:	0c 94 7c 31 	jmp	0x62f8	; 0x62f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 31 	jmp	0x628a	; 0x628a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 31 	jmp	0x62c2	; 0x62c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 31 	jmp	0x628a	; 0x628a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 31 	jmp	0x62c2	; 0x62c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DC_u8Rotate>:
#include "MOTORS_Private.h"
#include "MOTORS_config.h"
#include "../../1-MCAL/1-DIO/DIO_interface.h"

u8 DC_u8Rotate(DC_MOTOR* Copy_DCMotor,u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DC_u8Rotate+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DC_u8Rotate+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DC_u8Rotate+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
     b58:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErorState=OK;
     b5a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_DCMotor==NULL)
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	9b 81       	ldd	r25, Y+3	; 0x03
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	19 f4       	brne	.+6      	; 0xb6a <DC_u8Rotate+0x24>
	{
		Local_u8ErorState=NULL_POINTER;
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	3c c0       	rjmp	.+120    	; 0xbe2 <DC_u8Rotate+0x9c>
	}
	else
	{
		switch(Copy_u8Direction)
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3e 83       	std	Y+6, r19	; 0x06
     b72:	2d 83       	std	Y+5, r18	; 0x05
     b74:	8d 81       	ldd	r24, Y+5	; 0x05
     b76:	9e 81       	ldd	r25, Y+6	; 0x06
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	31 f0       	breq	.+12     	; 0xb8a <DC_u8Rotate+0x44>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	b1 f0       	breq	.+44     	; 0xbb4 <DC_u8Rotate+0x6e>
     b88:	2a c0       	rjmp	.+84     	; 0xbde <DC_u8Rotate+0x98>
		{
		case CW: DIO_u8SetPinValue(Copy_DCMotor->DC_Port,Copy_DCMotor->DC_Pin1,DIO_u8Pin_HIGH);
     b8a:	ea 81       	ldd	r30, Y+2	; 0x02
     b8c:	fb 81       	ldd	r31, Y+3	; 0x03
     b8e:	80 81       	ld	r24, Z
     b90:	ea 81       	ldd	r30, Y+2	; 0x02
     b92:	fb 81       	ldd	r31, Y+3	; 0x03
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	69 2f       	mov	r22, r25
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				 DIO_u8SetPinValue(Copy_DCMotor->DC_Port,Copy_DCMotor->DC_Pin2,DIO_u8Pin_LOW); break;
     b9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ba0:	fb 81       	ldd	r31, Y+3	; 0x03
     ba2:	80 81       	ld	r24, Z
     ba4:	ea 81       	ldd	r30, Y+2	; 0x02
     ba6:	fb 81       	ldd	r31, Y+3	; 0x03
     ba8:	92 81       	ldd	r25, Z+2	; 0x02
     baa:	69 2f       	mov	r22, r25
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
     bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <DC_u8Rotate+0x9c>
		case CCW: DIO_u8SetPinValue(Copy_DCMotor->DC_Port,Copy_DCMotor->DC_Pin1,DIO_u8Pin_LOW);
     bb4:	ea 81       	ldd	r30, Y+2	; 0x02
     bb6:	fb 81       	ldd	r31, Y+3	; 0x03
     bb8:	80 81       	ld	r24, Z
     bba:	ea 81       	ldd	r30, Y+2	; 0x02
     bbc:	fb 81       	ldd	r31, Y+3	; 0x03
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	69 2f       	mov	r22, r25
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				 DIO_u8SetPinValue(Copy_DCMotor->DC_Port,Copy_DCMotor->DC_Pin2,DIO_u8Pin_HIGH); break;
     bc8:	ea 81       	ldd	r30, Y+2	; 0x02
     bca:	fb 81       	ldd	r31, Y+3	; 0x03
     bcc:	80 81       	ld	r24, Z
     bce:	ea 81       	ldd	r30, Y+2	; 0x02
     bd0:	fb 81       	ldd	r31, Y+3	; 0x03
     bd2:	92 81       	ldd	r25, Z+2	; 0x02
     bd4:	69 2f       	mov	r22, r25
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DC_u8Rotate+0x9c>
		default: Local_u8ErorState=WORNG_DIRECTION; break;
     bde:	85 e0       	ldi	r24, 0x05	; 5
     be0:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErorState;
     be2:	89 81       	ldd	r24, Y+1	; 0x01
}
     be4:	26 96       	adiw	r28, 0x06	; 6
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <DC_u8Stop>:
u8 DC_u8Stop(DC_MOTOR* Copy_DCMotor)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <DC_u8Stop+0x6>
     bfc:	0f 92       	push	r0
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	9b 83       	std	Y+3, r25	; 0x03
     c04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErorState=OK;
     c06:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_DCMotor==NULL)
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	9b 81       	ldd	r25, Y+3	; 0x03
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	19 f4       	brne	.+6      	; 0xc16 <DC_u8Stop+0x20>
	{
		Local_u8ErorState=NULL_POINTER;
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	14 c0       	rjmp	.+40     	; 0xc3e <DC_u8Stop+0x48>
	}
	else
	{
		DIO_u8SetPinValue(Copy_DCMotor->DC_Port,Copy_DCMotor->DC_Pin1,DIO_u8Pin_LOW);
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	80 81       	ld	r24, Z
     c1c:	ea 81       	ldd	r30, Y+2	; 0x02
     c1e:	fb 81       	ldd	r31, Y+3	; 0x03
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	69 2f       	mov	r22, r25
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_DCMotor->DC_Port,Copy_DCMotor->DC_Pin2,DIO_u8Pin_LOW);
     c2a:	ea 81       	ldd	r30, Y+2	; 0x02
     c2c:	fb 81       	ldd	r31, Y+3	; 0x03
     c2e:	80 81       	ld	r24, Z
     c30:	ea 81       	ldd	r30, Y+2	; 0x02
     c32:	fb 81       	ldd	r31, Y+3	; 0x03
     c34:	92 81       	ldd	r25, Z+2	; 0x02
     c36:	69 2f       	mov	r22, r25
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	}

	return Local_u8ErorState;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <STEPPER_u8Rotate>:
u8 STEPPER_u8Rotate(STEPPER_MOTOR* Copy_STEPPERMOTOR,u16 Copy_u16Angle,u8 Copy_u8Direction)
{
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	c2 5f       	subi	r28, 0xF2	; 242
     c5a:	d0 40       	sbci	r29, 0x00	; 0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	fe 01       	movw	r30, r28
     c68:	e6 51       	subi	r30, 0x16	; 22
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	80 83       	st	Z, r24
     c70:	fe 01       	movw	r30, r28
     c72:	e4 51       	subi	r30, 0x14	; 20
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	71 83       	std	Z+1, r23	; 0x01
     c78:	60 83       	st	Z, r22
     c7a:	fe 01       	movw	r30, r28
     c7c:	e2 51       	subi	r30, 0x12	; 18
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	40 83       	st	Z, r20
	u8 Local_u8ErorState=OK;
     c82:	fe 01       	movw	r30, r28
     c84:	e7 51       	subi	r30, 0x17	; 23
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	10 82       	st	Z, r1
	u32 Local_u32IterationsNum=0;
     c8a:	fe 01       	movw	r30, r28
     c8c:	eb 51       	subi	r30, 0x1B	; 27
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	10 82       	st	Z, r1
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	12 82       	std	Z+2, r1	; 0x02
     c96:	13 82       	std	Z+3, r1	; 0x03
	u32 Local_u32Counter=0;
     c98:	fe 01       	movw	r30, r28
     c9a:	ef 51       	subi	r30, 0x1F	; 31
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	10 82       	st	Z, r1
     ca0:	11 82       	std	Z+1, r1	; 0x01
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	13 82       	std	Z+3, r1	; 0x03
	if(Copy_STEPPERMOTOR==NULL)
     ca6:	fe 01       	movw	r30, r28
     ca8:	e6 51       	subi	r30, 0x16	; 22
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <STEPPER_u8Rotate+0x76>
	{
		Local_u8ErorState=NULL_POINTER;
     cb4:	fe 01       	movw	r30, r28
     cb6:	e7 51       	subi	r30, 0x17	; 23
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	80 83       	st	Z, r24
     cbe:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <STEPPER_u8Rotate+0x1f22>
	}
	else
	{
		if(Copy_u16Angle==CONT_ROTATION)
     cc2:	fe 01       	movw	r30, r28
     cc4:	e4 51       	subi	r30, 0x14	; 20
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	11 f0       	breq	.+4      	; 0xcd4 <STEPPER_u8Rotate+0x88>
     cd0:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <STEPPER_u8Rotate+0x108e>
		{
			switch(Copy_u8Direction)
     cd4:	fe 01       	movw	r30, r28
     cd6:	e2 51       	subi	r30, 0x12	; 18
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 81       	ld	r24, Z
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	cf 50       	subi	r28, 0x0F	; 15
     ce2:	df 4f       	sbci	r29, 0xFF	; 255
     ce4:	39 83       	std	Y+1, r19	; 0x01
     ce6:	28 83       	st	Y, r18
     ce8:	c1 5f       	subi	r28, 0xF1	; 241
     cea:	d0 40       	sbci	r29, 0x00	; 0
     cec:	cf 50       	subi	r28, 0x0F	; 15
     cee:	df 4f       	sbci	r29, 0xFF	; 255
     cf0:	88 81       	ld	r24, Y
     cf2:	99 81       	ldd	r25, Y+1	; 0x01
     cf4:	c1 5f       	subi	r28, 0xF1	; 241
     cf6:	d0 40       	sbci	r29, 0x00	; 0
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <STEPPER_u8Rotate+0xb4>
     cfe:	f9 c3       	rjmp	.+2034   	; 0x14f2 <STEPPER_u8Rotate+0x8a6>
     d00:	cf 50       	subi	r28, 0x0F	; 15
     d02:	df 4f       	sbci	r29, 0xFF	; 255
     d04:	e8 81       	ld	r30, Y
     d06:	f9 81       	ldd	r31, Y+1	; 0x01
     d08:	c1 5f       	subi	r28, 0xF1	; 241
     d0a:	d0 40       	sbci	r29, 0x00	; 0
     d0c:	e2 30       	cpi	r30, 0x02	; 2
     d0e:	f1 05       	cpc	r31, r1
     d10:	11 f0       	breq	.+4      	; 0xd16 <STEPPER_u8Rotate+0xca>
     d12:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <STEPPER_u8Rotate+0x1082>
			{
			case CCW: while(1)
			{
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_LOW);
     d16:	fe 01       	movw	r30, r28
     d18:	e6 51       	subi	r30, 0x16	; 22
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	01 90       	ld	r0, Z+
     d1e:	f0 81       	ld	r31, Z
     d20:	e0 2d       	mov	r30, r0
     d22:	80 81       	ld	r24, Z
     d24:	fe 01       	movw	r30, r28
     d26:	e6 51       	subi	r30, 0x16	; 22
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	01 90       	ld	r0, Z+
     d2c:	f0 81       	ld	r31, Z
     d2e:	e0 2d       	mov	r30, r0
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	69 2f       	mov	r22, r25
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
     d3a:	fe 01       	movw	r30, r28
     d3c:	e6 51       	subi	r30, 0x16	; 22
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	01 90       	ld	r0, Z+
     d42:	f0 81       	ld	r31, Z
     d44:	e0 2d       	mov	r30, r0
     d46:	80 81       	ld	r24, Z
     d48:	fe 01       	movw	r30, r28
     d4a:	e6 51       	subi	r30, 0x16	; 22
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	01 90       	ld	r0, Z+
     d50:	f0 81       	ld	r31, Z
     d52:	e0 2d       	mov	r30, r0
     d54:	92 81       	ldd	r25, Z+2	; 0x02
     d56:	69 2f       	mov	r22, r25
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
     d5e:	fe 01       	movw	r30, r28
     d60:	e6 51       	subi	r30, 0x16	; 22
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	01 90       	ld	r0, Z+
     d66:	f0 81       	ld	r31, Z
     d68:	e0 2d       	mov	r30, r0
     d6a:	80 81       	ld	r24, Z
     d6c:	fe 01       	movw	r30, r28
     d6e:	e6 51       	subi	r30, 0x16	; 22
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	69 2f       	mov	r22, r25
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
     d82:	fe 01       	movw	r30, r28
     d84:	e6 51       	subi	r30, 0x16	; 22
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	01 90       	ld	r0, Z+
     d8a:	f0 81       	ld	r31, Z
     d8c:	e0 2d       	mov	r30, r0
     d8e:	80 81       	ld	r24, Z
     d90:	fe 01       	movw	r30, r28
     d92:	e6 51       	subi	r30, 0x16	; 22
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	01 90       	ld	r0, Z+
     d98:	f0 81       	ld	r31, Z
     d9a:	e0 2d       	mov	r30, r0
     d9c:	94 81       	ldd	r25, Z+4	; 0x04
     d9e:	69 2f       	mov	r22, r25
     da0:	41 e0       	ldi	r20, 0x01	; 1
     da2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
     da6:	fe 01       	movw	r30, r28
     da8:	e3 52       	subi	r30, 0x23	; 35
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e4       	ldi	r27, 0x40	; 64
     db4:	80 83       	st	Z, r24
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	a2 83       	std	Z+2, r26	; 0x02
     dba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbc:	8e 01       	movw	r16, r28
     dbe:	07 52       	subi	r16, 0x27	; 39
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	fe 01       	movw	r30, r28
     dc4:	e3 52       	subi	r30, 0x23	; 35
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	82 81       	ldd	r24, Z+2	; 0x02
     dce:	93 81       	ldd	r25, Z+3	; 0x03
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a ef       	ldi	r20, 0xFA	; 250
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	f8 01       	movw	r30, r16
     de2:	80 83       	st	Z, r24
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	a2 83       	std	Z+2, r26	; 0x02
     de8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dea:	fe 01       	movw	r30, r28
     dec:	e7 52       	subi	r30, 0x27	; 39
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e04:	88 23       	and	r24, r24
     e06:	44 f4       	brge	.+16     	; 0xe18 <STEPPER_u8Rotate+0x1cc>
		__ticks = 1;
     e08:	fe 01       	movw	r30, r28
     e0a:	e9 52       	subi	r30, 0x29	; 41
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
     e16:	64 c0       	rjmp	.+200    	; 0xee0 <STEPPER_u8Rotate+0x294>
	else if (__tmp > 65535)
     e18:	fe 01       	movw	r30, r28
     e1a:	e7 52       	subi	r30, 0x27	; 39
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	60 81       	ld	r22, Z
     e20:	71 81       	ldd	r23, Z+1	; 0x01
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	4f e7       	ldi	r20, 0x7F	; 127
     e2c:	57 e4       	ldi	r21, 0x47	; 71
     e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e32:	18 16       	cp	r1, r24
     e34:	0c f0       	brlt	.+2      	; 0xe38 <STEPPER_u8Rotate+0x1ec>
     e36:	43 c0       	rjmp	.+134    	; 0xebe <STEPPER_u8Rotate+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e38:	fe 01       	movw	r30, r28
     e3a:	e3 52       	subi	r30, 0x23	; 35
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8e 01       	movw	r16, r28
     e58:	09 52       	subi	r16, 0x29	; 41
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	f8 01       	movw	r30, r16
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	80 83       	st	Z, r24
     e6e:	1f c0       	rjmp	.+62     	; 0xeae <STEPPER_u8Rotate+0x262>
     e70:	fe 01       	movw	r30, r28
     e72:	eb 52       	subi	r30, 0x2B	; 43
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e7e:	fe 01       	movw	r30, r28
     e80:	eb 52       	subi	r30, 0x2B	; 43
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <STEPPER_u8Rotate+0x23c>
     e8c:	fe 01       	movw	r30, r28
     e8e:	eb 52       	subi	r30, 0x2B	; 43
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	de 01       	movw	r26, r28
     e98:	a9 52       	subi	r26, 0x29	; 41
     e9a:	bf 4f       	sbci	r27, 0xFF	; 255
     e9c:	fe 01       	movw	r30, r28
     e9e:	e9 52       	subi	r30, 0x29	; 41
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eae:	fe 01       	movw	r30, r28
     eb0:	e9 52       	subi	r30, 0x29	; 41
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	d1 f6       	brne	.-76     	; 0xe70 <STEPPER_u8Rotate+0x224>
     ebc:	27 c0       	rjmp	.+78     	; 0xf0c <STEPPER_u8Rotate+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	8e 01       	movw	r16, r28
     ec0:	09 52       	subi	r16, 0x29	; 41
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	fe 01       	movw	r30, r28
     ec6:	e7 52       	subi	r30, 0x27	; 39
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	f8 01       	movw	r30, r16
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	de 01       	movw	r26, r28
     ee2:	ad 52       	subi	r26, 0x2D	; 45
     ee4:	bf 4f       	sbci	r27, 0xFF	; 255
     ee6:	fe 01       	movw	r30, r28
     ee8:	e9 52       	subi	r30, 0x29	; 41
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	8d 93       	st	X+, r24
     ef2:	9c 93       	st	X, r25
     ef4:	fe 01       	movw	r30, r28
     ef6:	ed 52       	subi	r30, 0x2D	; 45
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <STEPPER_u8Rotate+0x2b2>
     f02:	fe 01       	movw	r30, r28
     f04:	ed 52       	subi	r30, 0x2D	; 45
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
     f0c:	fe 01       	movw	r30, r28
     f0e:	e6 51       	subi	r30, 0x16	; 22
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	01 90       	ld	r0, Z+
     f14:	f0 81       	ld	r31, Z
     f16:	e0 2d       	mov	r30, r0
     f18:	80 81       	ld	r24, Z
     f1a:	fe 01       	movw	r30, r28
     f1c:	e6 51       	subi	r30, 0x16	; 22
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	01 90       	ld	r0, Z+
     f22:	f0 81       	ld	r31, Z
     f24:	e0 2d       	mov	r30, r0
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	69 2f       	mov	r22, r25
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_LOW);
     f30:	fe 01       	movw	r30, r28
     f32:	e6 51       	subi	r30, 0x16	; 22
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	01 90       	ld	r0, Z+
     f38:	f0 81       	ld	r31, Z
     f3a:	e0 2d       	mov	r30, r0
     f3c:	80 81       	ld	r24, Z
     f3e:	fe 01       	movw	r30, r28
     f40:	e6 51       	subi	r30, 0x16	; 22
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	01 90       	ld	r0, Z+
     f46:	f0 81       	ld	r31, Z
     f48:	e0 2d       	mov	r30, r0
     f4a:	92 81       	ldd	r25, Z+2	; 0x02
     f4c:	69 2f       	mov	r22, r25
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
     f54:	fe 01       	movw	r30, r28
     f56:	e6 51       	subi	r30, 0x16	; 22
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	01 90       	ld	r0, Z+
     f5c:	f0 81       	ld	r31, Z
     f5e:	e0 2d       	mov	r30, r0
     f60:	80 81       	ld	r24, Z
     f62:	fe 01       	movw	r30, r28
     f64:	e6 51       	subi	r30, 0x16	; 22
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	01 90       	ld	r0, Z+
     f6a:	f0 81       	ld	r31, Z
     f6c:	e0 2d       	mov	r30, r0
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	69 2f       	mov	r22, r25
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
     f78:	fe 01       	movw	r30, r28
     f7a:	e6 51       	subi	r30, 0x16	; 22
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	01 90       	ld	r0, Z+
     f80:	f0 81       	ld	r31, Z
     f82:	e0 2d       	mov	r30, r0
     f84:	80 81       	ld	r24, Z
     f86:	fe 01       	movw	r30, r28
     f88:	e6 51       	subi	r30, 0x16	; 22
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	01 90       	ld	r0, Z+
     f8e:	f0 81       	ld	r31, Z
     f90:	e0 2d       	mov	r30, r0
     f92:	94 81       	ldd	r25, Z+4	; 0x04
     f94:	69 2f       	mov	r22, r25
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
     f9c:	fe 01       	movw	r30, r28
     f9e:	e1 53       	subi	r30, 0x31	; 49
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a0 e0       	ldi	r26, 0x00	; 0
     fa8:	b0 e4       	ldi	r27, 0x40	; 64
     faa:	80 83       	st	Z, r24
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	a2 83       	std	Z+2, r26	; 0x02
     fb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	8e 01       	movw	r16, r28
     fb4:	05 53       	subi	r16, 0x35	; 53
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	fe 01       	movw	r30, r28
     fba:	e1 53       	subi	r30, 0x31	; 49
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a ef       	ldi	r20, 0xFA	; 250
     fcc:	54 e4       	ldi	r21, 0x44	; 68
     fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	f8 01       	movw	r30, r16
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fe0:	fe 01       	movw	r30, r28
     fe2:	e5 53       	subi	r30, 0x35	; 53
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	44 f4       	brge	.+16     	; 0x100e <STEPPER_u8Rotate+0x3c2>
		__ticks = 1;
     ffe:	fe 01       	movw	r30, r28
    1000:	e7 53       	subi	r30, 0x37	; 55
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
    100c:	64 c0       	rjmp	.+200    	; 0x10d6 <STEPPER_u8Rotate+0x48a>
	else if (__tmp > 65535)
    100e:	fe 01       	movw	r30, r28
    1010:	e5 53       	subi	r30, 0x35	; 53
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1028:	18 16       	cp	r1, r24
    102a:	0c f0       	brlt	.+2      	; 0x102e <STEPPER_u8Rotate+0x3e2>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <STEPPER_u8Rotate+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	fe 01       	movw	r30, r28
    1030:	e1 53       	subi	r30, 0x31	; 49
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	8e 01       	movw	r16, r28
    104e:	07 53       	subi	r16, 0x37	; 55
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	f8 01       	movw	r30, r16
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
    1064:	1f c0       	rjmp	.+62     	; 0x10a4 <STEPPER_u8Rotate+0x458>
    1066:	fe 01       	movw	r30, r28
    1068:	e9 53       	subi	r30, 0x39	; 57
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	88 ec       	ldi	r24, 0xC8	; 200
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	fe 01       	movw	r30, r28
    1076:	e9 53       	subi	r30, 0x39	; 57
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <STEPPER_u8Rotate+0x432>
    1082:	fe 01       	movw	r30, r28
    1084:	e9 53       	subi	r30, 0x39	; 57
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108c:	de 01       	movw	r26, r28
    108e:	a7 53       	subi	r26, 0x37	; 55
    1090:	bf 4f       	sbci	r27, 0xFF	; 255
    1092:	fe 01       	movw	r30, r28
    1094:	e7 53       	subi	r30, 0x37	; 55
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	9c 93       	st	X, r25
    10a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a4:	fe 01       	movw	r30, r28
    10a6:	e7 53       	subi	r30, 0x37	; 55
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	d1 f6       	brne	.-76     	; 0x1066 <STEPPER_u8Rotate+0x41a>
    10b2:	27 c0       	rjmp	.+78     	; 0x1102 <STEPPER_u8Rotate+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b4:	8e 01       	movw	r16, r28
    10b6:	07 53       	subi	r16, 0x37	; 55
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	fe 01       	movw	r30, r28
    10bc:	e5 53       	subi	r30, 0x35	; 53
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	de 01       	movw	r26, r28
    10d8:	ab 53       	subi	r26, 0x3B	; 59
    10da:	bf 4f       	sbci	r27, 0xFF	; 255
    10dc:	fe 01       	movw	r30, r28
    10de:	e7 53       	subi	r30, 0x37	; 55
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	8d 93       	st	X+, r24
    10e8:	9c 93       	st	X, r25
    10ea:	fe 01       	movw	r30, r28
    10ec:	eb 53       	subi	r30, 0x3B	; 59
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <STEPPER_u8Rotate+0x4a8>
    10f8:	fe 01       	movw	r30, r28
    10fa:	eb 53       	subi	r30, 0x3B	; 59
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    1102:	fe 01       	movw	r30, r28
    1104:	e6 51       	subi	r30, 0x16	; 22
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	01 90       	ld	r0, Z+
    110a:	f0 81       	ld	r31, Z
    110c:	e0 2d       	mov	r30, r0
    110e:	80 81       	ld	r24, Z
    1110:	fe 01       	movw	r30, r28
    1112:	e6 51       	subi	r30, 0x16	; 22
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	01 90       	ld	r0, Z+
    1118:	f0 81       	ld	r31, Z
    111a:	e0 2d       	mov	r30, r0
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	69 2f       	mov	r22, r25
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    1126:	fe 01       	movw	r30, r28
    1128:	e6 51       	subi	r30, 0x16	; 22
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	01 90       	ld	r0, Z+
    112e:	f0 81       	ld	r31, Z
    1130:	e0 2d       	mov	r30, r0
    1132:	80 81       	ld	r24, Z
    1134:	fe 01       	movw	r30, r28
    1136:	e6 51       	subi	r30, 0x16	; 22
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	01 90       	ld	r0, Z+
    113c:	f0 81       	ld	r31, Z
    113e:	e0 2d       	mov	r30, r0
    1140:	92 81       	ldd	r25, Z+2	; 0x02
    1142:	69 2f       	mov	r22, r25
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_LOW);
    114a:	fe 01       	movw	r30, r28
    114c:	e6 51       	subi	r30, 0x16	; 22
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	01 90       	ld	r0, Z+
    1152:	f0 81       	ld	r31, Z
    1154:	e0 2d       	mov	r30, r0
    1156:	80 81       	ld	r24, Z
    1158:	fe 01       	movw	r30, r28
    115a:	e6 51       	subi	r30, 0x16	; 22
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	01 90       	ld	r0, Z+
    1160:	f0 81       	ld	r31, Z
    1162:	e0 2d       	mov	r30, r0
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	69 2f       	mov	r22, r25
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    116e:	fe 01       	movw	r30, r28
    1170:	e6 51       	subi	r30, 0x16	; 22
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	01 90       	ld	r0, Z+
    1176:	f0 81       	ld	r31, Z
    1178:	e0 2d       	mov	r30, r0
    117a:	80 81       	ld	r24, Z
    117c:	fe 01       	movw	r30, r28
    117e:	e6 51       	subi	r30, 0x16	; 22
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	01 90       	ld	r0, Z+
    1184:	f0 81       	ld	r31, Z
    1186:	e0 2d       	mov	r30, r0
    1188:	94 81       	ldd	r25, Z+4	; 0x04
    118a:	69 2f       	mov	r22, r25
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1192:	fe 01       	movw	r30, r28
    1194:	ef 53       	subi	r30, 0x3F	; 63
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e4       	ldi	r27, 0x40	; 64
    11a0:	80 83       	st	Z, r24
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	a2 83       	std	Z+2, r26	; 0x02
    11a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	8e 01       	movw	r16, r28
    11aa:	03 54       	subi	r16, 0x43	; 67
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	ef 53       	subi	r30, 0x3F	; 63
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	f8 01       	movw	r30, r16
    11ce:	80 83       	st	Z, r24
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	a2 83       	std	Z+2, r26	; 0x02
    11d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d6:	fe 01       	movw	r30, r28
    11d8:	e3 54       	subi	r30, 0x43	; 67
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	44 f4       	brge	.+16     	; 0x1204 <STEPPER_u8Rotate+0x5b8>
		__ticks = 1;
    11f4:	fe 01       	movw	r30, r28
    11f6:	e5 54       	subi	r30, 0x45	; 69
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	64 c0       	rjmp	.+200    	; 0x12cc <STEPPER_u8Rotate+0x680>
	else if (__tmp > 65535)
    1204:	fe 01       	movw	r30, r28
    1206:	e3 54       	subi	r30, 0x43	; 67
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	0c f0       	brlt	.+2      	; 0x1224 <STEPPER_u8Rotate+0x5d8>
    1222:	43 c0       	rjmp	.+134    	; 0x12aa <STEPPER_u8Rotate+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1224:	fe 01       	movw	r30, r28
    1226:	ef 53       	subi	r30, 0x3F	; 63
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8e 01       	movw	r16, r28
    1244:	05 54       	subi	r16, 0x45	; 69
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	1f c0       	rjmp	.+62     	; 0x129a <STEPPER_u8Rotate+0x64e>
    125c:	fe 01       	movw	r30, r28
    125e:	e7 54       	subi	r30, 0x47	; 71
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	88 ec       	ldi	r24, 0xC8	; 200
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	fe 01       	movw	r30, r28
    126c:	e7 54       	subi	r30, 0x47	; 71
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <STEPPER_u8Rotate+0x628>
    1278:	fe 01       	movw	r30, r28
    127a:	e7 54       	subi	r30, 0x47	; 71
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	de 01       	movw	r26, r28
    1284:	a5 54       	subi	r26, 0x45	; 69
    1286:	bf 4f       	sbci	r27, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	e5 54       	subi	r30, 0x45	; 69
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	9c 93       	st	X, r25
    1298:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	fe 01       	movw	r30, r28
    129c:	e5 54       	subi	r30, 0x45	; 69
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	d1 f6       	brne	.-76     	; 0x125c <STEPPER_u8Rotate+0x610>
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <STEPPER_u8Rotate+0x6ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12aa:	8e 01       	movw	r16, r28
    12ac:	05 54       	subi	r16, 0x45	; 69
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	fe 01       	movw	r30, r28
    12b2:	e3 54       	subi	r30, 0x43	; 67
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
    12cc:	de 01       	movw	r26, r28
    12ce:	a9 54       	subi	r26, 0x49	; 73
    12d0:	bf 4f       	sbci	r27, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	e5 54       	subi	r30, 0x45	; 69
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	8d 93       	st	X+, r24
    12de:	9c 93       	st	X, r25
    12e0:	fe 01       	movw	r30, r28
    12e2:	e9 54       	subi	r30, 0x49	; 73
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <STEPPER_u8Rotate+0x69e>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e9 54       	subi	r30, 0x49	; 73
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    12f8:	fe 01       	movw	r30, r28
    12fa:	e6 51       	subi	r30, 0x16	; 22
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	01 90       	ld	r0, Z+
    1300:	f0 81       	ld	r31, Z
    1302:	e0 2d       	mov	r30, r0
    1304:	80 81       	ld	r24, Z
    1306:	fe 01       	movw	r30, r28
    1308:	e6 51       	subi	r30, 0x16	; 22
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	01 90       	ld	r0, Z+
    130e:	f0 81       	ld	r31, Z
    1310:	e0 2d       	mov	r30, r0
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	69 2f       	mov	r22, r25
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    131c:	fe 01       	movw	r30, r28
    131e:	e6 51       	subi	r30, 0x16	; 22
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	01 90       	ld	r0, Z+
    1324:	f0 81       	ld	r31, Z
    1326:	e0 2d       	mov	r30, r0
    1328:	80 81       	ld	r24, Z
    132a:	fe 01       	movw	r30, r28
    132c:	e6 51       	subi	r30, 0x16	; 22
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	01 90       	ld	r0, Z+
    1332:	f0 81       	ld	r31, Z
    1334:	e0 2d       	mov	r30, r0
    1336:	92 81       	ldd	r25, Z+2	; 0x02
    1338:	69 2f       	mov	r22, r25
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    1340:	fe 01       	movw	r30, r28
    1342:	e6 51       	subi	r30, 0x16	; 22
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	01 90       	ld	r0, Z+
    1348:	f0 81       	ld	r31, Z
    134a:	e0 2d       	mov	r30, r0
    134c:	80 81       	ld	r24, Z
    134e:	fe 01       	movw	r30, r28
    1350:	e6 51       	subi	r30, 0x16	; 22
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	01 90       	ld	r0, Z+
    1356:	f0 81       	ld	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	69 2f       	mov	r22, r25
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_LOW);
    1364:	fe 01       	movw	r30, r28
    1366:	e6 51       	subi	r30, 0x16	; 22
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	01 90       	ld	r0, Z+
    136c:	f0 81       	ld	r31, Z
    136e:	e0 2d       	mov	r30, r0
    1370:	80 81       	ld	r24, Z
    1372:	fe 01       	movw	r30, r28
    1374:	e6 51       	subi	r30, 0x16	; 22
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	01 90       	ld	r0, Z+
    137a:	f0 81       	ld	r31, Z
    137c:	e0 2d       	mov	r30, r0
    137e:	94 81       	ldd	r25, Z+4	; 0x04
    1380:	69 2f       	mov	r22, r25
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1388:	fe 01       	movw	r30, r28
    138a:	ed 54       	subi	r30, 0x4D	; 77
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 e0       	ldi	r26, 0x00	; 0
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	80 83       	st	Z, r24
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	a2 83       	std	Z+2, r26	; 0x02
    139c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139e:	8e 01       	movw	r16, r28
    13a0:	01 55       	subi	r16, 0x51	; 81
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
    13a4:	fe 01       	movw	r30, r28
    13a6:	ed 54       	subi	r30, 0x4D	; 77
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a ef       	ldi	r20, 0xFA	; 250
    13b8:	54 e4       	ldi	r21, 0x44	; 68
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	f8 01       	movw	r30, r16
    13c4:	80 83       	st	Z, r24
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	a2 83       	std	Z+2, r26	; 0x02
    13ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13cc:	fe 01       	movw	r30, r28
    13ce:	e1 55       	subi	r30, 0x51	; 81
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e6:	88 23       	and	r24, r24
    13e8:	44 f4       	brge	.+16     	; 0x13fa <STEPPER_u8Rotate+0x7ae>
		__ticks = 1;
    13ea:	fe 01       	movw	r30, r28
    13ec:	e3 55       	subi	r30, 0x53	; 83
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    13f8:	64 c0       	rjmp	.+200    	; 0x14c2 <STEPPER_u8Rotate+0x876>
	else if (__tmp > 65535)
    13fa:	fe 01       	movw	r30, r28
    13fc:	e1 55       	subi	r30, 0x51	; 81
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	3f ef       	ldi	r19, 0xFF	; 255
    140c:	4f e7       	ldi	r20, 0x7F	; 127
    140e:	57 e4       	ldi	r21, 0x47	; 71
    1410:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1414:	18 16       	cp	r1, r24
    1416:	0c f0       	brlt	.+2      	; 0x141a <STEPPER_u8Rotate+0x7ce>
    1418:	43 c0       	rjmp	.+134    	; 0x14a0 <STEPPER_u8Rotate+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	fe 01       	movw	r30, r28
    141c:	ed 54       	subi	r30, 0x4D	; 77
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	8e 01       	movw	r16, r28
    143a:	03 55       	subi	r16, 0x53	; 83
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	f8 01       	movw	r30, r16
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	1f c0       	rjmp	.+62     	; 0x1490 <STEPPER_u8Rotate+0x844>
    1452:	fe 01       	movw	r30, r28
    1454:	e5 55       	subi	r30, 0x55	; 85
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	88 ec       	ldi	r24, 0xC8	; 200
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
    1460:	fe 01       	movw	r30, r28
    1462:	e5 55       	subi	r30, 0x55	; 85
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <STEPPER_u8Rotate+0x81e>
    146e:	fe 01       	movw	r30, r28
    1470:	e5 55       	subi	r30, 0x55	; 85
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1478:	de 01       	movw	r26, r28
    147a:	a3 55       	subi	r26, 0x53	; 83
    147c:	bf 4f       	sbci	r27, 0xFF	; 255
    147e:	fe 01       	movw	r30, r28
    1480:	e3 55       	subi	r30, 0x53	; 83
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	9c 93       	st	X, r25
    148e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	fe 01       	movw	r30, r28
    1492:	e3 55       	subi	r30, 0x53	; 83
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	d1 f6       	brne	.-76     	; 0x1452 <STEPPER_u8Rotate+0x806>
    149e:	3b cc       	rjmp	.-1930   	; 0xd16 <STEPPER_u8Rotate+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	8e 01       	movw	r16, r28
    14a2:	03 55       	subi	r16, 0x53	; 83
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	fe 01       	movw	r30, r28
    14a8:	e1 55       	subi	r30, 0x51	; 81
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	f8 01       	movw	r30, r16
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	80 83       	st	Z, r24
    14c2:	de 01       	movw	r26, r28
    14c4:	a7 55       	subi	r26, 0x57	; 87
    14c6:	bf 4f       	sbci	r27, 0xFF	; 255
    14c8:	fe 01       	movw	r30, r28
    14ca:	e3 55       	subi	r30, 0x53	; 83
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	11 96       	adiw	r26, 0x01	; 1
    14d4:	9c 93       	st	X, r25
    14d6:	8e 93       	st	-X, r24
    14d8:	fe 01       	movw	r30, r28
    14da:	e7 55       	subi	r30, 0x57	; 87
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <STEPPER_u8Rotate+0x896>
    14e6:	fe 01       	movw	r30, r28
    14e8:	e7 55       	subi	r30, 0x57	; 87
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	12 cc       	rjmp	.-2012   	; 0xd16 <STEPPER_u8Rotate+0xca>
				_delay_ms(2);
			} break;
			case CW: while(1)
			{
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_LOW);
    14f2:	fe 01       	movw	r30, r28
    14f4:	e6 51       	subi	r30, 0x16	; 22
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	01 90       	ld	r0, Z+
    14fa:	f0 81       	ld	r31, Z
    14fc:	e0 2d       	mov	r30, r0
    14fe:	80 81       	ld	r24, Z
    1500:	fe 01       	movw	r30, r28
    1502:	e6 51       	subi	r30, 0x16	; 22
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	01 90       	ld	r0, Z+
    1508:	f0 81       	ld	r31, Z
    150a:	e0 2d       	mov	r30, r0
    150c:	94 81       	ldd	r25, Z+4	; 0x04
    150e:	69 2f       	mov	r22, r25
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    1516:	fe 01       	movw	r30, r28
    1518:	e6 51       	subi	r30, 0x16	; 22
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	01 90       	ld	r0, Z+
    151e:	f0 81       	ld	r31, Z
    1520:	e0 2d       	mov	r30, r0
    1522:	80 81       	ld	r24, Z
    1524:	fe 01       	movw	r30, r28
    1526:	e6 51       	subi	r30, 0x16	; 22
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	01 90       	ld	r0, Z+
    152c:	f0 81       	ld	r31, Z
    152e:	e0 2d       	mov	r30, r0
    1530:	93 81       	ldd	r25, Z+3	; 0x03
    1532:	69 2f       	mov	r22, r25
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    153a:	fe 01       	movw	r30, r28
    153c:	e6 51       	subi	r30, 0x16	; 22
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	01 90       	ld	r0, Z+
    1542:	f0 81       	ld	r31, Z
    1544:	e0 2d       	mov	r30, r0
    1546:	80 81       	ld	r24, Z
    1548:	fe 01       	movw	r30, r28
    154a:	e6 51       	subi	r30, 0x16	; 22
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	01 90       	ld	r0, Z+
    1550:	f0 81       	ld	r31, Z
    1552:	e0 2d       	mov	r30, r0
    1554:	92 81       	ldd	r25, Z+2	; 0x02
    1556:	69 2f       	mov	r22, r25
    1558:	41 e0       	ldi	r20, 0x01	; 1
    155a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    155e:	fe 01       	movw	r30, r28
    1560:	e6 51       	subi	r30, 0x16	; 22
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	01 90       	ld	r0, Z+
    1566:	f0 81       	ld	r31, Z
    1568:	e0 2d       	mov	r30, r0
    156a:	80 81       	ld	r24, Z
    156c:	fe 01       	movw	r30, r28
    156e:	e6 51       	subi	r30, 0x16	; 22
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	01 90       	ld	r0, Z+
    1574:	f0 81       	ld	r31, Z
    1576:	e0 2d       	mov	r30, r0
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	69 2f       	mov	r22, r25
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1582:	fe 01       	movw	r30, r28
    1584:	eb 55       	subi	r30, 0x5B	; 91
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e4       	ldi	r27, 0x40	; 64
    1590:	80 83       	st	Z, r24
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	a2 83       	std	Z+2, r26	; 0x02
    1596:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	8e 01       	movw	r16, r28
    159a:	0f 55       	subi	r16, 0x5F	; 95
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	fe 01       	movw	r30, r28
    15a0:	eb 55       	subi	r30, 0x5B	; 91
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a ef       	ldi	r20, 0xFA	; 250
    15b2:	54 e4       	ldi	r21, 0x44	; 68
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	f8 01       	movw	r30, r16
    15be:	80 83       	st	Z, r24
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	a2 83       	std	Z+2, r26	; 0x02
    15c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c6:	fe 01       	movw	r30, r28
    15c8:	ef 55       	subi	r30, 0x5F	; 95
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	44 f4       	brge	.+16     	; 0x15f4 <STEPPER_u8Rotate+0x9a8>
		__ticks = 1;
    15e4:	fe 01       	movw	r30, r28
    15e6:	e1 56       	subi	r30, 0x61	; 97
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	64 c0       	rjmp	.+200    	; 0x16bc <STEPPER_u8Rotate+0xa70>
	else if (__tmp > 65535)
    15f4:	fe 01       	movw	r30, r28
    15f6:	ef 55       	subi	r30, 0x5F	; 95
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	0c f0       	brlt	.+2      	; 0x1614 <STEPPER_u8Rotate+0x9c8>
    1612:	43 c0       	rjmp	.+134    	; 0x169a <STEPPER_u8Rotate+0xa4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	fe 01       	movw	r30, r28
    1616:	eb 55       	subi	r30, 0x5B	; 91
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	8e 01       	movw	r16, r28
    1634:	01 56       	subi	r16, 0x61	; 97
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	f8 01       	movw	r30, r16
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	80 83       	st	Z, r24
    164a:	1f c0       	rjmp	.+62     	; 0x168a <STEPPER_u8Rotate+0xa3e>
    164c:	fe 01       	movw	r30, r28
    164e:	e3 56       	subi	r30, 0x63	; 99
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	88 ec       	ldi	r24, 0xC8	; 200
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	fe 01       	movw	r30, r28
    165c:	e3 56       	subi	r30, 0x63	; 99
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <STEPPER_u8Rotate+0xa18>
    1668:	fe 01       	movw	r30, r28
    166a:	e3 56       	subi	r30, 0x63	; 99
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	de 01       	movw	r26, r28
    1674:	a1 56       	subi	r26, 0x61	; 97
    1676:	bf 4f       	sbci	r27, 0xFF	; 255
    1678:	fe 01       	movw	r30, r28
    167a:	e1 56       	subi	r30, 0x61	; 97
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	fe 01       	movw	r30, r28
    168c:	e1 56       	subi	r30, 0x61	; 97
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	d1 f6       	brne	.-76     	; 0x164c <STEPPER_u8Rotate+0xa00>
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <STEPPER_u8Rotate+0xa9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169a:	8e 01       	movw	r16, r28
    169c:	01 56       	subi	r16, 0x61	; 97
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	ef 55       	subi	r30, 0x5F	; 95
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	60 81       	ld	r22, Z
    16a8:	71 81       	ldd	r23, Z+1	; 0x01
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    16bc:	de 01       	movw	r26, r28
    16be:	a5 56       	subi	r26, 0x65	; 101
    16c0:	bf 4f       	sbci	r27, 0xFF	; 255
    16c2:	fe 01       	movw	r30, r28
    16c4:	e1 56       	subi	r30, 0x61	; 97
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	8d 93       	st	X+, r24
    16ce:	9c 93       	st	X, r25
    16d0:	fe 01       	movw	r30, r28
    16d2:	e5 56       	subi	r30, 0x65	; 101
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <STEPPER_u8Rotate+0xa8e>
    16de:	fe 01       	movw	r30, r28
    16e0:	e5 56       	subi	r30, 0x65	; 101
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    16e8:	fe 01       	movw	r30, r28
    16ea:	e6 51       	subi	r30, 0x16	; 22
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	01 90       	ld	r0, Z+
    16f0:	f0 81       	ld	r31, Z
    16f2:	e0 2d       	mov	r30, r0
    16f4:	80 81       	ld	r24, Z
    16f6:	fe 01       	movw	r30, r28
    16f8:	e6 51       	subi	r30, 0x16	; 22
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	01 90       	ld	r0, Z+
    16fe:	f0 81       	ld	r31, Z
    1700:	e0 2d       	mov	r30, r0
    1702:	94 81       	ldd	r25, Z+4	; 0x04
    1704:	69 2f       	mov	r22, r25
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_LOW);
    170c:	fe 01       	movw	r30, r28
    170e:	e6 51       	subi	r30, 0x16	; 22
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	01 90       	ld	r0, Z+
    1714:	f0 81       	ld	r31, Z
    1716:	e0 2d       	mov	r30, r0
    1718:	80 81       	ld	r24, Z
    171a:	fe 01       	movw	r30, r28
    171c:	e6 51       	subi	r30, 0x16	; 22
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	01 90       	ld	r0, Z+
    1722:	f0 81       	ld	r31, Z
    1724:	e0 2d       	mov	r30, r0
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	69 2f       	mov	r22, r25
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    1730:	fe 01       	movw	r30, r28
    1732:	e6 51       	subi	r30, 0x16	; 22
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	01 90       	ld	r0, Z+
    1738:	f0 81       	ld	r31, Z
    173a:	e0 2d       	mov	r30, r0
    173c:	80 81       	ld	r24, Z
    173e:	fe 01       	movw	r30, r28
    1740:	e6 51       	subi	r30, 0x16	; 22
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	01 90       	ld	r0, Z+
    1746:	f0 81       	ld	r31, Z
    1748:	e0 2d       	mov	r30, r0
    174a:	92 81       	ldd	r25, Z+2	; 0x02
    174c:	69 2f       	mov	r22, r25
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    1754:	fe 01       	movw	r30, r28
    1756:	e6 51       	subi	r30, 0x16	; 22
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	01 90       	ld	r0, Z+
    175c:	f0 81       	ld	r31, Z
    175e:	e0 2d       	mov	r30, r0
    1760:	80 81       	ld	r24, Z
    1762:	fe 01       	movw	r30, r28
    1764:	e6 51       	subi	r30, 0x16	; 22
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	01 90       	ld	r0, Z+
    176a:	f0 81       	ld	r31, Z
    176c:	e0 2d       	mov	r30, r0
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	69 2f       	mov	r22, r25
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1778:	fe 01       	movw	r30, r28
    177a:	e9 56       	subi	r30, 0x69	; 105
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e4       	ldi	r27, 0x40	; 64
    1786:	80 83       	st	Z, r24
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	a2 83       	std	Z+2, r26	; 0x02
    178c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	8e 01       	movw	r16, r28
    1790:	0d 56       	subi	r16, 0x6D	; 109
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	fe 01       	movw	r30, r28
    1796:	e9 56       	subi	r30, 0x69	; 105
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	f8 01       	movw	r30, r16
    17b4:	80 83       	st	Z, r24
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	a2 83       	std	Z+2, r26	; 0x02
    17ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17bc:	fe 01       	movw	r30, r28
    17be:	ed 56       	subi	r30, 0x6D	; 109
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	44 f4       	brge	.+16     	; 0x17ea <STEPPER_u8Rotate+0xb9e>
		__ticks = 1;
    17da:	fe 01       	movw	r30, r28
    17dc:	ef 56       	subi	r30, 0x6F	; 111
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    17e8:	64 c0       	rjmp	.+200    	; 0x18b2 <STEPPER_u8Rotate+0xc66>
	else if (__tmp > 65535)
    17ea:	fe 01       	movw	r30, r28
    17ec:	ed 56       	subi	r30, 0x6D	; 109
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	3f ef       	ldi	r19, 0xFF	; 255
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	57 e4       	ldi	r21, 0x47	; 71
    1800:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	0c f0       	brlt	.+2      	; 0x180a <STEPPER_u8Rotate+0xbbe>
    1808:	43 c0       	rjmp	.+134    	; 0x1890 <STEPPER_u8Rotate+0xc44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180a:	fe 01       	movw	r30, r28
    180c:	e9 56       	subi	r30, 0x69	; 105
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8e 01       	movw	r16, r28
    182a:	0f 56       	subi	r16, 0x6F	; 111
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	f8 01       	movw	r30, r16
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	1f c0       	rjmp	.+62     	; 0x1880 <STEPPER_u8Rotate+0xc34>
    1842:	fe 01       	movw	r30, r28
    1844:	e1 57       	subi	r30, 0x71	; 113
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
    1850:	fe 01       	movw	r30, r28
    1852:	e1 57       	subi	r30, 0x71	; 113
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <STEPPER_u8Rotate+0xc0e>
    185e:	fe 01       	movw	r30, r28
    1860:	e1 57       	subi	r30, 0x71	; 113
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	de 01       	movw	r26, r28
    186a:	af 56       	subi	r26, 0x6F	; 111
    186c:	bf 4f       	sbci	r27, 0xFF	; 255
    186e:	fe 01       	movw	r30, r28
    1870:	ef 56       	subi	r30, 0x6F	; 111
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	9c 93       	st	X, r25
    187e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	fe 01       	movw	r30, r28
    1882:	ef 56       	subi	r30, 0x6F	; 111
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	d1 f6       	brne	.-76     	; 0x1842 <STEPPER_u8Rotate+0xbf6>
    188e:	27 c0       	rjmp	.+78     	; 0x18de <STEPPER_u8Rotate+0xc92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	8e 01       	movw	r16, r28
    1892:	0f 56       	subi	r16, 0x6F	; 111
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	ed 56       	subi	r30, 0x6D	; 109
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	f8 01       	movw	r30, r16
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
    18b2:	de 01       	movw	r26, r28
    18b4:	a3 57       	subi	r26, 0x73	; 115
    18b6:	bf 4f       	sbci	r27, 0xFF	; 255
    18b8:	fe 01       	movw	r30, r28
    18ba:	ef 56       	subi	r30, 0x6F	; 111
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	8d 93       	st	X+, r24
    18c4:	9c 93       	st	X, r25
    18c6:	fe 01       	movw	r30, r28
    18c8:	e3 57       	subi	r30, 0x73	; 115
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <STEPPER_u8Rotate+0xc84>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e3 57       	subi	r30, 0x73	; 115
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    18de:	fe 01       	movw	r30, r28
    18e0:	e6 51       	subi	r30, 0x16	; 22
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	01 90       	ld	r0, Z+
    18e6:	f0 81       	ld	r31, Z
    18e8:	e0 2d       	mov	r30, r0
    18ea:	80 81       	ld	r24, Z
    18ec:	fe 01       	movw	r30, r28
    18ee:	e6 51       	subi	r30, 0x16	; 22
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	01 90       	ld	r0, Z+
    18f4:	f0 81       	ld	r31, Z
    18f6:	e0 2d       	mov	r30, r0
    18f8:	94 81       	ldd	r25, Z+4	; 0x04
    18fa:	69 2f       	mov	r22, r25
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    1902:	fe 01       	movw	r30, r28
    1904:	e6 51       	subi	r30, 0x16	; 22
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	01 90       	ld	r0, Z+
    190a:	f0 81       	ld	r31, Z
    190c:	e0 2d       	mov	r30, r0
    190e:	80 81       	ld	r24, Z
    1910:	fe 01       	movw	r30, r28
    1912:	e6 51       	subi	r30, 0x16	; 22
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	01 90       	ld	r0, Z+
    1918:	f0 81       	ld	r31, Z
    191a:	e0 2d       	mov	r30, r0
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	69 2f       	mov	r22, r25
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_LOW);
    1926:	fe 01       	movw	r30, r28
    1928:	e6 51       	subi	r30, 0x16	; 22
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	01 90       	ld	r0, Z+
    192e:	f0 81       	ld	r31, Z
    1930:	e0 2d       	mov	r30, r0
    1932:	80 81       	ld	r24, Z
    1934:	fe 01       	movw	r30, r28
    1936:	e6 51       	subi	r30, 0x16	; 22
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	01 90       	ld	r0, Z+
    193c:	f0 81       	ld	r31, Z
    193e:	e0 2d       	mov	r30, r0
    1940:	92 81       	ldd	r25, Z+2	; 0x02
    1942:	69 2f       	mov	r22, r25
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    194a:	fe 01       	movw	r30, r28
    194c:	e6 51       	subi	r30, 0x16	; 22
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	01 90       	ld	r0, Z+
    1952:	f0 81       	ld	r31, Z
    1954:	e0 2d       	mov	r30, r0
    1956:	80 81       	ld	r24, Z
    1958:	fe 01       	movw	r30, r28
    195a:	e6 51       	subi	r30, 0x16	; 22
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	01 90       	ld	r0, Z+
    1960:	f0 81       	ld	r31, Z
    1962:	e0 2d       	mov	r30, r0
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	69 2f       	mov	r22, r25
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    196e:	fe 01       	movw	r30, r28
    1970:	e7 57       	subi	r30, 0x77	; 119
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 e0       	ldi	r26, 0x00	; 0
    197a:	b0 e4       	ldi	r27, 0x40	; 64
    197c:	80 83       	st	Z, r24
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	a2 83       	std	Z+2, r26	; 0x02
    1982:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	8e 01       	movw	r16, r28
    1986:	0b 57       	subi	r16, 0x7B	; 123
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	fe 01       	movw	r30, r28
    198c:	e7 57       	subi	r30, 0x77	; 119
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 83       	st	Z, r24
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	a2 83       	std	Z+2, r26	; 0x02
    19b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b2:	fe 01       	movw	r30, r28
    19b4:	eb 57       	subi	r30, 0x7B	; 123
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	44 f4       	brge	.+16     	; 0x19e0 <STEPPER_u8Rotate+0xd94>
		__ticks = 1;
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 57       	subi	r30, 0x7D	; 125
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	64 c0       	rjmp	.+200    	; 0x1aa8 <STEPPER_u8Rotate+0xe5c>
	else if (__tmp > 65535)
    19e0:	fe 01       	movw	r30, r28
    19e2:	eb 57       	subi	r30, 0x7B	; 123
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <STEPPER_u8Rotate+0xdb4>
    19fe:	43 c0       	rjmp	.+134    	; 0x1a86 <STEPPER_u8Rotate+0xe3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 57       	subi	r30, 0x77	; 119
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8e 01       	movw	r16, r28
    1a20:	0d 57       	subi	r16, 0x7D	; 125
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	f8 01       	movw	r30, r16
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
    1a36:	1f c0       	rjmp	.+62     	; 0x1a76 <STEPPER_u8Rotate+0xe2a>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ef 57       	subi	r30, 0x7F	; 127
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	fe 01       	movw	r30, r28
    1a48:	ef 57       	subi	r30, 0x7F	; 127
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <STEPPER_u8Rotate+0xe04>
    1a54:	fe 01       	movw	r30, r28
    1a56:	ef 57       	subi	r30, 0x7F	; 127
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	de 01       	movw	r26, r28
    1a60:	ad 57       	subi	r26, 0x7D	; 125
    1a62:	bf 4f       	sbci	r27, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	ed 57       	subi	r30, 0x7D	; 125
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	9c 93       	st	X, r25
    1a74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a76:	fe 01       	movw	r30, r28
    1a78:	ed 57       	subi	r30, 0x7D	; 125
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	d1 f6       	brne	.-76     	; 0x1a38 <STEPPER_u8Rotate+0xdec>
    1a84:	27 c0       	rjmp	.+78     	; 0x1ad4 <STEPPER_u8Rotate+0xe88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a86:	8e 01       	movw	r16, r28
    1a88:	0d 57       	subi	r16, 0x7D	; 125
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	eb 57       	subi	r30, 0x7B	; 123
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	de 01       	movw	r26, r28
    1aaa:	a1 58       	subi	r26, 0x81	; 129
    1aac:	bf 4f       	sbci	r27, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ed 57       	subi	r30, 0x7D	; 125
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	8d 93       	st	X+, r24
    1aba:	9c 93       	st	X, r25
    1abc:	fe 01       	movw	r30, r28
    1abe:	e1 58       	subi	r30, 0x81	; 129
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	91 81       	ldd	r25, Z+1	; 0x01
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <STEPPER_u8Rotate+0xe7a>
    1aca:	fe 01       	movw	r30, r28
    1acc:	e1 58       	subi	r30, 0x81	; 129
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e6 51       	subi	r30, 0x16	; 22
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	01 90       	ld	r0, Z+
    1adc:	f0 81       	ld	r31, Z
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e6 51       	subi	r30, 0x16	; 22
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	01 90       	ld	r0, Z+
    1aea:	f0 81       	ld	r31, Z
    1aec:	e0 2d       	mov	r30, r0
    1aee:	94 81       	ldd	r25, Z+4	; 0x04
    1af0:	69 2f       	mov	r22, r25
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    1af8:	fe 01       	movw	r30, r28
    1afa:	e6 51       	subi	r30, 0x16	; 22
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	01 90       	ld	r0, Z+
    1b00:	f0 81       	ld	r31, Z
    1b02:	e0 2d       	mov	r30, r0
    1b04:	80 81       	ld	r24, Z
    1b06:	fe 01       	movw	r30, r28
    1b08:	e6 51       	subi	r30, 0x16	; 22
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	f0 81       	ld	r31, Z
    1b10:	e0 2d       	mov	r30, r0
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	69 2f       	mov	r22, r25
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e6 51       	subi	r30, 0x16	; 22
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	01 90       	ld	r0, Z+
    1b24:	f0 81       	ld	r31, Z
    1b26:	e0 2d       	mov	r30, r0
    1b28:	80 81       	ld	r24, Z
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e6 51       	subi	r30, 0x16	; 22
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	01 90       	ld	r0, Z+
    1b32:	f0 81       	ld	r31, Z
    1b34:	e0 2d       	mov	r30, r0
    1b36:	92 81       	ldd	r25, Z+2	; 0x02
    1b38:	69 2f       	mov	r22, r25
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_LOW);
    1b40:	fe 01       	movw	r30, r28
    1b42:	e6 51       	subi	r30, 0x16	; 22
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	01 90       	ld	r0, Z+
    1b48:	f0 81       	ld	r31, Z
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e6 51       	subi	r30, 0x16	; 22
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	01 90       	ld	r0, Z+
    1b56:	f0 81       	ld	r31, Z
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	69 2f       	mov	r22, r25
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1b64:	fe 01       	movw	r30, r28
    1b66:	e5 58       	subi	r30, 0x85	; 133
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a0 e0       	ldi	r26, 0x00	; 0
    1b70:	b0 e4       	ldi	r27, 0x40	; 64
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	09 58       	subi	r16, 0x89	; 137
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	fe 01       	movw	r30, r28
    1b82:	e5 58       	subi	r30, 0x85	; 133
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	80 83       	st	Z, r24
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	a2 83       	std	Z+2, r26	; 0x02
    1ba6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e9 58       	subi	r30, 0x89	; 137
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	44 f4       	brge	.+16     	; 0x1bd6 <STEPPER_u8Rotate+0xf8a>
		__ticks = 1;
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	eb 58       	subi	r30, 0x8B	; 139
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    1bd4:	64 c0       	rjmp	.+200    	; 0x1c9e <STEPPER_u8Rotate+0x1052>
	else if (__tmp > 65535)
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e9 58       	subi	r30, 0x89	; 137
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <STEPPER_u8Rotate+0xfaa>
    1bf4:	43 c0       	rjmp	.+134    	; 0x1c7c <STEPPER_u8Rotate+0x1030>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e5 58       	subi	r30, 0x85	; 133
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e2       	ldi	r20, 0x20	; 32
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8e 01       	movw	r16, r28
    1c16:	0b 58       	subi	r16, 0x8B	; 139
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	1f c0       	rjmp	.+62     	; 0x1c6c <STEPPER_u8Rotate+0x1020>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ed 58       	subi	r30, 0x8D	; 141
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ed 58       	subi	r30, 0x8D	; 141
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <STEPPER_u8Rotate+0xffa>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ed 58       	subi	r30, 0x8D	; 141
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	de 01       	movw	r26, r28
    1c56:	ab 58       	subi	r26, 0x8B	; 139
    1c58:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	eb 58       	subi	r30, 0x8B	; 139
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	9c 93       	st	X, r25
    1c6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	eb 58       	subi	r30, 0x8B	; 139
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	d1 f6       	brne	.-76     	; 0x1c2e <STEPPER_u8Rotate+0xfe2>
    1c7a:	3b cc       	rjmp	.-1930   	; 0x14f2 <STEPPER_u8Rotate+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	0b 58       	subi	r16, 0x8B	; 139
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	fe 01       	movw	r30, r28
    1c84:	e9 58       	subi	r30, 0x89	; 137
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	f8 01       	movw	r30, r16
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	de 01       	movw	r26, r28
    1ca0:	af 58       	subi	r26, 0x8F	; 143
    1ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	eb 58       	subi	r30, 0x8B	; 139
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	11 96       	adiw	r26, 0x01	; 1
    1cb0:	9c 93       	st	X, r25
    1cb2:	8e 93       	st	-X, r24
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ef 58       	subi	r30, 0x8F	; 143
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <STEPPER_u8Rotate+0x1072>
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ef 58       	subi	r30, 0x8F	; 143
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
    1ccc:	12 cc       	rjmp	.-2012   	; 0x14f2 <STEPPER_u8Rotate+0x8a6>
				_delay_ms(2);
			} break;
			default: Local_u8ErorState=WORNG_DIRECTION; break;
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e7 51       	subi	r30, 0x17	; 23
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	85 e0       	ldi	r24, 0x05	; 5
    1cd6:	80 83       	st	Z, r24
    1cd8:	4a c7       	rjmp	.+3732   	; 0x2b6e <STEPPER_u8Rotate+0x1f22>
			}
		}
		else
		{
			Local_u32IterationsNum=(Copy_u16Angle*10)/7;
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e4 51       	subi	r30, 0x14	; 20
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	c9 01       	movw	r24, r18
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	82 0f       	add	r24, r18
    1cf6:	93 1f       	adc	r25, r19
    1cf8:	27 e0       	ldi	r18, 0x07	; 7
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	b9 01       	movw	r22, r18
    1cfe:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodhi4>
    1d02:	cb 01       	movw	r24, r22
    1d04:	fe 01       	movw	r30, r28
    1d06:	eb 51       	subi	r30, 0x1B	; 27
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	cc 01       	movw	r24, r24
    1d0c:	a0 e0       	ldi	r26, 0x00	; 0
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	a2 83       	std	Z+2, r26	; 0x02
    1d16:	b3 83       	std	Z+3, r27	; 0x03
			switch(Copy_u8Direction)
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e2 51       	subi	r30, 0x12	; 18
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	c1 51       	subi	r28, 0x11	; 17
    1d26:	df 4f       	sbci	r29, 0xFF	; 255
    1d28:	39 83       	std	Y+1, r19	; 0x01
    1d2a:	28 83       	st	Y, r18
    1d2c:	cf 5e       	subi	r28, 0xEF	; 239
    1d2e:	d0 40       	sbci	r29, 0x00	; 0
    1d30:	c1 51       	subi	r28, 0x11	; 17
    1d32:	df 4f       	sbci	r29, 0xFF	; 255
    1d34:	88 81       	ld	r24, Y
    1d36:	99 81       	ldd	r25, Y+1	; 0x01
    1d38:	cf 5e       	subi	r28, 0xEF	; 239
    1d3a:	d0 40       	sbci	r29, 0x00	; 0
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <STEPPER_u8Rotate+0x10f8>
    1d42:	f8 c3       	rjmp	.+2032   	; 0x2534 <STEPPER_u8Rotate+0x18e8>
    1d44:	c1 51       	subi	r28, 0x11	; 17
    1d46:	df 4f       	sbci	r29, 0xFF	; 255
    1d48:	e8 81       	ld	r30, Y
    1d4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d4c:	cf 5e       	subi	r28, 0xEF	; 239
    1d4e:	d0 40       	sbci	r29, 0x00	; 0
    1d50:	e2 30       	cpi	r30, 0x02	; 2
    1d52:	f1 05       	cpc	r31, r1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <STEPPER_u8Rotate+0x110c>
    1d56:	06 c7       	rjmp	.+3596   	; 0x2b64 <STEPPER_u8Rotate+0x1f18>
			{
			case CCW: for(Local_u32Counter=0;Local_u32Counter<Local_u32IterationsNum;Local_u32Counter++)
    1d58:	fe 01       	movw	r30, r28
    1d5a:	ef 51       	subi	r30, 0x1F	; 31
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	10 82       	st	Z, r1
    1d60:	11 82       	std	Z+1, r1	; 0x01
    1d62:	12 82       	std	Z+2, r1	; 0x02
    1d64:	13 82       	std	Z+3, r1	; 0x03
    1d66:	d0 c3       	rjmp	.+1952   	; 0x2508 <STEPPER_u8Rotate+0x18bc>
			{
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_LOW);
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e6 51       	subi	r30, 0x16	; 22
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	01 90       	ld	r0, Z+
    1d70:	f0 81       	ld	r31, Z
    1d72:	e0 2d       	mov	r30, r0
    1d74:	80 81       	ld	r24, Z
    1d76:	fe 01       	movw	r30, r28
    1d78:	e6 51       	subi	r30, 0x16	; 22
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	01 90       	ld	r0, Z+
    1d7e:	f0 81       	ld	r31, Z
    1d80:	e0 2d       	mov	r30, r0
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	69 2f       	mov	r22, r25
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e6 51       	subi	r30, 0x16	; 22
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	01 90       	ld	r0, Z+
    1d94:	f0 81       	ld	r31, Z
    1d96:	e0 2d       	mov	r30, r0
    1d98:	80 81       	ld	r24, Z
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e6 51       	subi	r30, 0x16	; 22
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	01 90       	ld	r0, Z+
    1da2:	f0 81       	ld	r31, Z
    1da4:	e0 2d       	mov	r30, r0
    1da6:	92 81       	ldd	r25, Z+2	; 0x02
    1da8:	69 2f       	mov	r22, r25
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    1db0:	fe 01       	movw	r30, r28
    1db2:	e6 51       	subi	r30, 0x16	; 22
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	01 90       	ld	r0, Z+
    1db8:	f0 81       	ld	r31, Z
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e6 51       	subi	r30, 0x16	; 22
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	f0 81       	ld	r31, Z
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	69 2f       	mov	r22, r25
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e6 51       	subi	r30, 0x16	; 22
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	01 90       	ld	r0, Z+
    1ddc:	f0 81       	ld	r31, Z
    1dde:	e0 2d       	mov	r30, r0
    1de0:	80 81       	ld	r24, Z
    1de2:	fe 01       	movw	r30, r28
    1de4:	e6 51       	subi	r30, 0x16	; 22
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	01 90       	ld	r0, Z+
    1dea:	f0 81       	ld	r31, Z
    1dec:	e0 2d       	mov	r30, r0
    1dee:	94 81       	ldd	r25, Z+4	; 0x04
    1df0:	69 2f       	mov	r22, r25
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e3 59       	subi	r30, 0x93	; 147
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a0 e0       	ldi	r26, 0x00	; 0
    1e04:	b0 e4       	ldi	r27, 0x40	; 64
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	a2 83       	std	Z+2, r26	; 0x02
    1e0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0e:	8e 01       	movw	r16, r28
    1e10:	07 59       	subi	r16, 0x97	; 151
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	fe 01       	movw	r30, r28
    1e16:	e3 59       	subi	r30, 0x93	; 147
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a ef       	ldi	r20, 0xFA	; 250
    1e28:	54 e4       	ldi	r21, 0x44	; 68
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	f8 01       	movw	r30, r16
    1e34:	80 83       	st	Z, r24
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	a2 83       	std	Z+2, r26	; 0x02
    1e3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e7 59       	subi	r30, 0x97	; 151
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e8       	ldi	r20, 0x80	; 128
    1e50:	5f e3       	ldi	r21, 0x3F	; 63
    1e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e56:	88 23       	and	r24, r24
    1e58:	44 f4       	brge	.+16     	; 0x1e6a <STEPPER_u8Rotate+0x121e>
		__ticks = 1;
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 59       	subi	r30, 0x99	; 153
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	64 c0       	rjmp	.+200    	; 0x1f32 <STEPPER_u8Rotate+0x12e6>
	else if (__tmp > 65535)
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e7 59       	subi	r30, 0x97	; 151
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	4f e7       	ldi	r20, 0x7F	; 127
    1e7e:	57 e4       	ldi	r21, 0x47	; 71
    1e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	0c f0       	brlt	.+2      	; 0x1e8a <STEPPER_u8Rotate+0x123e>
    1e88:	43 c0       	rjmp	.+134    	; 0x1f10 <STEPPER_u8Rotate+0x12c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e3 59       	subi	r30, 0x93	; 147
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	09 59       	subi	r16, 0x99	; 153
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	f8 01       	movw	r30, r16
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	1f c0       	rjmp	.+62     	; 0x1f00 <STEPPER_u8Rotate+0x12b4>
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	eb 59       	subi	r30, 0x9B	; 155
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	eb 59       	subi	r30, 0x9B	; 155
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <STEPPER_u8Rotate+0x128e>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	eb 59       	subi	r30, 0x9B	; 155
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	de 01       	movw	r26, r28
    1eea:	a9 59       	subi	r26, 0x99	; 153
    1eec:	bf 4f       	sbci	r27, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e9 59       	subi	r30, 0x99	; 153
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	11 96       	adiw	r26, 0x01	; 1
    1efc:	9c 93       	st	X, r25
    1efe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	fe 01       	movw	r30, r28
    1f02:	e9 59       	subi	r30, 0x99	; 153
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	d1 f6       	brne	.-76     	; 0x1ec2 <STEPPER_u8Rotate+0x1276>
    1f0e:	27 c0       	rjmp	.+78     	; 0x1f5e <STEPPER_u8Rotate+0x1312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	8e 01       	movw	r16, r28
    1f12:	09 59       	subi	r16, 0x99	; 153
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	e7 59       	subi	r30, 0x97	; 151
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	de 01       	movw	r26, r28
    1f34:	ad 59       	subi	r26, 0x9D	; 157
    1f36:	bf 4f       	sbci	r27, 0xFF	; 255
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e9 59       	subi	r30, 0x99	; 153
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	8d 93       	st	X+, r24
    1f44:	9c 93       	st	X, r25
    1f46:	fe 01       	movw	r30, r28
    1f48:	ed 59       	subi	r30, 0x9D	; 157
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <STEPPER_u8Rotate+0x1304>
    1f54:	fe 01       	movw	r30, r28
    1f56:	ed 59       	subi	r30, 0x9D	; 157
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e6 51       	subi	r30, 0x16	; 22
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e6 51       	subi	r30, 0x16	; 22
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	01 90       	ld	r0, Z+
    1f74:	f0 81       	ld	r31, Z
    1f76:	e0 2d       	mov	r30, r0
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	69 2f       	mov	r22, r25
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_LOW);
    1f82:	fe 01       	movw	r30, r28
    1f84:	e6 51       	subi	r30, 0x16	; 22
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	01 90       	ld	r0, Z+
    1f8a:	f0 81       	ld	r31, Z
    1f8c:	e0 2d       	mov	r30, r0
    1f8e:	80 81       	ld	r24, Z
    1f90:	fe 01       	movw	r30, r28
    1f92:	e6 51       	subi	r30, 0x16	; 22
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	01 90       	ld	r0, Z+
    1f98:	f0 81       	ld	r31, Z
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	92 81       	ldd	r25, Z+2	; 0x02
    1f9e:	69 2f       	mov	r22, r25
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e6 51       	subi	r30, 0x16	; 22
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	01 90       	ld	r0, Z+
    1fae:	f0 81       	ld	r31, Z
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e6 51       	subi	r30, 0x16	; 22
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	01 90       	ld	r0, Z+
    1fbc:	f0 81       	ld	r31, Z
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	69 2f       	mov	r22, r25
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e6 51       	subi	r30, 0x16	; 22
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	01 90       	ld	r0, Z+
    1fd2:	f0 81       	ld	r31, Z
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e6 51       	subi	r30, 0x16	; 22
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	01 90       	ld	r0, Z+
    1fe0:	f0 81       	ld	r31, Z
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	94 81       	ldd	r25, Z+4	; 0x04
    1fe6:	69 2f       	mov	r22, r25
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e1 5a       	subi	r30, 0xA1	; 161
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a0 e0       	ldi	r26, 0x00	; 0
    1ffa:	b0 e4       	ldi	r27, 0x40	; 64
    1ffc:	80 83       	st	Z, r24
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	a2 83       	std	Z+2, r26	; 0x02
    2002:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2004:	8e 01       	movw	r16, r28
    2006:	05 5a       	subi	r16, 0xA5	; 165
    2008:	1f 4f       	sbci	r17, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e1 5a       	subi	r30, 0xA1	; 161
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4a ef       	ldi	r20, 0xFA	; 250
    201e:	54 e4       	ldi	r21, 0x44	; 68
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	f8 01       	movw	r30, r16
    202a:	80 83       	st	Z, r24
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	a2 83       	std	Z+2, r26	; 0x02
    2030:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2032:	fe 01       	movw	r30, r28
    2034:	e5 5a       	subi	r30, 0xA5	; 165
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	44 f4       	brge	.+16     	; 0x2060 <STEPPER_u8Rotate+0x1414>
		__ticks = 1;
    2050:	fe 01       	movw	r30, r28
    2052:	e7 5a       	subi	r30, 0xA7	; 167
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	80 83       	st	Z, r24
    205e:	64 c0       	rjmp	.+200    	; 0x2128 <STEPPER_u8Rotate+0x14dc>
	else if (__tmp > 65535)
    2060:	fe 01       	movw	r30, r28
    2062:	e5 5a       	subi	r30, 0xA5	; 165
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	57 e4       	ldi	r21, 0x47	; 71
    2076:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	0c f0       	brlt	.+2      	; 0x2080 <STEPPER_u8Rotate+0x1434>
    207e:	43 c0       	rjmp	.+134    	; 0x2106 <STEPPER_u8Rotate+0x14ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2080:	fe 01       	movw	r30, r28
    2082:	e1 5a       	subi	r30, 0xA1	; 161
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8e 01       	movw	r16, r28
    20a0:	07 5a       	subi	r16, 0xA7	; 167
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	1f c0       	rjmp	.+62     	; 0x20f6 <STEPPER_u8Rotate+0x14aa>
    20b8:	fe 01       	movw	r30, r28
    20ba:	e9 5a       	subi	r30, 0xA9	; 169
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	fe 01       	movw	r30, r28
    20c8:	e9 5a       	subi	r30, 0xA9	; 169
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <STEPPER_u8Rotate+0x1484>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e9 5a       	subi	r30, 0xA9	; 169
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	de 01       	movw	r26, r28
    20e0:	a7 5a       	subi	r26, 0xA7	; 167
    20e2:	bf 4f       	sbci	r27, 0xFF	; 255
    20e4:	fe 01       	movw	r30, r28
    20e6:	e7 5a       	subi	r30, 0xA7	; 167
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	11 96       	adiw	r26, 0x01	; 1
    20f2:	9c 93       	st	X, r25
    20f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	fe 01       	movw	r30, r28
    20f8:	e7 5a       	subi	r30, 0xA7	; 167
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	d1 f6       	brne	.-76     	; 0x20b8 <STEPPER_u8Rotate+0x146c>
    2104:	27 c0       	rjmp	.+78     	; 0x2154 <STEPPER_u8Rotate+0x1508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	8e 01       	movw	r16, r28
    2108:	07 5a       	subi	r16, 0xA7	; 167
    210a:	1f 4f       	sbci	r17, 0xFF	; 255
    210c:	fe 01       	movw	r30, r28
    210e:	e5 5a       	subi	r30, 0xA5	; 165
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	de 01       	movw	r26, r28
    212a:	ab 5a       	subi	r26, 0xAB	; 171
    212c:	bf 4f       	sbci	r27, 0xFF	; 255
    212e:	fe 01       	movw	r30, r28
    2130:	e7 5a       	subi	r30, 0xA7	; 167
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	8d 93       	st	X+, r24
    213a:	9c 93       	st	X, r25
    213c:	fe 01       	movw	r30, r28
    213e:	eb 5a       	subi	r30, 0xAB	; 171
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <STEPPER_u8Rotate+0x14fa>
    214a:	fe 01       	movw	r30, r28
    214c:	eb 5a       	subi	r30, 0xAB	; 171
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2154:	fe 01       	movw	r30, r28
    2156:	e6 51       	subi	r30, 0x16	; 22
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	01 90       	ld	r0, Z+
    215c:	f0 81       	ld	r31, Z
    215e:	e0 2d       	mov	r30, r0
    2160:	80 81       	ld	r24, Z
    2162:	fe 01       	movw	r30, r28
    2164:	e6 51       	subi	r30, 0x16	; 22
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	01 90       	ld	r0, Z+
    216a:	f0 81       	ld	r31, Z
    216c:	e0 2d       	mov	r30, r0
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	69 2f       	mov	r22, r25
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    2178:	fe 01       	movw	r30, r28
    217a:	e6 51       	subi	r30, 0x16	; 22
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	01 90       	ld	r0, Z+
    2180:	f0 81       	ld	r31, Z
    2182:	e0 2d       	mov	r30, r0
    2184:	80 81       	ld	r24, Z
    2186:	fe 01       	movw	r30, r28
    2188:	e6 51       	subi	r30, 0x16	; 22
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	01 90       	ld	r0, Z+
    218e:	f0 81       	ld	r31, Z
    2190:	e0 2d       	mov	r30, r0
    2192:	92 81       	ldd	r25, Z+2	; 0x02
    2194:	69 2f       	mov	r22, r25
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_LOW);
    219c:	fe 01       	movw	r30, r28
    219e:	e6 51       	subi	r30, 0x16	; 22
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	01 90       	ld	r0, Z+
    21a4:	f0 81       	ld	r31, Z
    21a6:	e0 2d       	mov	r30, r0
    21a8:	80 81       	ld	r24, Z
    21aa:	fe 01       	movw	r30, r28
    21ac:	e6 51       	subi	r30, 0x16	; 22
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	01 90       	ld	r0, Z+
    21b2:	f0 81       	ld	r31, Z
    21b4:	e0 2d       	mov	r30, r0
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	69 2f       	mov	r22, r25
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    21c0:	fe 01       	movw	r30, r28
    21c2:	e6 51       	subi	r30, 0x16	; 22
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	01 90       	ld	r0, Z+
    21c8:	f0 81       	ld	r31, Z
    21ca:	e0 2d       	mov	r30, r0
    21cc:	80 81       	ld	r24, Z
    21ce:	fe 01       	movw	r30, r28
    21d0:	e6 51       	subi	r30, 0x16	; 22
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	01 90       	ld	r0, Z+
    21d6:	f0 81       	ld	r31, Z
    21d8:	e0 2d       	mov	r30, r0
    21da:	94 81       	ldd	r25, Z+4	; 0x04
    21dc:	69 2f       	mov	r22, r25
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    21e4:	fe 01       	movw	r30, r28
    21e6:	ef 5a       	subi	r30, 0xAF	; 175
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a0 e0       	ldi	r26, 0x00	; 0
    21f0:	b0 e4       	ldi	r27, 0x40	; 64
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	8e 01       	movw	r16, r28
    21fc:	03 5b       	subi	r16, 0xB3	; 179
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	ef 5a       	subi	r30, 0xAF	; 175
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	a2 83       	std	Z+2, r26	; 0x02
    2226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2228:	fe 01       	movw	r30, r28
    222a:	e3 5b       	subi	r30, 0xB3	; 179
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	44 f4       	brge	.+16     	; 0x2256 <STEPPER_u8Rotate+0x160a>
		__ticks = 1;
    2246:	fe 01       	movw	r30, r28
    2248:	e5 5b       	subi	r30, 0xB5	; 181
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	64 c0       	rjmp	.+200    	; 0x231e <STEPPER_u8Rotate+0x16d2>
	else if (__tmp > 65535)
    2256:	fe 01       	movw	r30, r28
    2258:	e3 5b       	subi	r30, 0xB3	; 179
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	0c f0       	brlt	.+2      	; 0x2276 <STEPPER_u8Rotate+0x162a>
    2274:	43 c0       	rjmp	.+134    	; 0x22fc <STEPPER_u8Rotate+0x16b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	fe 01       	movw	r30, r28
    2278:	ef 5a       	subi	r30, 0xAF	; 175
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8e 01       	movw	r16, r28
    2296:	05 5b       	subi	r16, 0xB5	; 181
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	1f c0       	rjmp	.+62     	; 0x22ec <STEPPER_u8Rotate+0x16a0>
    22ae:	fe 01       	movw	r30, r28
    22b0:	e7 5b       	subi	r30, 0xB7	; 183
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	88 ec       	ldi	r24, 0xC8	; 200
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	fe 01       	movw	r30, r28
    22be:	e7 5b       	subi	r30, 0xB7	; 183
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <STEPPER_u8Rotate+0x167a>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e7 5b       	subi	r30, 0xB7	; 183
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	de 01       	movw	r26, r28
    22d6:	a5 5b       	subi	r26, 0xB5	; 181
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	e5 5b       	subi	r30, 0xB5	; 181
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	9c 93       	st	X, r25
    22ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	fe 01       	movw	r30, r28
    22ee:	e5 5b       	subi	r30, 0xB5	; 181
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	d1 f6       	brne	.-76     	; 0x22ae <STEPPER_u8Rotate+0x1662>
    22fa:	27 c0       	rjmp	.+78     	; 0x234a <STEPPER_u8Rotate+0x16fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	8e 01       	movw	r16, r28
    22fe:	05 5b       	subi	r16, 0xB5	; 181
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	e3 5b       	subi	r30, 0xB3	; 179
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	de 01       	movw	r26, r28
    2320:	a9 5b       	subi	r26, 0xB9	; 185
    2322:	bf 4f       	sbci	r27, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	e5 5b       	subi	r30, 0xB5	; 181
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	8d 93       	st	X+, r24
    2330:	9c 93       	st	X, r25
    2332:	fe 01       	movw	r30, r28
    2334:	e9 5b       	subi	r30, 0xB9	; 185
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <STEPPER_u8Rotate+0x16f0>
    2340:	fe 01       	movw	r30, r28
    2342:	e9 5b       	subi	r30, 0xB9	; 185
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    234a:	fe 01       	movw	r30, r28
    234c:	e6 51       	subi	r30, 0x16	; 22
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	01 90       	ld	r0, Z+
    2352:	f0 81       	ld	r31, Z
    2354:	e0 2d       	mov	r30, r0
    2356:	80 81       	ld	r24, Z
    2358:	fe 01       	movw	r30, r28
    235a:	e6 51       	subi	r30, 0x16	; 22
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	01 90       	ld	r0, Z+
    2360:	f0 81       	ld	r31, Z
    2362:	e0 2d       	mov	r30, r0
    2364:	91 81       	ldd	r25, Z+1	; 0x01
    2366:	69 2f       	mov	r22, r25
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    236e:	fe 01       	movw	r30, r28
    2370:	e6 51       	subi	r30, 0x16	; 22
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	01 90       	ld	r0, Z+
    2376:	f0 81       	ld	r31, Z
    2378:	e0 2d       	mov	r30, r0
    237a:	80 81       	ld	r24, Z
    237c:	fe 01       	movw	r30, r28
    237e:	e6 51       	subi	r30, 0x16	; 22
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	01 90       	ld	r0, Z+
    2384:	f0 81       	ld	r31, Z
    2386:	e0 2d       	mov	r30, r0
    2388:	92 81       	ldd	r25, Z+2	; 0x02
    238a:	69 2f       	mov	r22, r25
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    2392:	fe 01       	movw	r30, r28
    2394:	e6 51       	subi	r30, 0x16	; 22
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	01 90       	ld	r0, Z+
    239a:	f0 81       	ld	r31, Z
    239c:	e0 2d       	mov	r30, r0
    239e:	80 81       	ld	r24, Z
    23a0:	fe 01       	movw	r30, r28
    23a2:	e6 51       	subi	r30, 0x16	; 22
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	01 90       	ld	r0, Z+
    23a8:	f0 81       	ld	r31, Z
    23aa:	e0 2d       	mov	r30, r0
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	69 2f       	mov	r22, r25
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_LOW);
    23b6:	fe 01       	movw	r30, r28
    23b8:	e6 51       	subi	r30, 0x16	; 22
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	01 90       	ld	r0, Z+
    23be:	f0 81       	ld	r31, Z
    23c0:	e0 2d       	mov	r30, r0
    23c2:	80 81       	ld	r24, Z
    23c4:	fe 01       	movw	r30, r28
    23c6:	e6 51       	subi	r30, 0x16	; 22
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	01 90       	ld	r0, Z+
    23cc:	f0 81       	ld	r31, Z
    23ce:	e0 2d       	mov	r30, r0
    23d0:	94 81       	ldd	r25, Z+4	; 0x04
    23d2:	69 2f       	mov	r22, r25
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    23da:	fe 01       	movw	r30, r28
    23dc:	ed 5b       	subi	r30, 0xBD	; 189
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e4       	ldi	r27, 0x40	; 64
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	8e 01       	movw	r16, r28
    23f2:	01 5c       	subi	r16, 0xC1	; 193
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 5b       	subi	r30, 0xBD	; 189
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a ef       	ldi	r20, 0xFA	; 250
    240a:	54 e4       	ldi	r21, 0x44	; 68
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	f8 01       	movw	r30, r16
    2416:	80 83       	st	Z, r24
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	a2 83       	std	Z+2, r26	; 0x02
    241c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    241e:	fe 01       	movw	r30, r28
    2420:	ff 96       	adiw	r30, 0x3f	; 63
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <STEPPER_u8Rotate+0x17f8>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9e af       	std	Y+62, r25	; 0x3e
    2440:	8d af       	std	Y+61, r24	; 0x3d
    2442:	46 c0       	rjmp	.+140    	; 0x24d0 <STEPPER_u8Rotate+0x1884>
	else if (__tmp > 65535)
    2444:	fe 01       	movw	r30, r28
    2446:	ff 96       	adiw	r30, 0x3f	; 63
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	64 f5       	brge	.+88     	; 0x24b8 <STEPPER_u8Rotate+0x186c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	fe 01       	movw	r30, r28
    2462:	ed 5b       	subi	r30, 0xBD	; 189
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9e af       	std	Y+62, r25	; 0x3e
    248c:	8d af       	std	Y+61, r24	; 0x3d
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <STEPPER_u8Rotate+0x1862>
    2490:	88 ec       	ldi	r24, 0xC8	; 200
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9c af       	std	Y+60, r25	; 0x3c
    2496:	8b af       	std	Y+59, r24	; 0x3b
    2498:	8b ad       	ldd	r24, Y+59	; 0x3b
    249a:	9c ad       	ldd	r25, Y+60	; 0x3c
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <STEPPER_u8Rotate+0x1850>
    24a0:	9c af       	std	Y+60, r25	; 0x3c
    24a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9e af       	std	Y+62, r25	; 0x3e
    24ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    24b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <STEPPER_u8Rotate+0x1844>
    24b6:	16 c0       	rjmp	.+44     	; 0x24e4 <STEPPER_u8Rotate+0x1898>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	fe 01       	movw	r30, r28
    24ba:	ff 96       	adiw	r30, 0x3f	; 63
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e af       	std	Y+62, r25	; 0x3e
    24ce:	8d af       	std	Y+61, r24	; 0x3d
    24d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    24d4:	9a af       	std	Y+58, r25	; 0x3a
    24d6:	89 af       	std	Y+57, r24	; 0x39
    24d8:	89 ad       	ldd	r24, Y+57	; 0x39
    24da:	9a ad       	ldd	r25, Y+58	; 0x3a
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <STEPPER_u8Rotate+0x1890>
    24e0:	9a af       	std	Y+58, r25	; 0x3a
    24e2:	89 af       	std	Y+57, r24	; 0x39
		else
		{
			Local_u32IterationsNum=(Copy_u16Angle*10)/7;
			switch(Copy_u8Direction)
			{
			case CCW: for(Local_u32Counter=0;Local_u32Counter<Local_u32IterationsNum;Local_u32Counter++)
    24e4:	9e 01       	movw	r18, r28
    24e6:	2f 51       	subi	r18, 0x1F	; 31
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	ef 51       	subi	r30, 0x1F	; 31
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	a2 81       	ldd	r26, Z+2	; 0x02
    24f6:	b3 81       	ldd	r27, Z+3	; 0x03
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	a1 1d       	adc	r26, r1
    24fc:	b1 1d       	adc	r27, r1
    24fe:	f9 01       	movw	r30, r18
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
    2508:	fe 01       	movw	r30, r28
    250a:	ef 51       	subi	r30, 0x1F	; 31
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	de 01       	movw	r26, r28
    2510:	ab 51       	subi	r26, 0x1B	; 27
    2512:	bf 4f       	sbci	r27, 0xFF	; 255
    2514:	20 81       	ld	r18, Z
    2516:	31 81       	ldd	r19, Z+1	; 0x01
    2518:	42 81       	ldd	r20, Z+2	; 0x02
    251a:	53 81       	ldd	r21, Z+3	; 0x03
    251c:	8d 91       	ld	r24, X+
    251e:	9d 91       	ld	r25, X+
    2520:	0d 90       	ld	r0, X+
    2522:	bc 91       	ld	r27, X
    2524:	a0 2d       	mov	r26, r0
    2526:	28 17       	cp	r18, r24
    2528:	39 07       	cpc	r19, r25
    252a:	4a 07       	cpc	r20, r26
    252c:	5b 07       	cpc	r21, r27
    252e:	08 f4       	brcc	.+2      	; 0x2532 <STEPPER_u8Rotate+0x18e6>
    2530:	1b cc       	rjmp	.-1994   	; 0x1d68 <STEPPER_u8Rotate+0x111c>
    2532:	1d c3       	rjmp	.+1594   	; 0x2b6e <STEPPER_u8Rotate+0x1f22>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_LOW);
				_delay_ms(2);
			} break;
			case CW: for(Local_u32Counter=0;Local_u32Counter<Local_u32IterationsNum;Local_u32Counter++)
    2534:	fe 01       	movw	r30, r28
    2536:	ef 51       	subi	r30, 0x1F	; 31
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	10 82       	st	Z, r1
    253c:	11 82       	std	Z+1, r1	; 0x01
    253e:	12 82       	std	Z+2, r1	; 0x02
    2540:	13 82       	std	Z+3, r1	; 0x03
    2542:	fa c2       	rjmp	.+1524   	; 0x2b38 <STEPPER_u8Rotate+0x1eec>
			{
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_LOW);
    2544:	fe 01       	movw	r30, r28
    2546:	e6 51       	subi	r30, 0x16	; 22
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	01 90       	ld	r0, Z+
    254c:	f0 81       	ld	r31, Z
    254e:	e0 2d       	mov	r30, r0
    2550:	80 81       	ld	r24, Z
    2552:	fe 01       	movw	r30, r28
    2554:	e6 51       	subi	r30, 0x16	; 22
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	01 90       	ld	r0, Z+
    255a:	f0 81       	ld	r31, Z
    255c:	e0 2d       	mov	r30, r0
    255e:	94 81       	ldd	r25, Z+4	; 0x04
    2560:	69 2f       	mov	r22, r25
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    2568:	fe 01       	movw	r30, r28
    256a:	e6 51       	subi	r30, 0x16	; 22
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	01 90       	ld	r0, Z+
    2570:	f0 81       	ld	r31, Z
    2572:	e0 2d       	mov	r30, r0
    2574:	80 81       	ld	r24, Z
    2576:	fe 01       	movw	r30, r28
    2578:	e6 51       	subi	r30, 0x16	; 22
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	01 90       	ld	r0, Z+
    257e:	f0 81       	ld	r31, Z
    2580:	e0 2d       	mov	r30, r0
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	69 2f       	mov	r22, r25
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    258c:	fe 01       	movw	r30, r28
    258e:	e6 51       	subi	r30, 0x16	; 22
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	01 90       	ld	r0, Z+
    2594:	f0 81       	ld	r31, Z
    2596:	e0 2d       	mov	r30, r0
    2598:	80 81       	ld	r24, Z
    259a:	fe 01       	movw	r30, r28
    259c:	e6 51       	subi	r30, 0x16	; 22
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	01 90       	ld	r0, Z+
    25a2:	f0 81       	ld	r31, Z
    25a4:	e0 2d       	mov	r30, r0
    25a6:	92 81       	ldd	r25, Z+2	; 0x02
    25a8:	69 2f       	mov	r22, r25
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    25b0:	fe 01       	movw	r30, r28
    25b2:	e6 51       	subi	r30, 0x16	; 22
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	01 90       	ld	r0, Z+
    25b8:	f0 81       	ld	r31, Z
    25ba:	e0 2d       	mov	r30, r0
    25bc:	80 81       	ld	r24, Z
    25be:	fe 01       	movw	r30, r28
    25c0:	e6 51       	subi	r30, 0x16	; 22
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	01 90       	ld	r0, Z+
    25c6:	f0 81       	ld	r31, Z
    25c8:	e0 2d       	mov	r30, r0
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	69 2f       	mov	r22, r25
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e4       	ldi	r27, 0x40	; 64
    25dc:	8d ab       	std	Y+53, r24	; 0x35
    25de:	9e ab       	std	Y+54, r25	; 0x36
    25e0:	af ab       	std	Y+55, r26	; 0x37
    25e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	6d a9       	ldd	r22, Y+53	; 0x35
    25e6:	7e a9       	ldd	r23, Y+54	; 0x36
    25e8:	8f a9       	ldd	r24, Y+55	; 0x37
    25ea:	98 ad       	ldd	r25, Y+56	; 0x38
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	89 ab       	std	Y+49, r24	; 0x31
    25fe:	9a ab       	std	Y+50, r25	; 0x32
    2600:	ab ab       	std	Y+51, r26	; 0x33
    2602:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2604:	69 a9       	ldd	r22, Y+49	; 0x31
    2606:	7a a9       	ldd	r23, Y+50	; 0x32
    2608:	8b a9       	ldd	r24, Y+51	; 0x33
    260a:	9c a9       	ldd	r25, Y+52	; 0x34
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e8       	ldi	r20, 0x80	; 128
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	2c f4       	brge	.+10     	; 0x2626 <STEPPER_u8Rotate+0x19da>
		__ticks = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	98 ab       	std	Y+48, r25	; 0x30
    2622:	8f a7       	std	Y+47, r24	; 0x2f
    2624:	3f c0       	rjmp	.+126    	; 0x26a4 <STEPPER_u8Rotate+0x1a58>
	else if (__tmp > 65535)
    2626:	69 a9       	ldd	r22, Y+49	; 0x31
    2628:	7a a9       	ldd	r23, Y+50	; 0x32
    262a:	8b a9       	ldd	r24, Y+51	; 0x33
    262c:	9c a9       	ldd	r25, Y+52	; 0x34
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	4c f5       	brge	.+82     	; 0x2690 <STEPPER_u8Rotate+0x1a44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263e:	6d a9       	ldd	r22, Y+53	; 0x35
    2640:	7e a9       	ldd	r23, Y+54	; 0x36
    2642:	8f a9       	ldd	r24, Y+55	; 0x37
    2644:	98 ad       	ldd	r25, Y+56	; 0x38
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	98 ab       	std	Y+48, r25	; 0x30
    2664:	8f a7       	std	Y+47, r24	; 0x2f
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <STEPPER_u8Rotate+0x1a3a>
    2668:	88 ec       	ldi	r24, 0xC8	; 200
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9e a7       	std	Y+46, r25	; 0x2e
    266e:	8d a7       	std	Y+45, r24	; 0x2d
    2670:	8d a5       	ldd	r24, Y+45	; 0x2d
    2672:	9e a5       	ldd	r25, Y+46	; 0x2e
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <STEPPER_u8Rotate+0x1a28>
    2678:	9e a7       	std	Y+46, r25	; 0x2e
    267a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267c:	8f a5       	ldd	r24, Y+47	; 0x2f
    267e:	98 a9       	ldd	r25, Y+48	; 0x30
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	98 ab       	std	Y+48, r25	; 0x30
    2684:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	8f a5       	ldd	r24, Y+47	; 0x2f
    2688:	98 a9       	ldd	r25, Y+48	; 0x30
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	69 f7       	brne	.-38     	; 0x2668 <STEPPER_u8Rotate+0x1a1c>
    268e:	14 c0       	rjmp	.+40     	; 0x26b8 <STEPPER_u8Rotate+0x1a6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	69 a9       	ldd	r22, Y+49	; 0x31
    2692:	7a a9       	ldd	r23, Y+50	; 0x32
    2694:	8b a9       	ldd	r24, Y+51	; 0x33
    2696:	9c a9       	ldd	r25, Y+52	; 0x34
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	98 ab       	std	Y+48, r25	; 0x30
    26a2:	8f a7       	std	Y+47, r24	; 0x2f
    26a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a6:	98 a9       	ldd	r25, Y+48	; 0x30
    26a8:	9c a7       	std	Y+44, r25	; 0x2c
    26aa:	8b a7       	std	Y+43, r24	; 0x2b
    26ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <STEPPER_u8Rotate+0x1a64>
    26b4:	9c a7       	std	Y+44, r25	; 0x2c
    26b6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    26b8:	fe 01       	movw	r30, r28
    26ba:	e6 51       	subi	r30, 0x16	; 22
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	01 90       	ld	r0, Z+
    26c0:	f0 81       	ld	r31, Z
    26c2:	e0 2d       	mov	r30, r0
    26c4:	80 81       	ld	r24, Z
    26c6:	fe 01       	movw	r30, r28
    26c8:	e6 51       	subi	r30, 0x16	; 22
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	01 90       	ld	r0, Z+
    26ce:	f0 81       	ld	r31, Z
    26d0:	e0 2d       	mov	r30, r0
    26d2:	94 81       	ldd	r25, Z+4	; 0x04
    26d4:	69 2f       	mov	r22, r25
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_LOW);
    26dc:	fe 01       	movw	r30, r28
    26de:	e6 51       	subi	r30, 0x16	; 22
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	01 90       	ld	r0, Z+
    26e4:	f0 81       	ld	r31, Z
    26e6:	e0 2d       	mov	r30, r0
    26e8:	80 81       	ld	r24, Z
    26ea:	fe 01       	movw	r30, r28
    26ec:	e6 51       	subi	r30, 0x16	; 22
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	01 90       	ld	r0, Z+
    26f2:	f0 81       	ld	r31, Z
    26f4:	e0 2d       	mov	r30, r0
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	69 2f       	mov	r22, r25
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    2700:	fe 01       	movw	r30, r28
    2702:	e6 51       	subi	r30, 0x16	; 22
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	01 90       	ld	r0, Z+
    2708:	f0 81       	ld	r31, Z
    270a:	e0 2d       	mov	r30, r0
    270c:	80 81       	ld	r24, Z
    270e:	fe 01       	movw	r30, r28
    2710:	e6 51       	subi	r30, 0x16	; 22
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	01 90       	ld	r0, Z+
    2716:	f0 81       	ld	r31, Z
    2718:	e0 2d       	mov	r30, r0
    271a:	92 81       	ldd	r25, Z+2	; 0x02
    271c:	69 2f       	mov	r22, r25
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2724:	fe 01       	movw	r30, r28
    2726:	e6 51       	subi	r30, 0x16	; 22
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	01 90       	ld	r0, Z+
    272c:	f0 81       	ld	r31, Z
    272e:	e0 2d       	mov	r30, r0
    2730:	80 81       	ld	r24, Z
    2732:	fe 01       	movw	r30, r28
    2734:	e6 51       	subi	r30, 0x16	; 22
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	01 90       	ld	r0, Z+
    273a:	f0 81       	ld	r31, Z
    273c:	e0 2d       	mov	r30, r0
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	69 2f       	mov	r22, r25
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e0       	ldi	r26, 0x00	; 0
    274e:	b0 e4       	ldi	r27, 0x40	; 64
    2750:	8f a3       	std	Y+39, r24	; 0x27
    2752:	98 a7       	std	Y+40, r25	; 0x28
    2754:	a9 a7       	std	Y+41, r26	; 0x29
    2756:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6f a1       	ldd	r22, Y+39	; 0x27
    275a:	78 a5       	ldd	r23, Y+40	; 0x28
    275c:	89 a5       	ldd	r24, Y+41	; 0x29
    275e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8b a3       	std	Y+35, r24	; 0x23
    2772:	9c a3       	std	Y+36, r25	; 0x24
    2774:	ad a3       	std	Y+37, r26	; 0x25
    2776:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <STEPPER_u8Rotate+0x1b4e>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9a a3       	std	Y+34, r25	; 0x22
    2796:	89 a3       	std	Y+33, r24	; 0x21
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <STEPPER_u8Rotate+0x1bcc>
	else if (__tmp > 65535)
    279a:	6b a1       	ldd	r22, Y+35	; 0x23
    279c:	7c a1       	ldd	r23, Y+36	; 0x24
    279e:	8d a1       	ldd	r24, Y+37	; 0x25
    27a0:	9e a1       	ldd	r25, Y+38	; 0x26
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <STEPPER_u8Rotate+0x1bb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6f a1       	ldd	r22, Y+39	; 0x27
    27b4:	78 a5       	ldd	r23, Y+40	; 0x28
    27b6:	89 a5       	ldd	r24, Y+41	; 0x29
    27b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9a a3       	std	Y+34, r25	; 0x22
    27d8:	89 a3       	std	Y+33, r24	; 0x21
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <STEPPER_u8Rotate+0x1bae>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	98 a3       	std	Y+32, r25	; 0x20
    27e2:	8f 8f       	std	Y+31, r24	; 0x1f
    27e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e6:	98 a1       	ldd	r25, Y+32	; 0x20
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <STEPPER_u8Rotate+0x1b9c>
    27ec:	98 a3       	std	Y+32, r25	; 0x20
    27ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	89 a1       	ldd	r24, Y+33	; 0x21
    27f2:	9a a1       	ldd	r25, Y+34	; 0x22
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9a a3       	std	Y+34, r25	; 0x22
    27f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	89 a1       	ldd	r24, Y+33	; 0x21
    27fc:	9a a1       	ldd	r25, Y+34	; 0x22
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <STEPPER_u8Rotate+0x1b90>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <STEPPER_u8Rotate+0x1be0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6b a1       	ldd	r22, Y+35	; 0x23
    2806:	7c a1       	ldd	r23, Y+36	; 0x24
    2808:	8d a1       	ldd	r24, Y+37	; 0x25
    280a:	9e a1       	ldd	r25, Y+38	; 0x26
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9a a3       	std	Y+34, r25	; 0x22
    2816:	89 a3       	std	Y+33, r24	; 0x21
    2818:	89 a1       	ldd	r24, Y+33	; 0x21
    281a:	9a a1       	ldd	r25, Y+34	; 0x22
    281c:	9e 8f       	std	Y+30, r25	; 0x1e
    281e:	8d 8f       	std	Y+29, r24	; 0x1d
    2820:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2822:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <STEPPER_u8Rotate+0x1bd8>
    2828:	9e 8f       	std	Y+30, r25	; 0x1e
    282a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    282c:	fe 01       	movw	r30, r28
    282e:	e6 51       	subi	r30, 0x16	; 22
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	01 90       	ld	r0, Z+
    2834:	f0 81       	ld	r31, Z
    2836:	e0 2d       	mov	r30, r0
    2838:	80 81       	ld	r24, Z
    283a:	fe 01       	movw	r30, r28
    283c:	e6 51       	subi	r30, 0x16	; 22
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	01 90       	ld	r0, Z+
    2842:	f0 81       	ld	r31, Z
    2844:	e0 2d       	mov	r30, r0
    2846:	94 81       	ldd	r25, Z+4	; 0x04
    2848:	69 2f       	mov	r22, r25
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    2850:	fe 01       	movw	r30, r28
    2852:	e6 51       	subi	r30, 0x16	; 22
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	01 90       	ld	r0, Z+
    2858:	f0 81       	ld	r31, Z
    285a:	e0 2d       	mov	r30, r0
    285c:	80 81       	ld	r24, Z
    285e:	fe 01       	movw	r30, r28
    2860:	e6 51       	subi	r30, 0x16	; 22
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	01 90       	ld	r0, Z+
    2866:	f0 81       	ld	r31, Z
    2868:	e0 2d       	mov	r30, r0
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	69 2f       	mov	r22, r25
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_LOW);
    2874:	fe 01       	movw	r30, r28
    2876:	e6 51       	subi	r30, 0x16	; 22
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	01 90       	ld	r0, Z+
    287c:	f0 81       	ld	r31, Z
    287e:	e0 2d       	mov	r30, r0
    2880:	80 81       	ld	r24, Z
    2882:	fe 01       	movw	r30, r28
    2884:	e6 51       	subi	r30, 0x16	; 22
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	01 90       	ld	r0, Z+
    288a:	f0 81       	ld	r31, Z
    288c:	e0 2d       	mov	r30, r0
    288e:	92 81       	ldd	r25, Z+2	; 0x02
    2890:	69 2f       	mov	r22, r25
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2898:	fe 01       	movw	r30, r28
    289a:	e6 51       	subi	r30, 0x16	; 22
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	01 90       	ld	r0, Z+
    28a0:	f0 81       	ld	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	80 81       	ld	r24, Z
    28a6:	fe 01       	movw	r30, r28
    28a8:	e6 51       	subi	r30, 0x16	; 22
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	01 90       	ld	r0, Z+
    28ae:	f0 81       	ld	r31, Z
    28b0:	e0 2d       	mov	r30, r0
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	69 2f       	mov	r22, r25
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e0       	ldi	r26, 0x00	; 0
    28c2:	b0 e4       	ldi	r27, 0x40	; 64
    28c4:	89 8f       	std	Y+25, r24	; 0x19
    28c6:	9a 8f       	std	Y+26, r25	; 0x1a
    28c8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	69 8d       	ldd	r22, Y+25	; 0x19
    28ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8d 8b       	std	Y+21, r24	; 0x15
    28e6:	9e 8b       	std	Y+22, r25	; 0x16
    28e8:	af 8b       	std	Y+23, r26	; 0x17
    28ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <STEPPER_u8Rotate+0x1cc2>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 8b       	std	Y+20, r25	; 0x14
    290a:	8b 8b       	std	Y+19, r24	; 0x13
    290c:	3f c0       	rjmp	.+126    	; 0x298c <STEPPER_u8Rotate+0x1d40>
	else if (__tmp > 65535)
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <STEPPER_u8Rotate+0x1d2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	69 8d       	ldd	r22, Y+25	; 0x19
    2928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	0f c0       	rjmp	.+30     	; 0x296e <STEPPER_u8Rotate+0x1d22>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9a 8b       	std	Y+18, r25	; 0x12
    2956:	89 8b       	std	Y+17, r24	; 0x11
    2958:	89 89       	ldd	r24, Y+17	; 0x11
    295a:	9a 89       	ldd	r25, Y+18	; 0x12
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <STEPPER_u8Rotate+0x1d10>
    2960:	9a 8b       	std	Y+18, r25	; 0x12
    2962:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9c 8b       	std	Y+20, r25	; 0x14
    296c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <STEPPER_u8Rotate+0x1d04>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <STEPPER_u8Rotate+0x1d54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6d 89       	ldd	r22, Y+21	; 0x15
    297a:	7e 89       	ldd	r23, Y+22	; 0x16
    297c:	8f 89       	ldd	r24, Y+23	; 0x17
    297e:	98 8d       	ldd	r25, Y+24	; 0x18
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9c 8b       	std	Y+20, r25	; 0x14
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	8b 89       	ldd	r24, Y+19	; 0x13
    298e:	9c 89       	ldd	r25, Y+20	; 0x14
    2990:	98 8b       	std	Y+16, r25	; 0x10
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	8f 85       	ldd	r24, Y+15	; 0x0f
    2996:	98 89       	ldd	r25, Y+16	; 0x10
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <STEPPER_u8Rotate+0x1d4c>
    299c:	98 8b       	std	Y+16, r25	; 0x10
    299e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_HIGH);
    29a0:	fe 01       	movw	r30, r28
    29a2:	e6 51       	subi	r30, 0x16	; 22
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	01 90       	ld	r0, Z+
    29a8:	f0 81       	ld	r31, Z
    29aa:	e0 2d       	mov	r30, r0
    29ac:	80 81       	ld	r24, Z
    29ae:	fe 01       	movw	r30, r28
    29b0:	e6 51       	subi	r30, 0x16	; 22
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	01 90       	ld	r0, Z+
    29b6:	f0 81       	ld	r31, Z
    29b8:	e0 2d       	mov	r30, r0
    29ba:	94 81       	ldd	r25, Z+4	; 0x04
    29bc:	69 2f       	mov	r22, r25
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
    29c4:	fe 01       	movw	r30, r28
    29c6:	e6 51       	subi	r30, 0x16	; 22
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	01 90       	ld	r0, Z+
    29cc:	f0 81       	ld	r31, Z
    29ce:	e0 2d       	mov	r30, r0
    29d0:	80 81       	ld	r24, Z
    29d2:	fe 01       	movw	r30, r28
    29d4:	e6 51       	subi	r30, 0x16	; 22
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	01 90       	ld	r0, Z+
    29da:	f0 81       	ld	r31, Z
    29dc:	e0 2d       	mov	r30, r0
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	69 2f       	mov	r22, r25
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
    29e8:	fe 01       	movw	r30, r28
    29ea:	e6 51       	subi	r30, 0x16	; 22
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	01 90       	ld	r0, Z+
    29f0:	f0 81       	ld	r31, Z
    29f2:	e0 2d       	mov	r30, r0
    29f4:	80 81       	ld	r24, Z
    29f6:	fe 01       	movw	r30, r28
    29f8:	e6 51       	subi	r30, 0x16	; 22
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	01 90       	ld	r0, Z+
    29fe:	f0 81       	ld	r31, Z
    2a00:	e0 2d       	mov	r30, r0
    2a02:	92 81       	ldd	r25, Z+2	; 0x02
    2a04:	69 2f       	mov	r22, r25
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_LOW);
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e6 51       	subi	r30, 0x16	; 22
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	01 90       	ld	r0, Z+
    2a14:	f0 81       	ld	r31, Z
    2a16:	e0 2d       	mov	r30, r0
    2a18:	80 81       	ld	r24, Z
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e6 51       	subi	r30, 0x16	; 22
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	01 90       	ld	r0, Z+
    2a22:	f0 81       	ld	r31, Z
    2a24:	e0 2d       	mov	r30, r0
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	69 2f       	mov	r22, r25
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e0       	ldi	r26, 0x00	; 0
    2a36:	b0 e4       	ldi	r27, 0x40	; 64
    2a38:	8b 87       	std	Y+11, r24	; 0x0b
    2a3a:	9c 87       	std	Y+12, r25	; 0x0c
    2a3c:	ad 87       	std	Y+13, r26	; 0x0d
    2a3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a ef       	ldi	r20, 0xFA	; 250
    2a4e:	54 e4       	ldi	r21, 0x44	; 68
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8f 83       	std	Y+7, r24	; 0x07
    2a5a:	98 87       	std	Y+8, r25	; 0x08
    2a5c:	a9 87       	std	Y+9, r26	; 0x09
    2a5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	2c f4       	brge	.+10     	; 0x2a82 <STEPPER_u8Rotate+0x1e36>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <STEPPER_u8Rotate+0x1eb4>
	else if (__tmp > 65535)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	4c f5       	brge	.+82     	; 0x2aec <STEPPER_u8Rotate+0x1ea0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e2       	ldi	r20, 0x20	; 32
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <STEPPER_u8Rotate+0x1e96>
    2ac4:	88 ec       	ldi	r24, 0xC8	; 200
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <STEPPER_u8Rotate+0x1e84>
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	69 f7       	brne	.-38     	; 0x2ac4 <STEPPER_u8Rotate+0x1e78>
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <STEPPER_u8Rotate+0x1ec8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <STEPPER_u8Rotate+0x1ec0>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN4,DIO_u8Pin_LOW);
				_delay_ms(2);
			} break;
			case CW: for(Local_u32Counter=0;Local_u32Counter<Local_u32IterationsNum;Local_u32Counter++)
    2b14:	9e 01       	movw	r18, r28
    2b16:	2f 51       	subi	r18, 0x1F	; 31
    2b18:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ef 51       	subi	r30, 0x1F	; 31
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	a2 81       	ldd	r26, Z+2	; 0x02
    2b26:	b3 81       	ldd	r27, Z+3	; 0x03
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	a1 1d       	adc	r26, r1
    2b2c:	b1 1d       	adc	r27, r1
    2b2e:	f9 01       	movw	r30, r18
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	a2 83       	std	Z+2, r26	; 0x02
    2b36:	b3 83       	std	Z+3, r27	; 0x03
    2b38:	fe 01       	movw	r30, r28
    2b3a:	ef 51       	subi	r30, 0x1F	; 31
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	de 01       	movw	r26, r28
    2b40:	ab 51       	subi	r26, 0x1B	; 27
    2b42:	bf 4f       	sbci	r27, 0xFF	; 255
    2b44:	20 81       	ld	r18, Z
    2b46:	31 81       	ldd	r19, Z+1	; 0x01
    2b48:	42 81       	ldd	r20, Z+2	; 0x02
    2b4a:	53 81       	ldd	r21, Z+3	; 0x03
    2b4c:	8d 91       	ld	r24, X+
    2b4e:	9d 91       	ld	r25, X+
    2b50:	0d 90       	ld	r0, X+
    2b52:	bc 91       	ld	r27, X
    2b54:	a0 2d       	mov	r26, r0
    2b56:	28 17       	cp	r18, r24
    2b58:	39 07       	cpc	r19, r25
    2b5a:	4a 07       	cpc	r20, r26
    2b5c:	5b 07       	cpc	r21, r27
    2b5e:	08 f4       	brcc	.+2      	; 0x2b62 <STEPPER_u8Rotate+0x1f16>
    2b60:	f1 cc       	rjmp	.-1566   	; 0x2544 <STEPPER_u8Rotate+0x18f8>
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <STEPPER_u8Rotate+0x1f22>
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN3,DIO_u8Pin_HIGH);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN2,DIO_u8Pin_HIGH);
				DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_LOW);
				_delay_ms(2);
			} break;
			default: Local_u8ErorState=WORNG_DIRECTION; break;
    2b64:	fe 01       	movw	r30, r28
    2b66:	e7 51       	subi	r30, 0x17	; 23
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	85 e0       	ldi	r24, 0x05	; 5
    2b6c:	80 83       	st	Z, r24
			}
		}
	}

	return Local_u8ErorState;
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e7 51       	subi	r30, 0x17	; 23
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
}
    2b76:	ce 50       	subi	r28, 0x0E	; 14
    2b78:	df 4f       	sbci	r29, 0xFF	; 255
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	08 95       	ret

00002b8e <STEPPER_u8Stop>:
u8 STEPPER_u8Stop(STEPPER_MOTOR* Copy_STEPPERMOTOR)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <STEPPER_u8Stop+0x6>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	9b 83       	std	Y+3, r25	; 0x03
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErorState=OK;
    2b9e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_STEPPERMOTOR==NULL)
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	19 f4       	brne	.+6      	; 0x2bae <STEPPER_u8Stop+0x20>
	{
		Local_u8ErorState=NULL_POINTER;
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	28 c0       	rjmp	.+80     	; 0x2bfe <STEPPER_u8Stop+0x70>
	}
	else
	{
		DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2bae:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb2:	80 81       	ld	r24, Z
    2bb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	69 2f       	mov	r22, r25
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2bc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc6:	80 81       	ld	r24, Z
    2bc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2bca:	fb 81       	ldd	r31, Y+3	; 0x03
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	69 2f       	mov	r22, r25
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2bd6:	ea 81       	ldd	r30, Y+2	; 0x02
    2bd8:	fb 81       	ldd	r31, Y+3	; 0x03
    2bda:	80 81       	ld	r24, Z
    2bdc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bde:	fb 81       	ldd	r31, Y+3	; 0x03
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	69 2f       	mov	r22, r25
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_STEPPERMOTOR->Stepper_Port,Copy_STEPPERMOTOR->Stepper_PIN1,DIO_u8Pin_HIGH);
    2bea:	ea 81       	ldd	r30, Y+2	; 0x02
    2bec:	fb 81       	ldd	r31, Y+3	; 0x03
    2bee:	80 81       	ld	r24, Z
    2bf0:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf2:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	69 2f       	mov	r22, r25
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	}

	return Local_u8ErorState;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <KPD_u8GetPressedKey>:
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <KPD_u8GetPressedKey+0x6>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <KPD_u8GetPressedKey+0x8>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    2c18:	8f ef       	ldi	r24, 0xFF	; 255
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
    2c1c:	60 c0       	rjmp	.+192    	; 0x2cde <KPD_u8GetPressedKey+0xd2>
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
#endif
	static u8 Local_u8KPDROWArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	while(Local_u8PressedKey==KPD_NO_PRESSED_KEY)
	{
		for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    2c1e:	1a 82       	std	Y+2, r1	; 0x02
    2c20:	5a c0       	rjmp	.+180    	; 0x2cd6 <KPD_u8GetPressedKey+0xca>
		{
			/*Activate current column*/
			DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8Pin_LOW);
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	fc 01       	movw	r30, r24
    2c2a:	ec 57       	subi	r30, 0x7C	; 124
    2c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2e:	90 81       	ld	r25, Z
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	69 2f       	mov	r22, r25
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>

			for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    2c3a:	19 82       	std	Y+1, r1	; 0x01
    2c3c:	3a c0       	rjmp	.+116    	; 0x2cb2 <KPD_u8GetPressedKey+0xa6>
			{
				/*Read The Current row*/
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDROWArr[Local_u8RowIdx],&Local_u8PinState);
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	88 2f       	mov	r24, r24
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	fc 01       	movw	r30, r24
    2c46:	e0 58       	subi	r30, 0x80	; 128
    2c48:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4a:	90 81       	ld	r25, Z
    2c4c:	9e 01       	movw	r18, r28
    2c4e:	2c 5f       	subi	r18, 0xFC	; 252
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	69 2f       	mov	r22, r25
    2c56:	a9 01       	movw	r20, r18
    2c58:	0e 94 ca 23 	call	0x4794	; 0x4794 <DIO_u8GetPinValue>
				/*Check if switch is pressed*/
				if(Local_u8PinState==DIO_u8Pin_LOW)
    2c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5e:	88 23       	and	r24, r24
    2c60:	29 f5       	brne	.+74     	; 0x2cac <KPD_u8GetPressedKey+0xa0>
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	c9 01       	movw	r24, r18
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	82 0f       	add	r24, r18
    2c76:	93 1f       	adc	r25, r19
    2c78:	84 0f       	add	r24, r20
    2c7a:	95 1f       	adc	r25, r21
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e9 57       	subi	r30, 0x79	; 121
    2c80:	fe 4f       	sbci	r31, 0xFE	; 254
    2c82:	80 81       	ld	r24, Z
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <KPD_u8GetPressedKey+0x9a>
					while(Local_u8PinState==DIO_u8Pin_LOW)
					{
						DIO_u8GetPinValue(KPD_PORT,Local_u8KPDROWArr[Local_u8RowIdx],&Local_u8PinState);
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	fc 01       	movw	r30, r24
    2c90:	e0 58       	subi	r30, 0x80	; 128
    2c92:	fe 4f       	sbci	r31, 0xFE	; 254
    2c94:	90 81       	ld	r25, Z
    2c96:	9e 01       	movw	r18, r28
    2c98:	2c 5f       	subi	r18, 0xFC	; 252
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
    2c9e:	69 2f       	mov	r22, r25
    2ca0:	a9 01       	movw	r20, r18
    2ca2:	0e 94 ca 23 	call	0x4794	; 0x4794 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDROWArr[Local_u8RowIdx],&Local_u8PinState);
				/*Check if switch is pressed*/
				if(Local_u8PinState==DIO_u8Pin_LOW)
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
					while(Local_u8PinState==DIO_u8Pin_LOW)
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	88 23       	and	r24, r24
    2caa:	71 f3       	breq	.-36     	; 0x2c88 <KPD_u8GetPressedKey+0x7c>
		for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
		{
			/*Activate current column*/
			DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8Pin_LOW);

			for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	84 30       	cpi	r24, 0x04	; 4
    2cb6:	18 f2       	brcs	.-122    	; 0x2c3e <KPD_u8GetPressedKey+0x32>
					}
					//return Local_u8PressedKey;
				}
			}
			/*Deactivate current column*/
			DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8Pin_HIGH);
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	ec 57       	subi	r30, 0x7C	; 124
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	90 81       	ld	r25, Z
    2cc6:	83 e0       	ldi	r24, 0x03	; 3
    2cc8:	69 2f       	mov	r22, r25
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
#endif
	static u8 Local_u8KPDROWArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	while(Local_u8PressedKey==KPD_NO_PRESSED_KEY)
	{
		for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	8f 5f       	subi	r24, 0xFF	; 255
    2cd4:	8a 83       	std	Y+2, r24	; 0x02
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	83 30       	cpi	r24, 0x03	; 3
    2cda:	08 f4       	brcc	.+2      	; 0x2cde <KPD_u8GetPressedKey+0xd2>
    2cdc:	a2 cf       	rjmp	.-188    	; 0x2c22 <KPD_u8GetPressedKey+0x16>
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
#elif COLUMN_NUM==3
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN};
#endif
	static u8 Local_u8KPDROWArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	while(Local_u8PressedKey==KPD_NO_PRESSED_KEY)
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <KPD_u8GetPressedKey+0xda>
    2ce4:	9c cf       	rjmp	.-200    	; 0x2c1e <KPD_u8GetPressedKey+0x12>
			}
			/*Deactivate current column*/
			DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8Pin_HIGH);
		}
	}
	return Local_u8PressedKey;
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <CLCD_void_Init>:
//u8 Local_u8StringCounter=0;

#if CLCD_MODE==4

void CLCD_void_Init(void)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	6c 97       	sbiw	r28, 0x1c	; 28
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e2       	ldi	r26, 0x20	; 32
    2d10:	b2 e4       	ldi	r27, 0x42	; 66
    2d12:	89 8f       	std	Y+25, r24	; 0x19
    2d14:	9a 8f       	std	Y+26, r25	; 0x1a
    2d16:	ab 8f       	std	Y+27, r26	; 0x1b
    2d18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8d 8b       	std	Y+21, r24	; 0x15
    2d34:	9e 8b       	std	Y+22, r25	; 0x16
    2d36:	af 8b       	std	Y+23, r26	; 0x17
    2d38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d40:	98 8d       	ldd	r25, Y+24	; 0x18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <CLCD_void_Init+0x66>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9c 8b       	std	Y+20, r25	; 0x14
    2d58:	8b 8b       	std	Y+19, r24	; 0x13
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <CLCD_void_Init+0xe4>
	else if (__tmp > 65535)
    2d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d60:	8f 89       	ldd	r24, Y+23	; 0x17
    2d62:	98 8d       	ldd	r25, Y+24	; 0x18
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <CLCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	69 8d       	ldd	r22, Y+25	; 0x19
    2d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9c 8b       	std	Y+20, r25	; 0x14
    2d9a:	8b 8b       	std	Y+19, r24	; 0x13
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <CLCD_void_Init+0xc6>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9a 8b       	std	Y+18, r25	; 0x12
    2da4:	89 8b       	std	Y+17, r24	; 0x11
    2da6:	89 89       	ldd	r24, Y+17	; 0x11
    2da8:	9a 89       	ldd	r25, Y+18	; 0x12
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <CLCD_void_Init+0xb4>
    2dae:	9a 8b       	std	Y+18, r25	; 0x12
    2db0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8b 89       	ldd	r24, Y+19	; 0x13
    2db4:	9c 89       	ldd	r25, Y+20	; 0x14
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <CLCD_void_Init+0xa8>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <CLCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dca:	8f 89       	ldd	r24, Y+23	; 0x17
    2dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	8b 89       	ldd	r24, Y+19	; 0x13
    2ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dde:	98 8b       	std	Y+16, r25	; 0x10
    2de0:	8f 87       	std	Y+15, r24	; 0x0f
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	98 89       	ldd	r25, Y+16	; 0x10
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <CLCD_void_Init+0xf0>
    2dea:	98 8b       	std	Y+16, r25	; 0x10
    2dec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	CLCD_voidSendCommand(0b00100010);
    2dee:	82 e2       	ldi	r24, 0x22	; 34
    2df0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <CLCD_voidSendCommand>
	DIO_u8SetPortValue(CLCD_DATA_PORT,0b10000000);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	60 e8       	ldi	r22, 0x80	; 128
    2df8:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_HIGH);
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	41 e0       	ldi	r20, 0x01	; 1
    2e02:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	a0 e0       	ldi	r26, 0x00	; 0
    2e0c:	b0 e4       	ldi	r27, 0x40	; 64
    2e0e:	8b 87       	std	Y+11, r24	; 0x0b
    2e10:	9c 87       	std	Y+12, r25	; 0x0c
    2e12:	ad 87       	std	Y+13, r26	; 0x0d
    2e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	4a ef       	ldi	r20, 0xFA	; 250
    2e24:	54 e4       	ldi	r21, 0x44	; 68
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	8f 83       	std	Y+7, r24	; 0x07
    2e30:	98 87       	std	Y+8, r25	; 0x08
    2e32:	a9 87       	std	Y+9, r26	; 0x09
    2e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e8       	ldi	r20, 0x80	; 128
    2e44:	5f e3       	ldi	r21, 0x3F	; 63
    2e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4a:	88 23       	and	r24, r24
    2e4c:	2c f4       	brge	.+10     	; 0x2e58 <CLCD_void_Init+0x162>
		__ticks = 1;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	3f c0       	rjmp	.+126    	; 0x2ed6 <CLCD_void_Init+0x1e0>
	else if (__tmp > 65535)
    2e58:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5a:	78 85       	ldd	r23, Y+8	; 0x08
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	3f ef       	ldi	r19, 0xFF	; 255
    2e64:	4f e7       	ldi	r20, 0x7F	; 127
    2e66:	57 e4       	ldi	r21, 0x47	; 71
    2e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6c:	18 16       	cp	r1, r24
    2e6e:	4c f5       	brge	.+82     	; 0x2ec2 <CLCD_void_Init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e2       	ldi	r20, 0x20	; 32
    2e7e:	51 e4       	ldi	r21, 0x41	; 65
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	0f c0       	rjmp	.+30     	; 0x2eb8 <CLCD_void_Init+0x1c2>
    2e9a:	88 ec       	ldi	r24, 0xC8	; 200
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	9c 83       	std	Y+4, r25	; 0x04
    2ea0:	8b 83       	std	Y+3, r24	; 0x03
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <CLCD_void_Init+0x1b0>
    2eaa:	9c 83       	std	Y+4, r25	; 0x04
    2eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	69 f7       	brne	.-38     	; 0x2e9a <CLCD_void_Init+0x1a4>
    2ec0:	14 c0       	rjmp	.+40     	; 0x2eea <CLCD_void_Init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec4:	78 85       	ldd	r23, Y+8	; 0x08
    2ec6:	89 85       	ldd	r24, Y+9	; 0x09
    2ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	9a 83       	std	Y+2, r25	; 0x02
    2edc:	89 83       	std	Y+1, r24	; 0x01
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <CLCD_void_Init+0x1ec>
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_LOW);
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	CLCD_voidSendCommand(0b00001100);
    2ef4:	8c e0       	ldi	r24, 0x0C	; 12
    2ef6:	0e 94 89 17 	call	0x2f12	; 0x2f12 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	0e 94 89 17 	call	0x2f12	; 0x2f12 <CLCD_voidSendCommand>
}
    2f00:	6c 96       	adiw	r28, 0x1c	; 28
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	6d 97       	sbiw	r28, 0x1d	; 29
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8Pin_LOW);
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	62 e0       	ldi	r22, 0x02	; 2
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8Pin_LOW);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	61 e0       	ldi	r22, 0x01	; 1
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2f40:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_HIGH);
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a0 e0       	ldi	r26, 0x00	; 0
    2f54:	b0 e4       	ldi	r27, 0x40	; 64
    2f56:	89 8f       	std	Y+25, r24	; 0x19
    2f58:	9a 8f       	std	Y+26, r25	; 0x1a
    2f5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4a ef       	ldi	r20, 0xFA	; 250
    2f6c:	54 e4       	ldi	r21, 0x44	; 68
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	8d 8b       	std	Y+21, r24	; 0x15
    2f78:	9e 8b       	std	Y+22, r25	; 0x16
    2f7a:	af 8b       	std	Y+23, r26	; 0x17
    2f7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f80:	7e 89       	ldd	r23, Y+22	; 0x16
    2f82:	8f 89       	ldd	r24, Y+23	; 0x17
    2f84:	98 8d       	ldd	r25, Y+24	; 0x18
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9c 8b       	std	Y+20, r25	; 0x14
    2f9c:	8b 8b       	std	Y+19, r24	; 0x13
    2f9e:	3f c0       	rjmp	.+126    	; 0x301e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	4f e7       	ldi	r20, 0x7F	; 127
    2fae:	57 e4       	ldi	r21, 0x47	; 71
    2fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb4:	18 16       	cp	r1, r24
    2fb6:	4c f5       	brge	.+82     	; 0x300a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9c 8b       	std	Y+20, r25	; 0x14
    2fde:	8b 8b       	std	Y+19, r24	; 0x13
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <CLCD_voidSendCommand+0xee>
    2fe2:	88 ec       	ldi	r24, 0xC8	; 200
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9a 8b       	std	Y+18, r25	; 0x12
    2fe8:	89 8b       	std	Y+17, r24	; 0x11
    2fea:	89 89       	ldd	r24, Y+17	; 0x11
    2fec:	9a 89       	ldd	r25, Y+18	; 0x12
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <CLCD_voidSendCommand+0xdc>
    2ff2:	9a 8b       	std	Y+18, r25	; 0x12
    2ff4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	69 f7       	brne	.-38     	; 0x2fe2 <CLCD_voidSendCommand+0xd0>
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	6d 89       	ldd	r22, Y+21	; 0x15
    300c:	7e 89       	ldd	r23, Y+22	; 0x16
    300e:	8f 89       	ldd	r24, Y+23	; 0x17
    3010:	98 8d       	ldd	r25, Y+24	; 0x18
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9c 8b       	std	Y+20, r25	; 0x14
    301c:	8b 8b       	std	Y+19, r24	; 0x13
    301e:	8b 89       	ldd	r24, Y+19	; 0x13
    3020:	9c 89       	ldd	r25, Y+20	; 0x14
    3022:	98 8b       	std	Y+16, r25	; 0x10
    3024:	8f 87       	std	Y+15, r24	; 0x0f
    3026:	8f 85       	ldd	r24, Y+15	; 0x0f
    3028:	98 89       	ldd	r25, Y+16	; 0x10
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <CLCD_voidSendCommand+0x118>
    302e:	98 8b       	std	Y+16, r25	; 0x10
    3030:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_LOW);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,(Copy_u8Command<<4));
    303c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    303e:	98 2f       	mov	r25, r24
    3040:	92 95       	swap	r25
    3042:	90 7f       	andi	r25, 0xF0	; 240
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	69 2f       	mov	r22, r25
    3048:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_HIGH);
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	b0 e4       	ldi	r27, 0x40	; 64
    305e:	8b 87       	std	Y+11, r24	; 0x0b
    3060:	9c 87       	std	Y+12, r25	; 0x0c
    3062:	ad 87       	std	Y+13, r26	; 0x0d
    3064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	6b 85       	ldd	r22, Y+11	; 0x0b
    3068:	7c 85       	ldd	r23, Y+12	; 0x0c
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a ef       	ldi	r20, 0xFA	; 250
    3074:	54 e4       	ldi	r21, 0x44	; 68
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8f 83       	std	Y+7, r24	; 0x07
    3080:	98 87       	std	Y+8, r25	; 0x08
    3082:	a9 87       	std	Y+9, r26	; 0x09
    3084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e8       	ldi	r20, 0x80	; 128
    3094:	5f e3       	ldi	r21, 0x3F	; 63
    3096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <CLCD_voidSendCommand+0x196>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <CLCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	4c f5       	brge	.+82     	; 0x3112 <CLCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <CLCD_voidSendCommand+0x1f6>
    30ea:	88 ec       	ldi	r24, 0xC8	; 200
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9c 83       	std	Y+4, r25	; 0x04
    30f0:	8b 83       	std	Y+3, r24	; 0x03
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <CLCD_voidSendCommand+0x1e4>
    30fa:	9c 83       	std	Y+4, r25	; 0x04
    30fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	69 f7       	brne	.-38     	; 0x30ea <CLCD_voidSendCommand+0x1d8>
    3110:	14 c0       	rjmp	.+40     	; 0x313a <CLCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	6f 81       	ldd	r22, Y+7	; 0x07
    3114:	78 85       	ldd	r23, Y+8	; 0x08
    3116:	89 85       	ldd	r24, Y+9	; 0x09
    3118:	9a 85       	ldd	r25, Y+10	; 0x0a
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	9e 81       	ldd	r25, Y+6	; 0x06
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <CLCD_voidSendCommand+0x220>
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_LOW);
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	40 e0       	ldi	r20, 0x00	; 0
    3140:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
}
    3144:	6d 96       	adiw	r28, 0x1d	; 29
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	6d 97       	sbiw	r28, 0x1d	; 29
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*if(Local_u8StringCounter==0x10)
	{
		CLCD_voidGoToXY(1,0);
	}*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8Pin_HIGH);
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	62 e0       	ldi	r22, 0x02	; 2
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8Pin_LOW);
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	61 e0       	ldi	r22, 0x01	; 1
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3184:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_HIGH);
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	41 e0       	ldi	r20, 0x01	; 1
    318e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	a0 e0       	ldi	r26, 0x00	; 0
    3198:	b0 e4       	ldi	r27, 0x40	; 64
    319a:	89 8f       	std	Y+25, r24	; 0x19
    319c:	9a 8f       	std	Y+26, r25	; 0x1a
    319e:	ab 8f       	std	Y+27, r26	; 0x1b
    31a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	69 8d       	ldd	r22, Y+25	; 0x19
    31a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8d 8b       	std	Y+21, r24	; 0x15
    31bc:	9e 8b       	std	Y+22, r25	; 0x16
    31be:	af 8b       	std	Y+23, r26	; 0x17
    31c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31c2:	6d 89       	ldd	r22, Y+21	; 0x15
    31c4:	7e 89       	ldd	r23, Y+22	; 0x16
    31c6:	8f 89       	ldd	r24, Y+23	; 0x17
    31c8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9c 8b       	std	Y+20, r25	; 0x14
    31e0:	8b 8b       	std	Y+19, r24	; 0x13
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    31e4:	6d 89       	ldd	r22, Y+21	; 0x15
    31e6:	7e 89       	ldd	r23, Y+22	; 0x16
    31e8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ea:	98 8d       	ldd	r25, Y+24	; 0x18
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	69 8d       	ldd	r22, Y+25	; 0x19
    31fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9c 8b       	std	Y+20, r25	; 0x14
    3222:	8b 8b       	std	Y+19, r24	; 0x13
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <CLCD_voidSendData+0xee>
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9a 8b       	std	Y+18, r25	; 0x12
    322c:	89 8b       	std	Y+17, r24	; 0x11
    322e:	89 89       	ldd	r24, Y+17	; 0x11
    3230:	9a 89       	ldd	r25, Y+18	; 0x12
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <CLCD_voidSendData+0xdc>
    3236:	9a 8b       	std	Y+18, r25	; 0x12
    3238:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8b 89       	ldd	r24, Y+19	; 0x13
    323c:	9c 89       	ldd	r25, Y+20	; 0x14
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <CLCD_voidSendData+0xd0>
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	6d 89       	ldd	r22, Y+21	; 0x15
    3250:	7e 89       	ldd	r23, Y+22	; 0x16
    3252:	8f 89       	ldd	r24, Y+23	; 0x17
    3254:	98 8d       	ldd	r25, Y+24	; 0x18
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9c 8b       	std	Y+20, r25	; 0x14
    3260:	8b 8b       	std	Y+19, r24	; 0x13
    3262:	8b 89       	ldd	r24, Y+19	; 0x13
    3264:	9c 89       	ldd	r25, Y+20	; 0x14
    3266:	98 8b       	std	Y+16, r25	; 0x10
    3268:	8f 87       	std	Y+15, r24	; 0x0f
    326a:	8f 85       	ldd	r24, Y+15	; 0x0f
    326c:	98 89       	ldd	r25, Y+16	; 0x10
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <CLCD_voidSendData+0x118>
    3272:	98 8b       	std	Y+16, r25	; 0x10
    3274:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_LOW);
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	60 e0       	ldi	r22, 0x00	; 0
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,(Copy_u8Data<<4));
    3280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3282:	98 2f       	mov	r25, r24
    3284:	92 95       	swap	r25
    3286:	90 7f       	andi	r25, 0xF0	; 240
    3288:	82 e0       	ldi	r24, 0x02	; 2
    328a:	69 2f       	mov	r22, r25
    328c:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_HIGH);
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a0 e0       	ldi	r26, 0x00	; 0
    32a0:	b0 e4       	ldi	r27, 0x40	; 64
    32a2:	8b 87       	std	Y+11, r24	; 0x0b
    32a4:	9c 87       	std	Y+12, r25	; 0x0c
    32a6:	ad 87       	std	Y+13, r26	; 0x0d
    32a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4a ef       	ldi	r20, 0xFA	; 250
    32b8:	54 e4       	ldi	r21, 0x44	; 68
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8f 83       	std	Y+7, r24	; 0x07
    32c4:	98 87       	std	Y+8, r25	; 0x08
    32c6:	a9 87       	std	Y+9, r26	; 0x09
    32c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ca:	6f 81       	ldd	r22, Y+7	; 0x07
    32cc:	78 85       	ldd	r23, Y+8	; 0x08
    32ce:	89 85       	ldd	r24, Y+9	; 0x09
    32d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e8       	ldi	r20, 0x80	; 128
    32d8:	5f e3       	ldi	r21, 0x3F	; 63
    32da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32de:	88 23       	and	r24, r24
    32e0:	2c f4       	brge	.+10     	; 0x32ec <CLCD_voidSendData+0x196>
		__ticks = 1;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <CLCD_voidSendData+0x214>
	else if (__tmp > 65535)
    32ec:	6f 81       	ldd	r22, Y+7	; 0x07
    32ee:	78 85       	ldd	r23, Y+8	; 0x08
    32f0:	89 85       	ldd	r24, Y+9	; 0x09
    32f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	3f ef       	ldi	r19, 0xFF	; 255
    32f8:	4f e7       	ldi	r20, 0x7F	; 127
    32fa:	57 e4       	ldi	r21, 0x47	; 71
    32fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3300:	18 16       	cp	r1, r24
    3302:	4c f5       	brge	.+82     	; 0x3356 <CLCD_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3304:	6b 85       	ldd	r22, Y+11	; 0x0b
    3306:	7c 85       	ldd	r23, Y+12	; 0x0c
    3308:	8d 85       	ldd	r24, Y+13	; 0x0d
    330a:	9e 85       	ldd	r25, Y+14	; 0x0e
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e2       	ldi	r20, 0x20	; 32
    3312:	51 e4       	ldi	r21, 0x41	; 65
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9e 83       	std	Y+6, r25	; 0x06
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	0f c0       	rjmp	.+30     	; 0x334c <CLCD_voidSendData+0x1f6>
    332e:	88 ec       	ldi	r24, 0xC8	; 200
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9c 83       	std	Y+4, r25	; 0x04
    3334:	8b 83       	std	Y+3, r24	; 0x03
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	9c 81       	ldd	r25, Y+4	; 0x04
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <CLCD_voidSendData+0x1e4>
    333e:	9c 83       	std	Y+4, r25	; 0x04
    3340:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	9e 81       	ldd	r25, Y+6	; 0x06
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	69 f7       	brne	.-38     	; 0x332e <CLCD_voidSendData+0x1d8>
    3354:	14 c0       	rjmp	.+40     	; 0x337e <CLCD_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3356:	6f 81       	ldd	r22, Y+7	; 0x07
    3358:	78 85       	ldd	r23, Y+8	; 0x08
    335a:	89 85       	ldd	r24, Y+9	; 0x09
    335c:	9a 85       	ldd	r25, Y+10	; 0x0a
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9e 83       	std	Y+6, r25	; 0x06
    3368:	8d 83       	std	Y+5, r24	; 0x05
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	9a 81       	ldd	r25, Y+2	; 0x02
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <CLCD_voidSendData+0x220>
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8Pin_LOW);
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
	//Local_u8StringCounter++;
}
    3388:	6d 96       	adiw	r28, 0x1d	; 29
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <CLCD_voidSendString>:
	//Local_u8StringCounter++;
}

#endif
void CLCD_voidSendString(const char *Copy_Pcstring)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <CLCD_voidSendString+0x6>
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <CLCD_voidSendString+0x8>
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <CLCD_voidSendString+0xa>
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	9e 83       	std	Y+6, r25	; 0x06
    33aa:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8Counter=0;
    33ac:	19 82       	std	Y+1, r1	; 0x01
    33ae:	1a 82       	std	Y+2, r1	; 0x02
    33b0:	1b 82       	std	Y+3, r1	; 0x03
    33b2:	1c 82       	std	Y+4, r1	; 0x04
    33b4:	15 c0       	rjmp	.+42     	; 0x33e0 <CLCD_voidSendString+0x46>
	while(Copy_Pcstring[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_Pcstring[Local_u8Counter]);
    33b6:	29 81       	ldd	r18, Y+1	; 0x01
    33b8:	3a 81       	ldd	r19, Y+2	; 0x02
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	fc 01       	movw	r30, r24
    33c0:	e2 0f       	add	r30, r18
    33c2:	f3 1f       	adc	r31, r19
    33c4:	80 81       	ld	r24, Z
    33c6:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
		Local_u8Counter++;
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	ab 81       	ldd	r26, Y+3	; 0x03
    33d0:	bc 81       	ldd	r27, Y+4	; 0x04
    33d2:	01 96       	adiw	r24, 0x01	; 1
    33d4:	a1 1d       	adc	r26, r1
    33d6:	b1 1d       	adc	r27, r1
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	ab 83       	std	Y+3, r26	; 0x03
    33de:	bc 83       	std	Y+4, r27	; 0x04

#endif
void CLCD_voidSendString(const char *Copy_Pcstring)
{
	u32 Local_u8Counter=0;
	while(Copy_Pcstring[Local_u8Counter] != '\0')
    33e0:	29 81       	ldd	r18, Y+1	; 0x01
    33e2:	3a 81       	ldd	r19, Y+2	; 0x02
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	fc 01       	movw	r30, r24
    33ea:	e2 0f       	add	r30, r18
    33ec:	f3 1f       	adc	r31, r19
    33ee:	80 81       	ld	r24, Z
    33f0:	88 23       	and	r24, r24
    33f2:	09 f7       	brne	.-62     	; 0x33b6 <CLCD_voidSendString+0x1c>
	{
		CLCD_voidSendData(Copy_Pcstring[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    33f4:	26 96       	adiw	r28, 0x06	; 6
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 copy_u8XPos, u8 copy_u8YPos)
{
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	00 d0       	rcall	.+0      	; 0x340c <CLCD_voidGoToXY+0x6>
    340c:	0f 92       	push	r0
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	8a 83       	std	Y+2, r24	; 0x02
    3414:	6b 83       	std	Y+3, r22	; 0x03
	//Local_u8StringCounter=copy_u8YPos;
	u8 Local_u8Address;
	if(copy_u8XPos==0)
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	88 23       	and	r24, r24
    341a:	19 f4       	brne	.+6      	; 0x3422 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=copy_u8YPos;
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	89 83       	std	Y+1, r24	; 0x01
    3420:	06 c0       	rjmp	.+12     	; 0x342e <CLCD_voidGoToXY+0x28>
	}
	else if(copy_u8XPos==1)
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	19 f4       	brne	.+6      	; 0x342e <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=copy_u8YPos+0x40;
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	80 5c       	subi	r24, 0xC0	; 192
    342c:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(0x80+Local_u8Address);
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	80 58       	subi	r24, 0x80	; 128
    3432:	0e 94 89 17 	call	0x2f12	; 0x2f12 <CLCD_voidSendCommand>
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <CLCD_voidCLR>:

void CLCD_voidCLR(void)
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(1);
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <CLCD_voidSendCommand>
	//Local_u8StringCounter=0;
}
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <CLCD_void_WriteSpecialCharacter>:

void CLCD_void_WriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	27 97       	sbiw	r28, 0x07	; 7
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	9c 83       	std	Y+4, r25	; 0x04
    346c:	8b 83       	std	Y+3, r24	; 0x03
    346e:	6d 83       	std	Y+5, r22	; 0x05
    3470:	4e 83       	std	Y+6, r20	; 0x06
    3472:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter=0;
    3474:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAddress+0x40);
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	80 5c       	subi	r24, 0xC0	; 192
    348e:	0e 94 89 17 	call	0x2f12	; 0x2f12 <CLCD_voidSendCommand>
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    3492:	1a 82       	std	Y+2, r1	; 0x02
    3494:	0e c0       	rjmp	.+28     	; 0x34b2 <CLCD_void_WriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	fc 01       	movw	r30, r24
    34a2:	e2 0f       	add	r30, r18
    34a4:	f3 1f       	adc	r31, r19
    34a6:	80 81       	ld	r24, Z
    34a8:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
void CLCD_void_WriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
	u8 Local_u8Counter=0;
	u8 Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	CLCD_voidSendCommand(Local_u8CGRAMAddress+0x40);
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	8f 5f       	subi	r24, 0xFF	; 255
    34b0:	8a 83       	std	Y+2, r24	; 0x02
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	88 30       	cpi	r24, 0x08	; 8
    34b6:	78 f3       	brcs	.-34     	; 0x3496 <CLCD_void_WriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    34b8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ba:	6f 81       	ldd	r22, Y+7	; 0x07
    34bc:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
}
    34c6:	27 96       	adiw	r28, 0x07	; 7
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <CLCD_void_SendNumber>:

void CLCD_void_SendNumber(s8* Copy_ps8String , s32 Copy_s32Number)
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	2d 97       	sbiw	r28, 0x0d	; 13
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	99 87       	std	Y+9, r25	; 0x09
    34ee:	88 87       	std	Y+8, r24	; 0x08
    34f0:	4a 87       	std	Y+10, r20	; 0x0a
    34f2:	5b 87       	std	Y+11, r21	; 0x0b
    34f4:	6c 87       	std	Y+12, r22	; 0x0c
    34f6:	7d 87       	std	Y+13, r23	; 0x0d
	u8 Local_u8NumLength=0,Local_u8Rem,Local_u8Counter;
    34f8:	1f 82       	std	Y+7, r1	; 0x07
	u32 Local_u32Num=Copy_s32Number;
    34fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    34fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    34fe:	ac 85       	ldd	r26, Y+12	; 0x0c
    3500:	bd 85       	ldd	r27, Y+13	; 0x0d
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	9a 83       	std	Y+2, r25	; 0x02
    3506:	ab 83       	std	Y+3, r26	; 0x03
    3508:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_s32Number==0)
    350a:	8a 85       	ldd	r24, Y+10	; 0x0a
    350c:	9b 85       	ldd	r25, Y+11	; 0x0b
    350e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3510:	bd 85       	ldd	r27, Y+13	; 0x0d
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	a1 05       	cpc	r26, r1
    3516:	b1 05       	cpc	r27, r1
    3518:	51 f4       	brne	.+20     	; 0x352e <CLCD_void_SendNumber+0x56>
	{
		Copy_ps8String[0]='0';
    351a:	e8 85       	ldd	r30, Y+8	; 0x08
    351c:	f9 85       	ldd	r31, Y+9	; 0x09
    351e:	80 e3       	ldi	r24, 0x30	; 48
    3520:	80 83       	st	Z, r24
		Copy_ps8String[1]='\0';
    3522:	88 85       	ldd	r24, Y+8	; 0x08
    3524:	99 85       	ldd	r25, Y+9	; 0x09
    3526:	fc 01       	movw	r30, r24
    3528:	31 96       	adiw	r30, 0x01	; 1
    352a:	10 82       	st	Z, r1
    352c:	7c c0       	rjmp	.+248    	; 0x3626 <CLCD_void_SendNumber+0x14e>
	}
	else
	{
		if(Copy_s32Number<0)
    352e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3530:	9b 85       	ldd	r25, Y+11	; 0x0b
    3532:	ac 85       	ldd	r26, Y+12	; 0x0c
    3534:	bd 85       	ldd	r27, Y+13	; 0x0d
    3536:	bb 23       	and	r27, r27
    3538:	44 f5       	brge	.+80     	; 0x358a <CLCD_void_SendNumber+0xb2>
		{
			CLCD_voidSendData('-');
    353a:	8d e2       	ldi	r24, 0x2D	; 45
    353c:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
			Copy_s32Number*=-1;
    3540:	8a 85       	ldd	r24, Y+10	; 0x0a
    3542:	9b 85       	ldd	r25, Y+11	; 0x0b
    3544:	ac 85       	ldd	r26, Y+12	; 0x0c
    3546:	bd 85       	ldd	r27, Y+13	; 0x0d
    3548:	b0 95       	com	r27
    354a:	a0 95       	com	r26
    354c:	90 95       	com	r25
    354e:	81 95       	neg	r24
    3550:	9f 4f       	sbci	r25, 0xFF	; 255
    3552:	af 4f       	sbci	r26, 0xFF	; 255
    3554:	bf 4f       	sbci	r27, 0xFF	; 255
    3556:	8a 87       	std	Y+10, r24	; 0x0a
    3558:	9b 87       	std	Y+11, r25	; 0x0b
    355a:	ac 87       	std	Y+12, r26	; 0x0c
    355c:	bd 87       	std	Y+13, r27	; 0x0d
    355e:	15 c0       	rjmp	.+42     	; 0x358a <CLCD_void_SendNumber+0xb2>
		}
		while(Local_u32Num!=0)
		{
			Local_u8NumLength++;
    3560:	8f 81       	ldd	r24, Y+7	; 0x07
    3562:	8f 5f       	subi	r24, 0xFF	; 255
    3564:	8f 83       	std	Y+7, r24	; 0x07
			Local_u32Num/=10;
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	ab 81       	ldd	r26, Y+3	; 0x03
    356c:	bc 81       	ldd	r27, Y+4	; 0x04
    356e:	2a e0       	ldi	r18, 0x0A	; 10
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e0       	ldi	r20, 0x00	; 0
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 08 31 	call	0x6210	; 0x6210 <__udivmodsi4>
    357e:	da 01       	movw	r26, r20
    3580:	c9 01       	movw	r24, r18
    3582:	89 83       	std	Y+1, r24	; 0x01
    3584:	9a 83       	std	Y+2, r25	; 0x02
    3586:	ab 83       	std	Y+3, r26	; 0x03
    3588:	bc 83       	std	Y+4, r27	; 0x04
		if(Copy_s32Number<0)
		{
			CLCD_voidSendData('-');
			Copy_s32Number*=-1;
		}
		while(Local_u32Num!=0)
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	ab 81       	ldd	r26, Y+3	; 0x03
    3590:	bc 81       	ldd	r27, Y+4	; 0x04
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	a1 05       	cpc	r26, r1
    3596:	b1 05       	cpc	r27, r1
    3598:	19 f7       	brne	.-58     	; 0x3560 <CLCD_void_SendNumber+0x88>
		{
			Local_u8NumLength++;
			Local_u32Num/=10;
		}
		for(Local_u8Counter=0;Local_u8Counter<Local_u8NumLength;Local_u8Counter++)
    359a:	1d 82       	std	Y+5, r1	; 0x05
    359c:	37 c0       	rjmp	.+110    	; 0x360c <CLCD_void_SendNumber+0x134>
		{
			Local_u8Rem=Copy_s32Number%10;
    359e:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    35a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    35a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    35a6:	2a e0       	ldi	r18, 0x0A	; 10
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	50 e0       	ldi	r21, 0x00	; 0
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 2a 31 	call	0x6254	; 0x6254 <__divmodsi4>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	8e 83       	std	Y+6, r24	; 0x06
			Copy_s32Number/=10;
    35bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    35be:	9b 85       	ldd	r25, Y+11	; 0x0b
    35c0:	ac 85       	ldd	r26, Y+12	; 0x0c
    35c2:	bd 85       	ldd	r27, Y+13	; 0x0d
    35c4:	2a e0       	ldi	r18, 0x0A	; 10
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	0e 94 2a 31 	call	0x6254	; 0x6254 <__divmodsi4>
    35d4:	da 01       	movw	r26, r20
    35d6:	c9 01       	movw	r24, r18
    35d8:	8a 87       	std	Y+10, r24	; 0x0a
    35da:	9b 87       	std	Y+11, r25	; 0x0b
    35dc:	ac 87       	std	Y+12, r26	; 0x0c
    35de:	bd 87       	std	Y+13, r27	; 0x0d
			Copy_ps8String[Local_u8NumLength-(Local_u8Counter+1)]=Local_u8Rem+'0';
    35e0:	8f 81       	ldd	r24, Y+7	; 0x07
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	88 2f       	mov	r24, r24
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	80 95       	com	r24
    35ee:	90 95       	com	r25
    35f0:	82 0f       	add	r24, r18
    35f2:	93 1f       	adc	r25, r19
    35f4:	9c 01       	movw	r18, r24
    35f6:	88 85       	ldd	r24, Y+8	; 0x08
    35f8:	99 85       	ldd	r25, Y+9	; 0x09
    35fa:	fc 01       	movw	r30, r24
    35fc:	e2 0f       	add	r30, r18
    35fe:	f3 1f       	adc	r31, r19
    3600:	8e 81       	ldd	r24, Y+6	; 0x06
    3602:	80 5d       	subi	r24, 0xD0	; 208
    3604:	80 83       	st	Z, r24
		while(Local_u32Num!=0)
		{
			Local_u8NumLength++;
			Local_u32Num/=10;
		}
		for(Local_u8Counter=0;Local_u8Counter<Local_u8NumLength;Local_u8Counter++)
    3606:	8d 81       	ldd	r24, Y+5	; 0x05
    3608:	8f 5f       	subi	r24, 0xFF	; 255
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	9d 81       	ldd	r25, Y+5	; 0x05
    360e:	8f 81       	ldd	r24, Y+7	; 0x07
    3610:	98 17       	cp	r25, r24
    3612:	28 f2       	brcs	.-118    	; 0x359e <CLCD_void_SendNumber+0xc6>
		{
			Local_u8Rem=Copy_s32Number%10;
			Copy_s32Number/=10;
			Copy_ps8String[Local_u8NumLength-(Local_u8Counter+1)]=Local_u8Rem+'0';
		}
		Copy_ps8String[Local_u8NumLength]='\0';
    3614:	8f 81       	ldd	r24, Y+7	; 0x07
    3616:	28 2f       	mov	r18, r24
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	88 85       	ldd	r24, Y+8	; 0x08
    361c:	99 85       	ldd	r25, Y+9	; 0x09
    361e:	fc 01       	movw	r30, r24
    3620:	e2 0f       	add	r30, r18
    3622:	f3 1f       	adc	r31, r19
    3624:	10 82       	st	Z, r1
	}
	CLCD_voidSendString(Copy_ps8String);
    3626:	88 85       	ldd	r24, Y+8	; 0x08
    3628:	99 85       	ldd	r25, Y+9	; 0x09
    362a:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
}
    362e:	2d 96       	adiw	r28, 0x0d	; 13
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <LED_u8TurnOn>:
#include "LED_interface.h"
#include "LED_config.h"
#include "LED_private.h"

u8 LED_u8TurnOn(LED_t* Copy_PLED_tLED)
{
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	00 d0       	rcall	.+0      	; 0x3646 <LED_u8TurnOn+0x6>
    3646:	00 d0       	rcall	.+0      	; 0x3648 <LED_u8TurnOn+0x8>
    3648:	0f 92       	push	r0
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	9b 83       	std	Y+3, r25	; 0x03
    3650:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    3652:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_PLED_tLED->conn_type)
    3654:	ea 81       	ldd	r30, Y+2	; 0x02
    3656:	fb 81       	ldd	r31, Y+3	; 0x03
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	3d 83       	std	Y+5, r19	; 0x05
    3660:	2c 83       	std	Y+4, r18	; 0x04
    3662:	8c 81       	ldd	r24, Y+4	; 0x04
    3664:	9d 81       	ldd	r25, Y+5	; 0x05
    3666:	00 97       	sbiw	r24, 0x00	; 0
    3668:	31 f0       	breq	.+12     	; 0x3676 <LED_u8TurnOn+0x36>
    366a:	2c 81       	ldd	r18, Y+4	; 0x04
    366c:	3d 81       	ldd	r19, Y+5	; 0x05
    366e:	21 30       	cpi	r18, 0x01	; 1
    3670:	31 05       	cpc	r19, r1
    3672:	61 f0       	breq	.+24     	; 0x368c <LED_u8TurnOn+0x4c>
    3674:	16 c0       	rjmp	.+44     	; 0x36a2 <LED_u8TurnOn+0x62>
	{
	case LED_u8SourceCon: DIO_u8SetPinValue(Copy_PLED_tLED->port,Copy_PLED_tLED->pin,DIO_u8Pin_HIGH); break;
    3676:	ea 81       	ldd	r30, Y+2	; 0x02
    3678:	fb 81       	ldd	r31, Y+3	; 0x03
    367a:	80 81       	ld	r24, Z
    367c:	ea 81       	ldd	r30, Y+2	; 0x02
    367e:	fb 81       	ldd	r31, Y+3	; 0x03
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	69 2f       	mov	r22, r25
    3684:	41 e0       	ldi	r20, 0x01	; 1
    3686:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    368a:	0d c0       	rjmp	.+26     	; 0x36a6 <LED_u8TurnOn+0x66>
	case LED_u8SinkCon: DIO_u8SetPinValue(Copy_PLED_tLED->port,Copy_PLED_tLED->pin,DIO_u8Pin_LOW); break;
    368c:	ea 81       	ldd	r30, Y+2	; 0x02
    368e:	fb 81       	ldd	r31, Y+3	; 0x03
    3690:	80 81       	ld	r24, Z
    3692:	ea 81       	ldd	r30, Y+2	; 0x02
    3694:	fb 81       	ldd	r31, Y+3	; 0x03
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	69 2f       	mov	r22, r25
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <LED_u8TurnOn+0x66>
	default: Local_u8ErrorState=1;
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <LED_u8TurnOff>:

u8 LED_u8TurnOff(LED_t* Copy_PLED_tLED)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <LED_u8TurnOff+0x6>
    36be:	00 d0       	rcall	.+0      	; 0x36c0 <LED_u8TurnOff+0x8>
    36c0:	0f 92       	push	r0
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	9b 83       	std	Y+3, r25	; 0x03
    36c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    36ca:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_PLED_tLED->conn_type)
    36cc:	ea 81       	ldd	r30, Y+2	; 0x02
    36ce:	fb 81       	ldd	r31, Y+3	; 0x03
    36d0:	82 81       	ldd	r24, Z+2	; 0x02
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	3d 83       	std	Y+5, r19	; 0x05
    36d8:	2c 83       	std	Y+4, r18	; 0x04
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	9d 81       	ldd	r25, Y+5	; 0x05
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	31 f0       	breq	.+12     	; 0x36ee <LED_u8TurnOff+0x36>
    36e2:	2c 81       	ldd	r18, Y+4	; 0x04
    36e4:	3d 81       	ldd	r19, Y+5	; 0x05
    36e6:	21 30       	cpi	r18, 0x01	; 1
    36e8:	31 05       	cpc	r19, r1
    36ea:	61 f0       	breq	.+24     	; 0x3704 <LED_u8TurnOff+0x4c>
    36ec:	16 c0       	rjmp	.+44     	; 0x371a <LED_u8TurnOff+0x62>
	{
	case LED_u8SourceCon: DIO_u8SetPinValue(Copy_PLED_tLED->port,Copy_PLED_tLED->pin,DIO_u8Pin_LOW); break;
    36ee:	ea 81       	ldd	r30, Y+2	; 0x02
    36f0:	fb 81       	ldd	r31, Y+3	; 0x03
    36f2:	80 81       	ld	r24, Z
    36f4:	ea 81       	ldd	r30, Y+2	; 0x02
    36f6:	fb 81       	ldd	r31, Y+3	; 0x03
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	69 2f       	mov	r22, r25
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3702:	0d c0       	rjmp	.+26     	; 0x371e <LED_u8TurnOff+0x66>
	case LED_u8SinkCon: DIO_u8SetPinValue(Copy_PLED_tLED->port,Copy_PLED_tLED->pin,DIO_u8Pin_HIGH); break;
    3704:	ea 81       	ldd	r30, Y+2	; 0x02
    3706:	fb 81       	ldd	r31, Y+3	; 0x03
    3708:	80 81       	ld	r24, Z
    370a:	ea 81       	ldd	r30, Y+2	; 0x02
    370c:	fb 81       	ldd	r31, Y+3	; 0x03
    370e:	91 81       	ldd	r25, Z+1	; 0x01
    3710:	69 2f       	mov	r22, r25
    3712:	41 e0       	ldi	r20, 0x01	; 1
    3714:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3718:	02 c0       	rjmp	.+4      	; 0x371e <LED_u8TurnOff+0x66>
	default: Local_u8ErrorState=1;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	08 95       	ret

00003730 <LED_u8Toggle>:
u8 LED_u8Toggle(LED_t* Copy_PLED_tLED)
{
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	00 d0       	rcall	.+0      	; 0x3736 <LED_u8Toggle+0x6>
    3736:	0f 92       	push	r0
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	9b 83       	std	Y+3, r25	; 0x03
    373e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    3740:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PLED_tLED->conn_type <= LED_u8SinkCon)
    3742:	ea 81       	ldd	r30, Y+2	; 0x02
    3744:	fb 81       	ldd	r31, Y+3	; 0x03
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	82 30       	cpi	r24, 0x02	; 2
    374a:	50 f4       	brcc	.+20     	; 0x3760 <LED_u8Toggle+0x30>
	{
		DIO_u8TogglePinValue(Copy_PLED_tLED->port,Copy_PLED_tLED->pin);
    374c:	ea 81       	ldd	r30, Y+2	; 0x02
    374e:	fb 81       	ldd	r31, Y+3	; 0x03
    3750:	80 81       	ld	r24, Z
    3752:	ea 81       	ldd	r30, Y+2	; 0x02
    3754:	fb 81       	ldd	r31, Y+3	; 0x03
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	69 2f       	mov	r22, r25
    375a:	0e 94 3f 23 	call	0x467e	; 0x467e <DIO_u8TogglePinValue>
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <LED_u8Toggle+0x34>
	}
	else
	{
		Local_u8ErrorState=1;
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3764:	89 81       	ldd	r24, Y+1	; 0x01
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	08 95       	ret

00003772 <SSD_u8SetNumber>:
#include "SSD_config.h"
#include "SSD_private.h"

u8 SSD_u8SSDArrCC[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
u8 SSD_u8SetNumber(SSD_t* Copy_PSSD_tSSD , u8 copy_u8Number)
{
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	00 d0       	rcall	.+0      	; 0x3778 <SSD_u8SetNumber+0x6>
    3778:	00 d0       	rcall	.+0      	; 0x377a <SSD_u8SetNumber+0x8>
    377a:	00 d0       	rcall	.+0      	; 0x377c <SSD_u8SetNumber+0xa>
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	9b 83       	std	Y+3, r25	; 0x03
    3782:	8a 83       	std	Y+2, r24	; 0x02
    3784:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
    3786:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_PSSD_tSSD->com_type)
    3788:	ea 81       	ldd	r30, Y+2	; 0x02
    378a:	fb 81       	ldd	r31, Y+3	; 0x03
    378c:	80 81       	ld	r24, Z
    378e:	28 2f       	mov	r18, r24
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	3e 83       	std	Y+6, r19	; 0x06
    3794:	2d 83       	std	Y+5, r18	; 0x05
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	9e 81       	ldd	r25, Y+6	; 0x06
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	31 f0       	breq	.+12     	; 0x37aa <SSD_u8SetNumber+0x38>
    379e:	2d 81       	ldd	r18, Y+5	; 0x05
    37a0:	3e 81       	ldd	r19, Y+6	; 0x06
    37a2:	21 30       	cpi	r18, 0x01	; 1
    37a4:	31 05       	cpc	r19, r1
    37a6:	d1 f0       	breq	.+52     	; 0x37dc <SSD_u8SetNumber+0x6a>
    37a8:	34 c0       	rjmp	.+104    	; 0x3812 <SSD_u8SetNumber+0xa0>
	{
	case SSD_u8COM_CATHOD: DIO_u8SetPortValue(Copy_PSSD_tSSD->port , SSD_u8SSDArrCC[copy_u8Number]);
    37aa:	ea 81       	ldd	r30, Y+2	; 0x02
    37ac:	fb 81       	ldd	r31, Y+3	; 0x03
    37ae:	21 81       	ldd	r18, Z+1	; 0x01
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	88 2f       	mov	r24, r24
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	fc 01       	movw	r30, r24
    37b8:	ed 56       	subi	r30, 0x6D	; 109
    37ba:	fe 4f       	sbci	r31, 0xFE	; 254
    37bc:	90 81       	ld	r25, Z
    37be:	82 2f       	mov	r24, r18
    37c0:	69 2f       	mov	r22, r25
    37c2:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(Copy_PSSD_tSSD->Enable_Port , Copy_PSSD_tSSD->Enable_Pin ,DIO_u8Pin_LOW); break;
    37c6:	ea 81       	ldd	r30, Y+2	; 0x02
    37c8:	fb 81       	ldd	r31, Y+3	; 0x03
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	ea 81       	ldd	r30, Y+2	; 0x02
    37ce:	fb 81       	ldd	r31, Y+3	; 0x03
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	69 2f       	mov	r22, r25
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    37da:	1d c0       	rjmp	.+58     	; 0x3816 <SSD_u8SetNumber+0xa4>
	case SSD_u8COM_ANOD: DIO_u8SetPortValue(Copy_PSSD_tSSD->port , (~SSD_u8SSDArrCC[copy_u8Number]));
    37dc:	ea 81       	ldd	r30, Y+2	; 0x02
    37de:	fb 81       	ldd	r31, Y+3	; 0x03
    37e0:	21 81       	ldd	r18, Z+1	; 0x01
    37e2:	8c 81       	ldd	r24, Y+4	; 0x04
    37e4:	88 2f       	mov	r24, r24
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	fc 01       	movw	r30, r24
    37ea:	ed 56       	subi	r30, 0x6D	; 109
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	80 81       	ld	r24, Z
    37f0:	98 2f       	mov	r25, r24
    37f2:	90 95       	com	r25
    37f4:	82 2f       	mov	r24, r18
    37f6:	69 2f       	mov	r22, r25
    37f8:	0e 94 f7 22 	call	0x45ee	; 0x45ee <DIO_u8SetPortValue>
	DIO_u8SetPinValue(Copy_PSSD_tSSD->Enable_Port , Copy_PSSD_tSSD->Enable_Pin ,DIO_u8Pin_HIGH); break;
    37fc:	ea 81       	ldd	r30, Y+2	; 0x02
    37fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3800:	82 81       	ldd	r24, Z+2	; 0x02
    3802:	ea 81       	ldd	r30, Y+2	; 0x02
    3804:	fb 81       	ldd	r31, Y+3	; 0x03
    3806:	93 81       	ldd	r25, Z+3	; 0x03
    3808:	69 2f       	mov	r22, r25
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <SSD_u8SetNumber+0xa4>
	default: Local_u8ErrorState=1; break;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3816:	89 81       	ldd	r24, Y+1	; 0x01
}
    3818:	26 96       	adiw	r28, 0x06	; 6
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <SSD_u8ComStateControl>:

u8 SSD_u8ComStateControl(SSD_t* Copy_PSSD_tSSD , u8 Copy_u8Comstate)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	28 97       	sbiw	r28, 0x08	; 8
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	9b 83       	std	Y+3, r25	; 0x03
    3840:	8a 83       	std	Y+2, r24	; 0x02
    3842:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
    3844:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Comstate == SSD_u8COM_ENABLE)
    3846:	8c 81       	ldd	r24, Y+4	; 0x04
    3848:	81 30       	cpi	r24, 0x01	; 1
    384a:	51 f5       	brne	.+84     	; 0x38a0 <SSD_u8ComStateControl+0x76>
	{
		switch(Copy_PSSD_tSSD->com_type)
    384c:	ea 81       	ldd	r30, Y+2	; 0x02
    384e:	fb 81       	ldd	r31, Y+3	; 0x03
    3850:	80 81       	ld	r24, Z
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	38 87       	std	Y+8, r19	; 0x08
    3858:	2f 83       	std	Y+7, r18	; 0x07
    385a:	8f 81       	ldd	r24, Y+7	; 0x07
    385c:	98 85       	ldd	r25, Y+8	; 0x08
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	31 f0       	breq	.+12     	; 0x386e <SSD_u8ComStateControl+0x44>
    3862:	2f 81       	ldd	r18, Y+7	; 0x07
    3864:	38 85       	ldd	r19, Y+8	; 0x08
    3866:	21 30       	cpi	r18, 0x01	; 1
    3868:	31 05       	cpc	r19, r1
    386a:	61 f0       	breq	.+24     	; 0x3884 <SSD_u8ComStateControl+0x5a>
    386c:	16 c0       	rjmp	.+44     	; 0x389a <SSD_u8ComStateControl+0x70>
		{
		case SSD_u8COM_CATHOD: DIO_u8SetPinValue(Copy_PSSD_tSSD->Enable_Port , Copy_PSSD_tSSD->Enable_Pin ,DIO_u8Pin_LOW); break;
    386e:	ea 81       	ldd	r30, Y+2	; 0x02
    3870:	fb 81       	ldd	r31, Y+3	; 0x03
    3872:	82 81       	ldd	r24, Z+2	; 0x02
    3874:	ea 81       	ldd	r30, Y+2	; 0x02
    3876:	fb 81       	ldd	r31, Y+3	; 0x03
    3878:	93 81       	ldd	r25, Z+3	; 0x03
    387a:	69 2f       	mov	r22, r25
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3882:	3d c0       	rjmp	.+122    	; 0x38fe <SSD_u8ComStateControl+0xd4>
		case SSD_u8COM_ANOD: DIO_u8SetPinValue(Copy_PSSD_tSSD->Enable_Port , Copy_PSSD_tSSD->Enable_Pin ,DIO_u8Pin_HIGH); break;
    3884:	ea 81       	ldd	r30, Y+2	; 0x02
    3886:	fb 81       	ldd	r31, Y+3	; 0x03
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	ea 81       	ldd	r30, Y+2	; 0x02
    388c:	fb 81       	ldd	r31, Y+3	; 0x03
    388e:	93 81       	ldd	r25, Z+3	; 0x03
    3890:	69 2f       	mov	r22, r25
    3892:	41 e0       	ldi	r20, 0x01	; 1
    3894:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    3898:	32 c0       	rjmp	.+100    	; 0x38fe <SSD_u8ComStateControl+0xd4>
		default: Local_u8ErrorState=1;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	2f c0       	rjmp	.+94     	; 0x38fe <SSD_u8ComStateControl+0xd4>
		}
	}
	else if(Copy_u8Comstate == SSD_u8COM_DISABLE)
    38a0:	8c 81       	ldd	r24, Y+4	; 0x04
    38a2:	88 23       	and	r24, r24
    38a4:	51 f5       	brne	.+84     	; 0x38fa <SSD_u8ComStateControl+0xd0>
	{
		switch(Copy_PSSD_tSSD->com_type)
    38a6:	ea 81       	ldd	r30, Y+2	; 0x02
    38a8:	fb 81       	ldd	r31, Y+3	; 0x03
    38aa:	80 81       	ld	r24, Z
    38ac:	28 2f       	mov	r18, r24
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	3e 83       	std	Y+6, r19	; 0x06
    38b2:	2d 83       	std	Y+5, r18	; 0x05
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	31 f0       	breq	.+12     	; 0x38c8 <SSD_u8ComStateControl+0x9e>
    38bc:	2d 81       	ldd	r18, Y+5	; 0x05
    38be:	3e 81       	ldd	r19, Y+6	; 0x06
    38c0:	21 30       	cpi	r18, 0x01	; 1
    38c2:	31 05       	cpc	r19, r1
    38c4:	61 f0       	breq	.+24     	; 0x38de <SSD_u8ComStateControl+0xb4>
    38c6:	16 c0       	rjmp	.+44     	; 0x38f4 <SSD_u8ComStateControl+0xca>
		{
		case SSD_u8COM_CATHOD: DIO_u8SetPinValue(Copy_PSSD_tSSD->Enable_Port , Copy_PSSD_tSSD->Enable_Pin ,DIO_u8Pin_HIGH); break;
    38c8:	ea 81       	ldd	r30, Y+2	; 0x02
    38ca:	fb 81       	ldd	r31, Y+3	; 0x03
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	ea 81       	ldd	r30, Y+2	; 0x02
    38d0:	fb 81       	ldd	r31, Y+3	; 0x03
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	69 2f       	mov	r22, r25
    38d6:	41 e0       	ldi	r20, 0x01	; 1
    38d8:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    38dc:	10 c0       	rjmp	.+32     	; 0x38fe <SSD_u8ComStateControl+0xd4>
		case SSD_u8COM_ANOD: DIO_u8SetPinValue(Copy_PSSD_tSSD->Enable_Port , Copy_PSSD_tSSD->Enable_Pin ,DIO_u8Pin_LOW); break;
    38de:	ea 81       	ldd	r30, Y+2	; 0x02
    38e0:	fb 81       	ldd	r31, Y+3	; 0x03
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	ea 81       	ldd	r30, Y+2	; 0x02
    38e6:	fb 81       	ldd	r31, Y+3	; 0x03
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	69 2f       	mov	r22, r25
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	0e 94 e5 21 	call	0x43ca	; 0x43ca <DIO_u8SetPinValue>
    38f2:	05 c0       	rjmp	.+10     	; 0x38fe <SSD_u8ComStateControl+0xd4>
		default: Local_u8ErrorState=1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <SSD_u8ComStateControl+0xd4>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3900:	28 96       	adiw	r28, 0x08	; 8
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <TIMER0_voidInit>:
#include "TIMER_register.h"

static void (*TIMER0_pvCallBackFunc) (void)=NULL;

void TIMER0_voidInit(void)
{
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
	/*choose CTC Mode*/
	SET_BIT(TCCR0,TCCR0_WGM01);
    391a:	a3 e5       	ldi	r26, 0x53	; 83
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	e3 e5       	ldi	r30, 0x53	; 83
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	88 60       	ori	r24, 0x08	; 8
    3926:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM00);
    3928:	a3 e5       	ldi	r26, 0x53	; 83
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	e3 e5       	ldi	r30, 0x53	; 83
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 81       	ld	r24, Z
    3932:	8f 7b       	andi	r24, 0xBF	; 191
    3934:	8c 93       	st	X, r24
	/*Output Compare Match Interrupt Enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    3936:	a9 e5       	ldi	r26, 0x59	; 89
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	e9 e5       	ldi	r30, 0x59	; 89
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	82 60       	ori	r24, 0x02	; 2
    3942:	8c 93       	st	X, r24
	/*Set Compare Match Value to 125*/
	OCR0=125;
    3944:	ec e5       	ldi	r30, 0x5C	; 92
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	8d e7       	ldi	r24, 0x7D	; 125
    394a:	80 83       	st	Z, r24
	/*Clear on Compare Match ,Set on top*/
	//SET_BIT(TCCR0,5);
	//CLR_BIT(TCCR0,4);
	/*Prescaler: Division By 8*/
	SET_BIT(TCCR0,TCCR0_CS00);
    394c:	a3 e5       	ldi	r26, 0x53	; 83
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e3 e5       	ldi	r30, 0x53	; 83
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	81 60       	ori	r24, 0x01	; 1
    3958:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    395a:	a3 e5       	ldi	r26, 0x53	; 83
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	e3 e5       	ldi	r30, 0x53	; 83
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	82 60       	ori	r24, 0x02	; 2
    3966:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    3968:	a3 e5       	ldi	r26, 0x53	; 83
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	e3 e5       	ldi	r30, 0x53	; 83
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	8b 7f       	andi	r24, 0xFB	; 251
    3974:	8c 93       	st	X, r24
}
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	08 95       	ret

0000397c <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
	/*Choose Fast PWM Mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3984:	af e4       	ldi	r26, 0x4F	; 79
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	ef e4       	ldi	r30, 0x4F	; 79
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	8e 7f       	andi	r24, 0xFE	; 254
    3990:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    3992:	af e4       	ldi	r26, 0x4F	; 79
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	ef e4       	ldi	r30, 0x4F	; 79
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	82 60       	ori	r24, 0x02	; 2
    399e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    39a0:	ae e4       	ldi	r26, 0x4E	; 78
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	ee e4       	ldi	r30, 0x4E	; 78
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	88 60       	ori	r24, 0x08	; 8
    39ac:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    39ae:	ae e4       	ldi	r26, 0x4E	; 78
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	ee e4       	ldi	r30, 0x4E	; 78
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	80 61       	ori	r24, 0x10	; 16
    39ba:	8c 93       	st	X, r24
	/*Compare Output Mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    39bc:	af e4       	ldi	r26, 0x4F	; 79
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	ef e4       	ldi	r30, 0x4F	; 79
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	80 81       	ld	r24, Z
    39c6:	80 68       	ori	r24, 0x80	; 128
    39c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    39ca:	af e4       	ldi	r26, 0x4F	; 79
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	ef e4       	ldi	r30, 0x4F	; 79
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	8f 7b       	andi	r24, 0xBF	; 191
    39d6:	8c 93       	st	X, r24
	/*Prescaler*/
	SET_BIT(TCCR1B,TCCR1B_CS11);
    39d8:	ae e4       	ldi	r26, 0x4E	; 78
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	ee e4       	ldi	r30, 0x4E	; 78
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
    39e2:	82 60       	ori	r24, 0x02	; 2
    39e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    39e6:	ae e4       	ldi	r26, 0x4E	; 78
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	ee e4       	ldi	r30, 0x4E	; 78
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	8e 7f       	andi	r24, 0xFE	; 254
    39f2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    39f4:	ae e4       	ldi	r26, 0x4E	; 78
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	ee e4       	ldi	r30, 0x4E	; 78
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	8b 7f       	andi	r24, 0xFB	; 251
    3a00:	8c 93       	st	X, r24
}
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <TIMER1_voidSetChannelACompMatchValue>:

void TIMER1_voidSetChannelACompMatchValue(u16 Copy_u16Value)
{
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <TIMER1_voidSetChannelACompMatchValue+0x6>
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    3a16:	ea e4       	ldi	r30, 0x4A	; 74
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
}
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	08 95       	ret

00003a2c <TIMER1_voidSetICR1Value>:

void TIMER1_voidSetICR1Value(u16 Copy_u16Value)
{
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <TIMER1_voidSetICR1Value+0x6>
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	9a 83       	std	Y+2, r25	; 0x02
    3a38:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    3a3a:	e6 e4       	ldi	r30, 0x46	; 70
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
}
    3a46:	0f 90       	pop	r0
    3a48:	0f 90       	pop	r0
    3a4a:	cf 91       	pop	r28
    3a4c:	df 91       	pop	r29
    3a4e:	08 95       	ret

00003a50 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
    3a50:	df 93       	push	r29
    3a52:	cf 93       	push	r28
    3a54:	0f 92       	push	r0
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    3a5c:	ec e5       	ldi	r30, 0x5C	; 92
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	80 83       	st	Z, r24
}
    3a64:	0f 90       	pop	r0
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <TIMER0_u8SetCallBack>:
u8 TIMER0_u8SetCallBack(void (* Copy_pvCallBackFunc) (void))
{
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <TIMER0_u8SetCallBack+0x6>
    3a72:	0f 92       	push	r0
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	9b 83       	std	Y+3, r25	; 0x03
    3a7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    3a7c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL)
    3a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a80:	9b 81       	ldd	r25, Y+3	; 0x03
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	39 f0       	breq	.+14     	; 0x3a94 <TIMER0_u8SetCallBack+0x28>
	{
		/*pass The pointer to local function to global pointer to function to be called in ISR*/
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
    3a86:	8a 81       	ldd	r24, Y+2	; 0x02
    3a88:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8a:	90 93 bf 01 	sts	0x01BF, r25
    3a8e:	80 93 be 01 	sts	0x01BE, r24
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    3aa6:	1f 92       	push	r1
    3aa8:	0f 92       	push	r0
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	0f 92       	push	r0
    3aae:	11 24       	eor	r1, r1
    3ab0:	2f 93       	push	r18
    3ab2:	3f 93       	push	r19
    3ab4:	4f 93       	push	r20
    3ab6:	5f 93       	push	r21
    3ab8:	6f 93       	push	r22
    3aba:	7f 93       	push	r23
    3abc:	8f 93       	push	r24
    3abe:	9f 93       	push	r25
    3ac0:	af 93       	push	r26
    3ac2:	bf 93       	push	r27
    3ac4:	ef 93       	push	r30
    3ac6:	ff 93       	push	r31
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL)
    3ad0:	80 91 be 01 	lds	r24, 0x01BE
    3ad4:	90 91 bf 01 	lds	r25, 0x01BF
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	29 f0       	breq	.+10     	; 0x3ae6 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    3adc:	e0 91 be 01 	lds	r30, 0x01BE
    3ae0:	f0 91 bf 01 	lds	r31, 0x01BF
    3ae4:	09 95       	icall
	}
}
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	ff 91       	pop	r31
    3aec:	ef 91       	pop	r30
    3aee:	bf 91       	pop	r27
    3af0:	af 91       	pop	r26
    3af2:	9f 91       	pop	r25
    3af4:	8f 91       	pop	r24
    3af6:	7f 91       	pop	r23
    3af8:	6f 91       	pop	r22
    3afa:	5f 91       	pop	r21
    3afc:	4f 91       	pop	r20
    3afe:	3f 91       	pop	r19
    3b00:	2f 91       	pop	r18
    3b02:	0f 90       	pop	r0
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	0f 90       	pop	r0
    3b08:	1f 90       	pop	r1
    3b0a:	18 95       	reti

00003b0c <ADC_voidInit>:
static u16 *ADC_pu16ChainResultArr=NULL;
static u8 ADC_u8ChainConversionIndex=0;
static u8 ADC_u8ISRSource;

void ADC_voidInit(void)
{
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
#if ADC_REF_VOLTAGE==AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_REF_VOLTAGE==AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
    3b14:	a7 e2       	ldi	r26, 0x27	; 39
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	e7 e2       	ldi	r30, 0x27	; 39
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	80 64       	ori	r24, 0x40	; 64
    3b20:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    3b22:	a7 e2       	ldi	r26, 0x27	; 39
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	e7 e2       	ldi	r30, 0x27	; 39
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	8f 77       	andi	r24, 0x7F	; 127
    3b2e:	8c 93       	st	X, r24
#else
#error "Wrong Voltage Reference"
#endif
#if ADC_RES==EIGHT_BIT
	/*Activate left adjust result*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
    3b30:	a7 e2       	ldi	r26, 0x27	; 39
    3b32:	b0 e0       	ldi	r27, 0x00	; 0
    3b34:	e7 e2       	ldi	r30, 0x27	; 39
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	80 81       	ld	r24, Z
    3b3a:	80 62       	ori	r24, 0x20	; 32
    3b3c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong Resolution"
#endif
	/*SET pre-scaler to divide by 128*/
	ADCSRA&=PRE_SCALERMASK;
    3b3e:	a6 e2       	ldi	r26, 0x26	; 38
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e6 e2       	ldi	r30, 0x26	; 38
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	88 7f       	andi	r24, 0xF8	; 248
    3b4a:	8c 93       	st	X, r24
	ADCSRA|=ADC_PRE_SCALER;
    3b4c:	a6 e2       	ldi	r26, 0x26	; 38
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	e6 e2       	ldi	r30, 0x26	; 38
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	87 60       	ori	r24, 0x07	; 7
    3b58:	8c 93       	st	X, r24
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    3b5a:	a6 e2       	ldi	r26, 0x26	; 38
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e6 e2       	ldi	r30, 0x26	; 38
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	80 68       	ori	r24, 0x80	; 128
    3b66:	8c 93       	st	X, r24
	SFIOR&=SOURCE_MASK;
	SFIOR|=(AUTO_TRIGGER_SOURCE<<5);
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#elif ADC_CONVERSION_MODE==SINGLE_MODE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
    3b68:	a6 e2       	ldi	r26, 0x26	; 38
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	e6 e2       	ldi	r30, 0x26	; 38
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	8f 7d       	andi	r24, 0xDF	; 223
    3b74:	8c 93       	st	X, r24
#else
#error "Wrong Conversion Mode"
#endif
}
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	08 95       	ret

00003b7c <ADC_u16StartConversionSynch>:

u16 ADC_u16StartConversionSynch(u8 Copy_u8Channel,u16* Copy_pu16Reading)
{
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	28 97       	sbiw	r28, 0x08	; 8
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	8e 83       	std	Y+6, r24	; 0x06
    3b92:	78 87       	std	Y+8, r23	; 0x08
    3b94:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
    3b96:	1a 82       	std	Y+2, r1	; 0x02
    3b98:	1b 82       	std	Y+3, r1	; 0x03
    3b9a:	1c 82       	std	Y+4, r1	; 0x04
    3b9c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
    3b9e:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
    3ba0:	80 91 c4 01 	lds	r24, 0x01C4
    3ba4:	88 23       	and	r24, r24
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <ADC_u16StartConversionSynch+0x2e>
    3ba8:	5e c0       	rjmp	.+188    	; 0x3c66 <ADC_u16StartConversionSynch+0xea>
	{
		/*ADC is now Busy*/
		ADC_u8BusyState=BUSY;
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	80 93 c4 01 	sts	0x01C4, r24
		/*Clear The MUX bits in ADmux register*/
		ADMUX &=ADMUX_MASK;
    3bb0:	a7 e2       	ldi	r26, 0x27	; 39
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	e7 e2       	ldi	r30, 0x27	; 39
    3bb6:	f0 e0       	ldi	r31, 0x00	; 0
    3bb8:	80 81       	ld	r24, Z
    3bba:	80 7e       	andi	r24, 0xE0	; 224
    3bbc:	8c 93       	st	X, r24
		/*Set the required channel into the MUX bits*/
		ADMUX|=Copy_u8Channel;
    3bbe:	a7 e2       	ldi	r26, 0x27	; 39
    3bc0:	b0 e0       	ldi	r27, 0x00	; 0
    3bc2:	e7 e2       	ldi	r30, 0x27	; 39
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	90 81       	ld	r25, Z
    3bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bca:	89 2b       	or	r24, r25
    3bcc:	8c 93       	st	X, r24
		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    3bce:	a6 e2       	ldi	r26, 0x26	; 38
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	e6 e2       	ldi	r30, 0x26	; 38
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	80 81       	ld	r24, Z
    3bd8:	80 64       	ori	r24, 0x40	; 64
    3bda:	8c 93       	st	X, r24
    3bdc:	0b c0       	rjmp	.+22     	; 0x3bf4 <ADC_u16StartConversionSynch+0x78>
		/*polling (Busy waiting) until the conversion complete flag is set*/
		while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	9b 81       	ldd	r25, Y+3	; 0x03
    3be2:	ac 81       	ldd	r26, Y+4	; 0x04
    3be4:	bd 81       	ldd	r27, Y+5	; 0x05
    3be6:	01 96       	adiw	r24, 0x01	; 1
    3be8:	a1 1d       	adc	r26, r1
    3bea:	b1 1d       	adc	r27, r1
    3bec:	8a 83       	std	Y+2, r24	; 0x02
    3bee:	9b 83       	std	Y+3, r25	; 0x03
    3bf0:	ac 83       	std	Y+4, r26	; 0x04
    3bf2:	bd 83       	std	Y+5, r27	; 0x05
		/*Set the required channel into the MUX bits*/
		ADMUX|=Copy_u8Channel;
		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
		/*polling (Busy waiting) until the conversion complete flag is set*/
		while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter != ADC_u32TIMEOUT))
    3bf4:	e6 e2       	ldi	r30, 0x26	; 38
    3bf6:	f0 e0       	ldi	r31, 0x00	; 0
    3bf8:	80 81       	ld	r24, Z
    3bfa:	82 95       	swap	r24
    3bfc:	8f 70       	andi	r24, 0x0F	; 15
    3bfe:	88 2f       	mov	r24, r24
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	81 70       	andi	r24, 0x01	; 1
    3c04:	90 70       	andi	r25, 0x00	; 0
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	61 f4       	brne	.+24     	; 0x3c22 <ADC_u16StartConversionSynch+0xa6>
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c0e:	ac 81       	ldd	r26, Y+4	; 0x04
    3c10:	bd 81       	ldd	r27, Y+5	; 0x05
    3c12:	80 35       	cpi	r24, 0x50	; 80
    3c14:	23 ec       	ldi	r18, 0xC3	; 195
    3c16:	92 07       	cpc	r25, r18
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	a2 07       	cpc	r26, r18
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	b2 07       	cpc	r27, r18
    3c20:	f1 f6       	brne	.-68     	; 0x3bde <ADC_u16StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	ac 81       	ldd	r26, Y+4	; 0x04
    3c28:	bd 81       	ldd	r27, Y+5	; 0x05
    3c2a:	80 35       	cpi	r24, 0x50	; 80
    3c2c:	23 ec       	ldi	r18, 0xC3	; 195
    3c2e:	92 07       	cpc	r25, r18
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	a2 07       	cpc	r26, r18
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	b2 07       	cpc	r27, r18
    3c38:	19 f4       	brne	.+6      	; 0x3c40 <ADC_u16StartConversionSynch+0xc4>
		{
			/*Loop is broken as the time out is reached*/
			Local_u8ErrorState=NOK;
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	15 c0       	rjmp	.+42     	; 0x3c6a <ADC_u16StartConversionSynch+0xee>
		}
		else
		{
			/*Loop is broken as flag is raised*/
			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
    3c40:	a6 e2       	ldi	r26, 0x26	; 38
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e6 e2       	ldi	r30, 0x26	; 38
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	80 61       	ori	r24, 0x10	; 16
    3c4c:	8c 93       	st	X, r24
			#if ADC_RES==EIGHT_BIT
				*Copy_pu16Reading = ADCH;
    3c4e:	e5 e2       	ldi	r30, 0x25	; 37
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	88 2f       	mov	r24, r24
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	ef 81       	ldd	r30, Y+7	; 0x07
    3c5a:	f8 85       	ldd	r31, Y+8	; 0x08
    3c5c:	91 83       	std	Z+1, r25	; 0x01
    3c5e:	80 83       	st	Z, r24
				*Copy_pu16Reading = ADC;
			#else
			#error "Wrong Conversion Mode"
			#endif
			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState=IDLE;
    3c60:	10 92 c4 01 	sts	0x01C4, r1
    3c64:	02 c0       	rjmp	.+4      	; 0x3c6a <ADC_u16StartConversionSynch+0xee>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
    3c66:	83 e0       	ldi	r24, 0x03	; 3
    3c68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
}
    3c70:	28 96       	adiw	r28, 0x08	; 8
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	08 95       	ret

00003c82 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading,void (*Copy_pvNotififcationFunc)(void))
{
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <ADC_u8StartConversionAsynch+0x6>
    3c88:	00 d0       	rcall	.+0      	; 0x3c8a <ADC_u8StartConversionAsynch+0x8>
    3c8a:	00 d0       	rcall	.+0      	; 0x3c8c <ADC_u8StartConversionAsynch+0xa>
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	8a 83       	std	Y+2, r24	; 0x02
    3c92:	7c 83       	std	Y+4, r23	; 0x04
    3c94:	6b 83       	std	Y+3, r22	; 0x03
    3c96:	5e 83       	std	Y+6, r21	; 0x06
    3c98:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
    3c9a:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
    3c9c:	80 91 c4 01 	lds	r24, 0x01C4
    3ca0:	88 23       	and	r24, r24
    3ca2:	d1 f5       	brne	.+116    	; 0x3d18 <ADC_u8StartConversionAsynch+0x96>
	{
		if((Copy_pu16Reading == NULL) || (Copy_pvNotififcationFunc == NULL))
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	21 f0       	breq	.+8      	; 0x3cb4 <ADC_u8StartConversionAsynch+0x32>
    3cac:	8d 81       	ldd	r24, Y+5	; 0x05
    3cae:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	19 f4       	brne	.+6      	; 0x3cba <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
    3cb4:	82 e0       	ldi	r24, 0x02	; 2
    3cb6:	89 83       	std	Y+1, r24	; 0x01
    3cb8:	31 c0       	rjmp	.+98     	; 0x3d1c <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			ADC_u8BusyState=BUSY;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	80 93 c4 01 	sts	0x01C4, r24
			ADC_u8ISRSource=SINGLE_CHANNEL_ASYNCH;
    3cc0:	10 92 cb 01 	sts	0x01CB, r1
			/*Initialize the reading variable & CallBack Notification Function Globally*/
			ADC_pu16Reading=Copy_pu16Reading;
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc8:	90 93 c1 01 	sts	0x01C1, r25
    3ccc:	80 93 c0 01 	sts	0x01C0, r24
			ADC_pvCallBackNotificationFunc=Copy_pvNotififcationFunc;
    3cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd4:	90 93 c3 01 	sts	0x01C3, r25
    3cd8:	80 93 c2 01 	sts	0x01C2, r24
			/*Clear The MUX bits in ADmux register*/
			ADMUX &=ADMUX_MASK;
    3cdc:	a7 e2       	ldi	r26, 0x27	; 39
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	e7 e2       	ldi	r30, 0x27	; 39
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	80 7e       	andi	r24, 0xE0	; 224
    3ce8:	8c 93       	st	X, r24
			/*Set the required channel into the MUX bits*/
			ADMUX|=Copy_u8Channel;
    3cea:	a7 e2       	ldi	r26, 0x27	; 39
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	e7 e2       	ldi	r30, 0x27	; 39
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	90 81       	ld	r25, Z
    3cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf6:	89 2b       	or	r24, r25
    3cf8:	8c 93       	st	X, r24
			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    3cfa:	a6 e2       	ldi	r26, 0x26	; 38
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	e6 e2       	ldi	r30, 0x26	; 38
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	80 64       	ori	r24, 0x40	; 64
    3d06:	8c 93       	st	X, r24
			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    3d08:	a6 e2       	ldi	r26, 0x26	; 38
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	e6 e2       	ldi	r30, 0x26	; 38
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	80 81       	ld	r24, Z
    3d12:	88 60       	ori	r24, 0x08	; 8
    3d14:	8c 93       	st	X, r24
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
    3d18:	83 e0       	ldi	r24, 0x03	; 3
    3d1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d1e:	26 96       	adiw	r28, 0x06	; 6
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	08 95       	ret

00003d30 <ADC_u8startChainConversionAsynch>:
u8 ADC_u8startChainConversionAsynch(Chain_t *Copy_Chain)
{
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <ADC_u8startChainConversionAsynch+0x6>
    3d36:	0f 92       	push	r0
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	9b 83       	std	Y+3, r25	; 0x03
    3d3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    3d40:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Chain==NULL)
    3d42:	8a 81       	ldd	r24, Y+2	; 0x02
    3d44:	9b 81       	ldd	r25, Y+3	; 0x03
    3d46:	00 97       	sbiw	r24, 0x00	; 0
    3d48:	19 f4       	brne	.+6      	; 0x3d50 <ADC_u8startChainConversionAsynch+0x20>
	{
		Local_u8ErrorState=BUSY_FUNC;
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	55 c0       	rjmp	.+170    	; 0x3dfa <ADC_u8startChainConversionAsynch+0xca>
	}
	else
	{
		if(ADC_u8BusyState==IDLE)
    3d50:	80 91 c4 01 	lds	r24, 0x01C4
    3d54:	88 23       	and	r24, r24
    3d56:	09 f0       	breq	.+2      	; 0x3d5a <ADC_u8startChainConversionAsynch+0x2a>
    3d58:	4e c0       	rjmp	.+156    	; 0x3df6 <ADC_u8startChainConversionAsynch+0xc6>
		{
			ADC_u8BusyState=BUSY;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	80 93 c4 01 	sts	0x01C4, r24
			ADC_u8ISRSource=CHAIN_ASYNCH;
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	80 93 cb 01 	sts	0x01CB, r24
			/*Initialize the reading variable & CallBack Notification Function Globally*/
			ADC_pu8chainChannelArr=Copy_Chain->Channel;
    3d66:	ea 81       	ldd	r30, Y+2	; 0x02
    3d68:	fb 81       	ldd	r31, Y+3	; 0x03
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	90 93 c6 01 	sts	0x01C6, r25
    3d72:	80 93 c5 01 	sts	0x01C5, r24
			ADC_pvCallBackNotificationFunc=Copy_Chain->NotificationFunc;
    3d76:	ea 81       	ldd	r30, Y+2	; 0x02
    3d78:	fb 81       	ldd	r31, Y+3	; 0x03
    3d7a:	83 81       	ldd	r24, Z+3	; 0x03
    3d7c:	94 81       	ldd	r25, Z+4	; 0x04
    3d7e:	90 93 c3 01 	sts	0x01C3, r25
    3d82:	80 93 c2 01 	sts	0x01C2, r24
			ADC_pu16ChainResultArr=Copy_Chain->Result;
    3d86:	ea 81       	ldd	r30, Y+2	; 0x02
    3d88:	fb 81       	ldd	r31, Y+3	; 0x03
    3d8a:	85 81       	ldd	r24, Z+5	; 0x05
    3d8c:	96 81       	ldd	r25, Z+6	; 0x06
    3d8e:	90 93 c9 01 	sts	0x01C9, r25
    3d92:	80 93 c8 01 	sts	0x01C8, r24
			ADC_u8ChainSize=Copy_Chain->Size;
    3d96:	ea 81       	ldd	r30, Y+2	; 0x02
    3d98:	fb 81       	ldd	r31, Y+3	; 0x03
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	80 93 c7 01 	sts	0x01C7, r24
			ADC_u8ChainConversionIndex=0;
    3da0:	10 92 ca 01 	sts	0x01CA, r1
			/*Clear The MUX bits in ADmux register*/
			ADMUX &=ADMUX_MASK;
    3da4:	a7 e2       	ldi	r26, 0x27	; 39
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	e7 e2       	ldi	r30, 0x27	; 39
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	80 81       	ld	r24, Z
    3dae:	80 7e       	andi	r24, 0xE0	; 224
    3db0:	8c 93       	st	X, r24
			/*Set the required channel into the MUX bits*/
			ADMUX|=ADC_pu8chainChannelArr[ADC_u8ChainConversionIndex];
    3db2:	a7 e2       	ldi	r26, 0x27	; 39
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	e7 e2       	ldi	r30, 0x27	; 39
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	40 81       	ld	r20, Z
    3dbc:	20 91 c5 01 	lds	r18, 0x01C5
    3dc0:	30 91 c6 01 	lds	r19, 0x01C6
    3dc4:	80 91 ca 01 	lds	r24, 0x01CA
    3dc8:	88 2f       	mov	r24, r24
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	f9 01       	movw	r30, r18
    3dce:	e8 0f       	add	r30, r24
    3dd0:	f9 1f       	adc	r31, r25
    3dd2:	80 81       	ld	r24, Z
    3dd4:	84 2b       	or	r24, r20
    3dd6:	8c 93       	st	X, r24
			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    3dd8:	a6 e2       	ldi	r26, 0x26	; 38
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	e6 e2       	ldi	r30, 0x26	; 38
    3dde:	f0 e0       	ldi	r31, 0x00	; 0
    3de0:	80 81       	ld	r24, Z
    3de2:	80 64       	ori	r24, 0x40	; 64
    3de4:	8c 93       	st	X, r24
			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    3de6:	a6 e2       	ldi	r26, 0x26	; 38
    3de8:	b0 e0       	ldi	r27, 0x00	; 0
    3dea:	e6 e2       	ldi	r30, 0x26	; 38
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	80 81       	ld	r24, Z
    3df0:	88 60       	ori	r24, 0x08	; 8
    3df2:	8c 93       	st	X, r24
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <ADC_u8startChainConversionAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState=BUSY_FUNC;
    3df6:	83 e0       	ldi	r24, 0x03	; 3
    3df8:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	cf 91       	pop	r28
    3e04:	df 91       	pop	r29
    3e06:	08 95       	ret

00003e08 <__vector_16>:
void __vector_16 (void)  __attribute__((signal));

void __vector_16 (void)
{
    3e08:	1f 92       	push	r1
    3e0a:	0f 92       	push	r0
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	0f 92       	push	r0
    3e10:	11 24       	eor	r1, r1
    3e12:	2f 93       	push	r18
    3e14:	3f 93       	push	r19
    3e16:	4f 93       	push	r20
    3e18:	5f 93       	push	r21
    3e1a:	6f 93       	push	r22
    3e1c:	7f 93       	push	r23
    3e1e:	8f 93       	push	r24
    3e20:	9f 93       	push	r25
    3e22:	af 93       	push	r26
    3e24:	bf 93       	push	r27
    3e26:	ef 93       	push	r30
    3e28:	ff 93       	push	r31
    3e2a:	df 93       	push	r29
    3e2c:	cf 93       	push	r28
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource==SINGLE_CHANNEL_ASYNCH)
    3e32:	80 91 cb 01 	lds	r24, 0x01CB
    3e36:	88 23       	and	r24, r24
    3e38:	d1 f4       	brne	.+52     	; 0x3e6e <__vector_16+0x66>
	{
		/*Read ADC Reading*/
		#if ADC_RES==EIGHT_BIT
			*ADC_pu16Reading = ADCH;
    3e3a:	a0 91 c0 01 	lds	r26, 0x01C0
    3e3e:	b0 91 c1 01 	lds	r27, 0x01C1
    3e42:	e5 e2       	ldi	r30, 0x25	; 37
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 81       	ld	r24, Z
    3e48:	88 2f       	mov	r24, r24
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	8d 93       	st	X+, r24
    3e4e:	9c 93       	st	X, r25
			*ADC_pu16Reading = ADC;
		#else
		#error "Wrong Conversion Mode"
		#endif
		/*Make ADC_u8BusyState Ideal*/
		ADC_u8BusyState=IDLE;
    3e50:	10 92 c4 01 	sts	0x01C4, r1
		/*Invoke the call Back Notification*/
		ADC_pvCallBackNotificationFunc();
    3e54:	e0 91 c2 01 	lds	r30, 0x01C2
    3e58:	f0 91 c3 01 	lds	r31, 0x01C3
    3e5c:	09 95       	icall
		/*Disable ADC conversion Complete Interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    3e5e:	a6 e2       	ldi	r26, 0x26	; 38
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	e6 e2       	ldi	r30, 0x26	; 38
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	87 7f       	andi	r24, 0xF7	; 247
    3e6a:	8c 93       	st	X, r24
    3e6c:	55 c0       	rjmp	.+170    	; 0x3f18 <__vector_16+0x110>
	}
	else if(ADC_u8ISRSource==CHAIN_ASYNCH)
    3e6e:	80 91 cb 01 	lds	r24, 0x01CB
    3e72:	81 30       	cpi	r24, 0x01	; 1
    3e74:	09 f0       	breq	.+2      	; 0x3e78 <__vector_16+0x70>
    3e76:	50 c0       	rjmp	.+160    	; 0x3f18 <__vector_16+0x110>
	{
		#if ADC_RES==EIGHT_BIT
			ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;
    3e78:	20 91 c8 01 	lds	r18, 0x01C8
    3e7c:	30 91 c9 01 	lds	r19, 0x01C9
    3e80:	80 91 ca 01 	lds	r24, 0x01CA
    3e84:	88 2f       	mov	r24, r24
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	88 0f       	add	r24, r24
    3e8a:	99 1f       	adc	r25, r25
    3e8c:	d9 01       	movw	r26, r18
    3e8e:	a8 0f       	add	r26, r24
    3e90:	b9 1f       	adc	r27, r25
    3e92:	e5 e2       	ldi	r30, 0x25	; 37
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	11 96       	adiw	r26, 0x01	; 1
    3e9e:	9c 93       	st	X, r25
    3ea0:	8e 93       	st	-X, r24
		#elif ADC_RES==TEN_BIT
			ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADC;
		#else
		#error "Wrong Conversion Mode"
		#endif
		ADC_u8ChainConversionIndex++;
    3ea2:	80 91 ca 01 	lds	r24, 0x01CA
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	80 93 ca 01 	sts	0x01CA, r24
		if(ADC_u8ChainConversionIndex==ADC_u8ChainSize)
    3eac:	90 91 ca 01 	lds	r25, 0x01CA
    3eb0:	80 91 c7 01 	lds	r24, 0x01C7
    3eb4:	98 17       	cp	r25, r24
    3eb6:	79 f4       	brne	.+30     	; 0x3ed6 <__vector_16+0xce>
		{
			/*Make ADC_u8BusyState Ideal*/
			ADC_u8BusyState=IDLE;
    3eb8:	10 92 c4 01 	sts	0x01C4, r1
			/*Invoke the call Back Notification*/
			ADC_pvCallBackNotificationFunc();
    3ebc:	e0 91 c2 01 	lds	r30, 0x01C2
    3ec0:	f0 91 c3 01 	lds	r31, 0x01C3
    3ec4:	09 95       	icall
			/*Disable ADC conversion Complete Interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    3ec6:	a6 e2       	ldi	r26, 0x26	; 38
    3ec8:	b0 e0       	ldi	r27, 0x00	; 0
    3eca:	e6 e2       	ldi	r30, 0x26	; 38
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	80 81       	ld	r24, Z
    3ed0:	87 7f       	andi	r24, 0xF7	; 247
    3ed2:	8c 93       	st	X, r24
    3ed4:	21 c0       	rjmp	.+66     	; 0x3f18 <__vector_16+0x110>
		}
		else
		{
			/*Clear The MUX bits in ADmux register*/
			ADMUX &=ADMUX_MASK;
    3ed6:	a7 e2       	ldi	r26, 0x27	; 39
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	e7 e2       	ldi	r30, 0x27	; 39
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	80 81       	ld	r24, Z
    3ee0:	80 7e       	andi	r24, 0xE0	; 224
    3ee2:	8c 93       	st	X, r24
			/*Set the required channel into the MUX bits*/
			ADMUX|=ADC_pu8chainChannelArr[ADC_u8ChainConversionIndex];
    3ee4:	a7 e2       	ldi	r26, 0x27	; 39
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	e7 e2       	ldi	r30, 0x27	; 39
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	40 81       	ld	r20, Z
    3eee:	20 91 c5 01 	lds	r18, 0x01C5
    3ef2:	30 91 c6 01 	lds	r19, 0x01C6
    3ef6:	80 91 ca 01 	lds	r24, 0x01CA
    3efa:	88 2f       	mov	r24, r24
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	f9 01       	movw	r30, r18
    3f00:	e8 0f       	add	r30, r24
    3f02:	f9 1f       	adc	r31, r25
    3f04:	80 81       	ld	r24, Z
    3f06:	84 2b       	or	r24, r20
    3f08:	8c 93       	st	X, r24
			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    3f0a:	a6 e2       	ldi	r26, 0x26	; 38
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	e6 e2       	ldi	r30, 0x26	; 38
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	80 64       	ori	r24, 0x40	; 64
    3f16:	8c 93       	st	X, r24
		}
	}
}
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	ff 91       	pop	r31
    3f1e:	ef 91       	pop	r30
    3f20:	bf 91       	pop	r27
    3f22:	af 91       	pop	r26
    3f24:	9f 91       	pop	r25
    3f26:	8f 91       	pop	r24
    3f28:	7f 91       	pop	r23
    3f2a:	6f 91       	pop	r22
    3f2c:	5f 91       	pop	r21
    3f2e:	4f 91       	pop	r20
    3f30:	3f 91       	pop	r19
    3f32:	2f 91       	pop	r18
    3f34:	0f 90       	pop	r0
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	0f 90       	pop	r0
    3f3a:	1f 90       	pop	r1
    3f3c:	18 95       	reti

00003f3e <ADC_S16ReadingMap>:
s16 ADC_S16ReadingMap(Map *Map,s16 Copy_u16InputValue)
{
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	00 d0       	rcall	.+0      	; 0x3f44 <ADC_S16ReadingMap+0x6>
    3f44:	00 d0       	rcall	.+0      	; 0x3f46 <ADC_S16ReadingMap+0x8>
    3f46:	00 d0       	rcall	.+0      	; 0x3f48 <ADC_S16ReadingMap+0xa>
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62
    3f4c:	9c 83       	std	Y+4, r25	; 0x04
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
    3f50:	7e 83       	std	Y+6, r23	; 0x06
    3f52:	6d 83       	std	Y+5, r22	; 0x05
	u16 Local_u16MappedValue=0;
    3f54:	1a 82       	std	Y+2, r1	; 0x02
    3f56:	19 82       	std	Y+1, r1	; 0x01
	Local_u16MappedValue=(Map->Copy_u16outMax-Map->Copy_u16outMini);
    3f58:	eb 81       	ldd	r30, Y+3	; 0x03
    3f5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f5c:	26 81       	ldd	r18, Z+6	; 0x06
    3f5e:	37 81       	ldd	r19, Z+7	; 0x07
    3f60:	eb 81       	ldd	r30, Y+3	; 0x03
    3f62:	fc 81       	ldd	r31, Y+4	; 0x04
    3f64:	84 81       	ldd	r24, Z+4	; 0x04
    3f66:	95 81       	ldd	r25, Z+5	; 0x05
    3f68:	a9 01       	movw	r20, r18
    3f6a:	48 1b       	sub	r20, r24
    3f6c:	59 0b       	sbc	r21, r25
    3f6e:	ca 01       	movw	r24, r20
    3f70:	9a 83       	std	Y+2, r25	; 0x02
    3f72:	89 83       	std	Y+1, r24	; 0x01
	Local_u16MappedValue/=(Map->Copy_u16InputMax-Map->Copy_u16InputMini);
    3f74:	eb 81       	ldd	r30, Y+3	; 0x03
    3f76:	fc 81       	ldd	r31, Y+4	; 0x04
    3f78:	22 81       	ldd	r18, Z+2	; 0x02
    3f7a:	33 81       	ldd	r19, Z+3	; 0x03
    3f7c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f7e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f80:	80 81       	ld	r24, Z
    3f82:	91 81       	ldd	r25, Z+1	; 0x01
    3f84:	a9 01       	movw	r20, r18
    3f86:	48 1b       	sub	r20, r24
    3f88:	59 0b       	sbc	r21, r25
    3f8a:	ca 01       	movw	r24, r20
    3f8c:	9c 01       	movw	r18, r24
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	b9 01       	movw	r22, r18
    3f94:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodhi4>
    3f98:	cb 01       	movw	r24, r22
    3f9a:	9a 83       	std	Y+2, r25	; 0x02
    3f9c:	89 83       	std	Y+1, r24	; 0x01
	Local_u16MappedValue*=(Copy_u16InputValue-Map->Copy_u16InputMini);
    3f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    3fa2:	20 81       	ld	r18, Z
    3fa4:	31 81       	ldd	r19, Z+1	; 0x01
    3fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3faa:	82 1b       	sub	r24, r18
    3fac:	93 0b       	sbc	r25, r19
    3fae:	9c 01       	movw	r18, r24
    3fb0:	89 81       	ldd	r24, Y+1	; 0x01
    3fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb4:	ac 01       	movw	r20, r24
    3fb6:	42 9f       	mul	r20, r18
    3fb8:	c0 01       	movw	r24, r0
    3fba:	43 9f       	mul	r20, r19
    3fbc:	90 0d       	add	r25, r0
    3fbe:	52 9f       	mul	r21, r18
    3fc0:	90 0d       	add	r25, r0
    3fc2:	11 24       	eor	r1, r1
    3fc4:	9a 83       	std	Y+2, r25	; 0x02
    3fc6:	89 83       	std	Y+1, r24	; 0x01
	Local_u16MappedValue+=Map->Copy_u16outMini;
    3fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    3fca:	fc 81       	ldd	r31, Y+4	; 0x04
    3fcc:	84 81       	ldd	r24, Z+4	; 0x04
    3fce:	95 81       	ldd	r25, Z+5	; 0x05
    3fd0:	9c 01       	movw	r18, r24
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd6:	82 0f       	add	r24, r18
    3fd8:	93 1f       	adc	r25, r19
    3fda:	9a 83       	std	Y+2, r25	; 0x02
    3fdc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16MappedValue;
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3fe2:	26 96       	adiw	r28, 0x06	; 6
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    3ffc:	af e5       	ldi	r26, 0x5F	; 95
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	ef e5       	ldi	r30, 0x5F	; 95
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	80 81       	ld	r24, Z
    4006:	80 68       	ori	r24, 0x80	; 128
    4008:	8c 93       	st	X, r24
}
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	08 95       	ret

00004010 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    4010:	df 93       	push	r29
    4012:	cf 93       	push	r28
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    4018:	af e5       	ldi	r26, 0x5F	; 95
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	ef e5       	ldi	r30, 0x5F	; 95
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	8f 77       	andi	r24, 0x7F	; 127
    4024:	8c 93       	st	X, r24
}
    4026:	cf 91       	pop	r28
    4028:	df 91       	pop	r29
    402a:	08 95       	ret

0000402c <EXTI_voidInt00Init>:

/*Global pointer to function to Hold INT0 ISR Address*/
void (*EXTI_pvInt0Func)(void)=NULL;

void EXTI_voidInt00Init(void)
{
    402c:	df 93       	push	r29
    402e:	cf 93       	push	r28
    4030:	cd b7       	in	r28, 0x3d	; 61
    4032:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    4034:	a5 e5       	ldi	r26, 0x55	; 85
    4036:	b0 e0       	ldi	r27, 0x00	; 0
    4038:	e5 e5       	ldi	r30, 0x55	; 85
    403a:	f0 e0       	ldi	r31, 0x00	; 0
    403c:	80 81       	ld	r24, Z
    403e:	8e 7f       	andi	r24, 0xFE	; 254
    4040:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    4042:	a5 e5       	ldi	r26, 0x55	; 85
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	e5 e5       	ldi	r30, 0x55	; 85
    4048:	f0 e0       	ldi	r31, 0x00	; 0
    404a:	80 81       	ld	r24, Z
    404c:	82 60       	ori	r24, 0x02	; 2
    404e:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"
#endif

#if INT0_INTIAL_STATE==ENABLED
	/*Peripheral Interrupt enable for INT0*/
	SET_BIT(GICR,GICR_INT0);
    4050:	ab e5       	ldi	r26, 0x5B	; 91
    4052:	b0 e0       	ldi	r27, 0x00	; 0
    4054:	eb e5       	ldi	r30, 0x5B	; 91
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	80 81       	ld	r24, Z
    405a:	80 64       	ori	r24, 0x40	; 64
    405c:	8c 93       	st	X, r24
#elif INT0_INTIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INTIAL_STATE configuration option"
#endif
}
    405e:	cf 91       	pop	r28
    4060:	df 91       	pop	r29
    4062:	08 95       	ret

00004064 <EXTI_voidInt01Init>:

void EXTI_voidInt01Init(void)
{
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    406c:	a5 e5       	ldi	r26, 0x55	; 85
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	e5 e5       	ldi	r30, 0x55	; 85
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	8b 7f       	andi	r24, 0xFB	; 251
    4078:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    407a:	a5 e5       	ldi	r26, 0x55	; 85
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	e5 e5       	ldi	r30, 0x55	; 85
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	80 81       	ld	r24, Z
    4084:	88 60       	ori	r24, 0x08	; 8
    4086:	8c 93       	st	X, r24
#error "Wrong INT1_SENSE configuration option"
#endif

#if INT1_INTIAL_STATE==ENABLED
	/*Peripheral Interrupt enable for INT0*/
	SET_BIT(GICR,GICR_INT0);
    4088:	ab e5       	ldi	r26, 0x5B	; 91
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	eb e5       	ldi	r30, 0x5B	; 91
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	80 64       	ori	r24, 0x40	; 64
    4094:	8c 93       	st	X, r24
#elif INT1_INTIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT1_INTIAL_STATE configuration option"
#endif
}
    4096:	cf 91       	pop	r28
    4098:	df 91       	pop	r29
    409a:	08 95       	ret

0000409c <EXTI_voidInt02Init>:

void EXTI_voidInt02Init(void)
{
    409c:	df 93       	push	r29
    409e:	cf 93       	push	r28
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control*/
#if INT2_SENSE==FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    40a4:	a4 e5       	ldi	r26, 0x54	; 84
    40a6:	b0 e0       	ldi	r27, 0x00	; 0
    40a8:	e4 e5       	ldi	r30, 0x54	; 84
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	80 81       	ld	r24, Z
    40ae:	8f 7b       	andi	r24, 0xBF	; 191
    40b0:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"
#endif

#if INT2_INTIAL_STATE==ENABLED
	/*Peripheral Interrupt enable for INT0*/
	SET_BIT(GICR,GICR_INT0);
    40b2:	ab e5       	ldi	r26, 0x5B	; 91
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	eb e5       	ldi	r30, 0x5B	; 91
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	80 64       	ori	r24, 0x40	; 64
    40be:	8c 93       	st	X, r24
#elif INT2_INTIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT2_INTIAL_STATE configuration option"
#endif
}
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	08 95       	ret

000040c6 <EXTI_u8Int0SetSenseControl>:

u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8sense)
{
    40c6:	df 93       	push	r29
    40c8:	cf 93       	push	r28
    40ca:	00 d0       	rcall	.+0      	; 0x40cc <EXTI_u8Int0SetSenseControl+0x6>
    40cc:	00 d0       	rcall	.+0      	; 0x40ce <EXTI_u8Int0SetSenseControl+0x8>
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    40d4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8sense)
    40d6:	8a 81       	ldd	r24, Y+2	; 0x02
    40d8:	28 2f       	mov	r18, r24
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	3c 83       	std	Y+4, r19	; 0x04
    40de:	2b 83       	std	Y+3, r18	; 0x03
    40e0:	8b 81       	ldd	r24, Y+3	; 0x03
    40e2:	9c 81       	ldd	r25, Y+4	; 0x04
    40e4:	82 30       	cpi	r24, 0x02	; 2
    40e6:	91 05       	cpc	r25, r1
    40e8:	29 f1       	breq	.+74     	; 0x4134 <EXTI_u8Int0SetSenseControl+0x6e>
    40ea:	2b 81       	ldd	r18, Y+3	; 0x03
    40ec:	3c 81       	ldd	r19, Y+4	; 0x04
    40ee:	23 30       	cpi	r18, 0x03	; 3
    40f0:	31 05       	cpc	r19, r1
    40f2:	34 f4       	brge	.+12     	; 0x4100 <EXTI_u8Int0SetSenseControl+0x3a>
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	9c 81       	ldd	r25, Y+4	; 0x04
    40f8:	81 30       	cpi	r24, 0x01	; 1
    40fa:	91 05       	cpc	r25, r1
    40fc:	61 f0       	breq	.+24     	; 0x4116 <EXTI_u8Int0SetSenseControl+0x50>
    40fe:	47 c0       	rjmp	.+142    	; 0x418e <EXTI_u8Int0SetSenseControl+0xc8>
    4100:	2b 81       	ldd	r18, Y+3	; 0x03
    4102:	3c 81       	ldd	r19, Y+4	; 0x04
    4104:	23 30       	cpi	r18, 0x03	; 3
    4106:	31 05       	cpc	r19, r1
    4108:	21 f1       	breq	.+72     	; 0x4152 <EXTI_u8Int0SetSenseControl+0x8c>
    410a:	8b 81       	ldd	r24, Y+3	; 0x03
    410c:	9c 81       	ldd	r25, Y+4	; 0x04
    410e:	84 30       	cpi	r24, 0x04	; 4
    4110:	91 05       	cpc	r25, r1
    4112:	71 f1       	breq	.+92     	; 0x4170 <EXTI_u8Int0SetSenseControl+0xaa>
    4114:	3c c0       	rjmp	.+120    	; 0x418e <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    4116:	a5 e5       	ldi	r26, 0x55	; 85
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	e5 e5       	ldi	r30, 0x55	; 85
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	80 81       	ld	r24, Z
    4120:	8e 7f       	andi	r24, 0xFE	; 254
    4122:	8c 93       	st	X, r24
    4124:	a5 e5       	ldi	r26, 0x55	; 85
    4126:	b0 e0       	ldi	r27, 0x00	; 0
    4128:	e5 e5       	ldi	r30, 0x55	; 85
    412a:	f0 e0       	ldi	r31, 0x00	; 0
    412c:	80 81       	ld	r24, Z
    412e:	8d 7f       	andi	r24, 0xFD	; 253
    4130:	8c 93       	st	X, r24
    4132:	2f c0       	rjmp	.+94     	; 0x4192 <EXTI_u8Int0SetSenseControl+0xcc>
	case ON_CHANGE:	   SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    4134:	a5 e5       	ldi	r26, 0x55	; 85
    4136:	b0 e0       	ldi	r27, 0x00	; 0
    4138:	e5 e5       	ldi	r30, 0x55	; 85
    413a:	f0 e0       	ldi	r31, 0x00	; 0
    413c:	80 81       	ld	r24, Z
    413e:	81 60       	ori	r24, 0x01	; 1
    4140:	8c 93       	st	X, r24
    4142:	a5 e5       	ldi	r26, 0x55	; 85
    4144:	b0 e0       	ldi	r27, 0x00	; 0
    4146:	e5 e5       	ldi	r30, 0x55	; 85
    4148:	f0 e0       	ldi	r31, 0x00	; 0
    414a:	80 81       	ld	r24, Z
    414c:	8d 7f       	andi	r24, 0xFD	; 253
    414e:	8c 93       	st	X, r24
    4150:	20 c0       	rjmp	.+64     	; 0x4192 <EXTI_u8Int0SetSenseControl+0xcc>
	case FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    4152:	a5 e5       	ldi	r26, 0x55	; 85
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	e5 e5       	ldi	r30, 0x55	; 85
    4158:	f0 e0       	ldi	r31, 0x00	; 0
    415a:	80 81       	ld	r24, Z
    415c:	8e 7f       	andi	r24, 0xFE	; 254
    415e:	8c 93       	st	X, r24
    4160:	a5 e5       	ldi	r26, 0x55	; 85
    4162:	b0 e0       	ldi	r27, 0x00	; 0
    4164:	e5 e5       	ldi	r30, 0x55	; 85
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	80 81       	ld	r24, Z
    416a:	82 60       	ori	r24, 0x02	; 2
    416c:	8c 93       	st	X, r24
    416e:	11 c0       	rjmp	.+34     	; 0x4192 <EXTI_u8Int0SetSenseControl+0xcc>
	case RAISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    4170:	a5 e5       	ldi	r26, 0x55	; 85
    4172:	b0 e0       	ldi	r27, 0x00	; 0
    4174:	e5 e5       	ldi	r30, 0x55	; 85
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	80 81       	ld	r24, Z
    417a:	81 60       	ori	r24, 0x01	; 1
    417c:	8c 93       	st	X, r24
    417e:	a5 e5       	ldi	r26, 0x55	; 85
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	e5 e5       	ldi	r30, 0x55	; 85
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	80 81       	ld	r24, Z
    4188:	82 60       	ori	r24, 0x02	; 2
    418a:	8c 93       	st	X, r24
    418c:	02 c0       	rjmp	.+4      	; 0x4192 <EXTI_u8Int0SetSenseControl+0xcc>
	default: Local_u8ErrorStatus=NOK;
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    4192:	89 81       	ldd	r24, Y+1	; 0x01
}
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	08 95       	ret

000041a2 <EXTI_u8Int1SetSenseControl>:

u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8sense)
{
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	00 d0       	rcall	.+0      	; 0x41a8 <EXTI_u8Int1SetSenseControl+0x6>
    41a8:	00 d0       	rcall	.+0      	; 0x41aa <EXTI_u8Int1SetSenseControl+0x8>
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    41b0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8sense)
    41b2:	8a 81       	ldd	r24, Y+2	; 0x02
    41b4:	28 2f       	mov	r18, r24
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	3c 83       	std	Y+4, r19	; 0x04
    41ba:	2b 83       	std	Y+3, r18	; 0x03
    41bc:	8b 81       	ldd	r24, Y+3	; 0x03
    41be:	9c 81       	ldd	r25, Y+4	; 0x04
    41c0:	82 30       	cpi	r24, 0x02	; 2
    41c2:	91 05       	cpc	r25, r1
    41c4:	29 f1       	breq	.+74     	; 0x4210 <EXTI_u8Int1SetSenseControl+0x6e>
    41c6:	2b 81       	ldd	r18, Y+3	; 0x03
    41c8:	3c 81       	ldd	r19, Y+4	; 0x04
    41ca:	23 30       	cpi	r18, 0x03	; 3
    41cc:	31 05       	cpc	r19, r1
    41ce:	34 f4       	brge	.+12     	; 0x41dc <EXTI_u8Int1SetSenseControl+0x3a>
    41d0:	8b 81       	ldd	r24, Y+3	; 0x03
    41d2:	9c 81       	ldd	r25, Y+4	; 0x04
    41d4:	81 30       	cpi	r24, 0x01	; 1
    41d6:	91 05       	cpc	r25, r1
    41d8:	61 f0       	breq	.+24     	; 0x41f2 <EXTI_u8Int1SetSenseControl+0x50>
    41da:	47 c0       	rjmp	.+142    	; 0x426a <EXTI_u8Int1SetSenseControl+0xc8>
    41dc:	2b 81       	ldd	r18, Y+3	; 0x03
    41de:	3c 81       	ldd	r19, Y+4	; 0x04
    41e0:	23 30       	cpi	r18, 0x03	; 3
    41e2:	31 05       	cpc	r19, r1
    41e4:	21 f1       	breq	.+72     	; 0x422e <EXTI_u8Int1SetSenseControl+0x8c>
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ea:	84 30       	cpi	r24, 0x04	; 4
    41ec:	91 05       	cpc	r25, r1
    41ee:	71 f1       	breq	.+92     	; 0x424c <EXTI_u8Int1SetSenseControl+0xaa>
    41f0:	3c c0       	rjmp	.+120    	; 0x426a <EXTI_u8Int1SetSenseControl+0xc8>
	{
	case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    41f2:	a5 e5       	ldi	r26, 0x55	; 85
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	e5 e5       	ldi	r30, 0x55	; 85
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	80 81       	ld	r24, Z
    41fc:	8b 7f       	andi	r24, 0xFB	; 251
    41fe:	8c 93       	st	X, r24
    4200:	a5 e5       	ldi	r26, 0x55	; 85
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	e5 e5       	ldi	r30, 0x55	; 85
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	87 7f       	andi	r24, 0xF7	; 247
    420c:	8c 93       	st	X, r24
    420e:	2f c0       	rjmp	.+94     	; 0x426e <EXTI_u8Int1SetSenseControl+0xcc>
	case ON_CHANGE:	   SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    4210:	a5 e5       	ldi	r26, 0x55	; 85
    4212:	b0 e0       	ldi	r27, 0x00	; 0
    4214:	e5 e5       	ldi	r30, 0x55	; 85
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	80 81       	ld	r24, Z
    421a:	84 60       	ori	r24, 0x04	; 4
    421c:	8c 93       	st	X, r24
    421e:	a5 e5       	ldi	r26, 0x55	; 85
    4220:	b0 e0       	ldi	r27, 0x00	; 0
    4222:	e5 e5       	ldi	r30, 0x55	; 85
    4224:	f0 e0       	ldi	r31, 0x00	; 0
    4226:	80 81       	ld	r24, Z
    4228:	87 7f       	andi	r24, 0xF7	; 247
    422a:	8c 93       	st	X, r24
    422c:	20 c0       	rjmp	.+64     	; 0x426e <EXTI_u8Int1SetSenseControl+0xcc>
	case FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    422e:	a5 e5       	ldi	r26, 0x55	; 85
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	e5 e5       	ldi	r30, 0x55	; 85
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	80 81       	ld	r24, Z
    4238:	8b 7f       	andi	r24, 0xFB	; 251
    423a:	8c 93       	st	X, r24
    423c:	a5 e5       	ldi	r26, 0x55	; 85
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	e5 e5       	ldi	r30, 0x55	; 85
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	80 81       	ld	r24, Z
    4246:	88 60       	ori	r24, 0x08	; 8
    4248:	8c 93       	st	X, r24
    424a:	11 c0       	rjmp	.+34     	; 0x426e <EXTI_u8Int1SetSenseControl+0xcc>
	case RAISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    424c:	a5 e5       	ldi	r26, 0x55	; 85
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	e5 e5       	ldi	r30, 0x55	; 85
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	80 81       	ld	r24, Z
    4256:	84 60       	ori	r24, 0x04	; 4
    4258:	8c 93       	st	X, r24
    425a:	a5 e5       	ldi	r26, 0x55	; 85
    425c:	b0 e0       	ldi	r27, 0x00	; 0
    425e:	e5 e5       	ldi	r30, 0x55	; 85
    4260:	f0 e0       	ldi	r31, 0x00	; 0
    4262:	80 81       	ld	r24, Z
    4264:	88 60       	ori	r24, 0x08	; 8
    4266:	8c 93       	st	X, r24
    4268:	02 c0       	rjmp	.+4      	; 0x426e <EXTI_u8Int1SetSenseControl+0xcc>
	default: Local_u8ErrorStatus=NOK;
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    426e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <EXTI_u8Int2SetSenseControl>:

u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8sense)
{
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	00 d0       	rcall	.+0      	; 0x4284 <EXTI_u8Int2SetSenseControl+0x6>
    4284:	00 d0       	rcall	.+0      	; 0x4286 <EXTI_u8Int2SetSenseControl+0x8>
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    428c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8sense)
    428e:	8a 81       	ldd	r24, Y+2	; 0x02
    4290:	28 2f       	mov	r18, r24
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	3c 83       	std	Y+4, r19	; 0x04
    4296:	2b 83       	std	Y+3, r18	; 0x03
    4298:	8b 81       	ldd	r24, Y+3	; 0x03
    429a:	9c 81       	ldd	r25, Y+4	; 0x04
    429c:	83 30       	cpi	r24, 0x03	; 3
    429e:	91 05       	cpc	r25, r1
    42a0:	31 f0       	breq	.+12     	; 0x42ae <EXTI_u8Int2SetSenseControl+0x30>
    42a2:	2b 81       	ldd	r18, Y+3	; 0x03
    42a4:	3c 81       	ldd	r19, Y+4	; 0x04
    42a6:	24 30       	cpi	r18, 0x04	; 4
    42a8:	31 05       	cpc	r19, r1
    42aa:	49 f0       	breq	.+18     	; 0x42be <EXTI_u8Int2SetSenseControl+0x40>
    42ac:	10 c0       	rjmp	.+32     	; 0x42ce <EXTI_u8Int2SetSenseControl+0x50>
	{
	case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
    42ae:	a4 e5       	ldi	r26, 0x54	; 84
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	e4 e5       	ldi	r30, 0x54	; 84
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	80 81       	ld	r24, Z
    42b8:	8f 7b       	andi	r24, 0xBF	; 191
    42ba:	8c 93       	st	X, r24
    42bc:	0a c0       	rjmp	.+20     	; 0x42d2 <EXTI_u8Int2SetSenseControl+0x54>
	case RAISING_EDGE: SET_BIT(MCUCSR,MCUCSR_ISC2); break;
    42be:	a4 e5       	ldi	r26, 0x54	; 84
    42c0:	b0 e0       	ldi	r27, 0x00	; 0
    42c2:	e4 e5       	ldi	r30, 0x54	; 84
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	80 81       	ld	r24, Z
    42c8:	80 64       	ori	r24, 0x40	; 64
    42ca:	8c 93       	st	X, r24
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <EXTI_u8Int2SetSenseControl+0x54>
	default: Local_u8ErrorStatus=NOK;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    42d4:	0f 90       	pop	r0
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	00 d0       	rcall	.+0      	; 0x42e8 <EXTI_u8Int0SetCallBack+0x6>
    42e8:	0f 92       	push	r0
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	9b 83       	std	Y+3, r25	; 0x03
    42f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    42f2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	9b 81       	ldd	r25, Y+3	; 0x03
    42f8:	00 97       	sbiw	r24, 0x00	; 0
    42fa:	39 f0       	breq	.+14     	; 0x430a <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
    42fc:	8a 81       	ldd	r24, Y+2	; 0x02
    42fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4300:	90 93 cd 01 	sts	0x01CD, r25
    4304:	80 93 cc 01 	sts	0x01CC, r24
    4308:	02 c0       	rjmp	.+4      	; 0x430e <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    430e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	cf 91       	pop	r28
    4318:	df 91       	pop	r29
    431a:	08 95       	ret

0000431c <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    431c:	1f 92       	push	r1
    431e:	0f 92       	push	r0
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	0f 92       	push	r0
    4324:	11 24       	eor	r1, r1
    4326:	2f 93       	push	r18
    4328:	3f 93       	push	r19
    432a:	4f 93       	push	r20
    432c:	5f 93       	push	r21
    432e:	6f 93       	push	r22
    4330:	7f 93       	push	r23
    4332:	8f 93       	push	r24
    4334:	9f 93       	push	r25
    4336:	af 93       	push	r26
    4338:	bf 93       	push	r27
    433a:	ef 93       	push	r30
    433c:	ff 93       	push	r31
    433e:	df 93       	push	r29
    4340:	cf 93       	push	r28
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
    4346:	80 91 cc 01 	lds	r24, 0x01CC
    434a:	90 91 cd 01 	lds	r25, 0x01CD
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	29 f0       	breq	.+10     	; 0x435c <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    4352:	e0 91 cc 01 	lds	r30, 0x01CC
    4356:	f0 91 cd 01 	lds	r31, 0x01CD
    435a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    435c:	cf 91       	pop	r28
    435e:	df 91       	pop	r29
    4360:	ff 91       	pop	r31
    4362:	ef 91       	pop	r30
    4364:	bf 91       	pop	r27
    4366:	af 91       	pop	r26
    4368:	9f 91       	pop	r25
    436a:	8f 91       	pop	r24
    436c:	7f 91       	pop	r23
    436e:	6f 91       	pop	r22
    4370:	5f 91       	pop	r21
    4372:	4f 91       	pop	r20
    4374:	3f 91       	pop	r19
    4376:	2f 91       	pop	r18
    4378:	0f 90       	pop	r0
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	0f 90       	pop	r0
    437e:	1f 90       	pop	r1
    4380:	18 95       	reti

00004382 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    4382:	df 93       	push	r29
    4384:	cf 93       	push	r28
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    438a:	ea e3       	ldi	r30, 0x3A	; 58
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	8f ec       	ldi	r24, 0xCF	; 207
    4390:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    4392:	e7 e3       	ldi	r30, 0x37	; 55
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	8f ef       	ldi	r24, 0xFF	; 255
    4398:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    439a:	e4 e3       	ldi	r30, 0x34	; 52
    439c:	f0 e0       	ldi	r31, 0x00	; 0
    439e:	8f ef       	ldi	r24, 0xFF	; 255
    43a0:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    43a2:	e1 e3       	ldi	r30, 0x31	; 49
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	87 e2       	ldi	r24, 0x27	; 39
    43a8:	80 83       	st	Z, r24
	PORTA=PORTA_INITIAL_VALUE;
    43aa:	eb e3       	ldi	r30, 0x3B	; 59
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    43b0:	e8 e3       	ldi	r30, 0x38	; 56
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    43b6:	e5 e3       	ldi	r30, 0x35	; 53
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    43bc:	e2 e3       	ldi	r30, 0x32	; 50
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	8f ed       	ldi	r24, 0xDF	; 223
    43c2:	80 83       	st	Z, r24
}
    43c4:	cf 91       	pop	r28
    43c6:	df 91       	pop	r29
    43c8:	08 95       	ret

000043ca <DIO_u8SetPinValue>:
#include"DIO_interface.h"
#include"DIO_register.h"
#include"DIO_private.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    43ca:	df 93       	push	r29
    43cc:	cf 93       	push	r28
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
    43d2:	28 97       	sbiw	r28, 0x08	; 8
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	8a 83       	std	Y+2, r24	; 0x02
    43e0:	6b 83       	std	Y+3, r22	; 0x03
    43e2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    43e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    43e6:	8b 81       	ldd	r24, Y+3	; 0x03
    43e8:	88 30       	cpi	r24, 0x08	; 8
    43ea:	08 f0       	brcs	.+2      	; 0x43ee <DIO_u8SetPinValue+0x24>
    43ec:	f4 c0       	rjmp	.+488    	; 0x45d6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8Pin_LOW)
    43ee:	8c 81       	ldd	r24, Y+4	; 0x04
    43f0:	88 23       	and	r24, r24
    43f2:	09 f0       	breq	.+2      	; 0x43f6 <DIO_u8SetPinValue+0x2c>
    43f4:	77 c0       	rjmp	.+238    	; 0x44e4 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    43f6:	8a 81       	ldd	r24, Y+2	; 0x02
    43f8:	28 2f       	mov	r18, r24
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	38 87       	std	Y+8, r19	; 0x08
    43fe:	2f 83       	std	Y+7, r18	; 0x07
    4400:	8f 81       	ldd	r24, Y+7	; 0x07
    4402:	98 85       	ldd	r25, Y+8	; 0x08
    4404:	81 30       	cpi	r24, 0x01	; 1
    4406:	91 05       	cpc	r25, r1
    4408:	59 f1       	breq	.+86     	; 0x4460 <DIO_u8SetPinValue+0x96>
    440a:	2f 81       	ldd	r18, Y+7	; 0x07
    440c:	38 85       	ldd	r19, Y+8	; 0x08
    440e:	22 30       	cpi	r18, 0x02	; 2
    4410:	31 05       	cpc	r19, r1
    4412:	2c f4       	brge	.+10     	; 0x441e <DIO_u8SetPinValue+0x54>
    4414:	8f 81       	ldd	r24, Y+7	; 0x07
    4416:	98 85       	ldd	r25, Y+8	; 0x08
    4418:	00 97       	sbiw	r24, 0x00	; 0
    441a:	69 f0       	breq	.+26     	; 0x4436 <DIO_u8SetPinValue+0x6c>
    441c:	60 c0       	rjmp	.+192    	; 0x44de <DIO_u8SetPinValue+0x114>
    441e:	2f 81       	ldd	r18, Y+7	; 0x07
    4420:	38 85       	ldd	r19, Y+8	; 0x08
    4422:	22 30       	cpi	r18, 0x02	; 2
    4424:	31 05       	cpc	r19, r1
    4426:	89 f1       	breq	.+98     	; 0x448a <DIO_u8SetPinValue+0xc0>
    4428:	8f 81       	ldd	r24, Y+7	; 0x07
    442a:	98 85       	ldd	r25, Y+8	; 0x08
    442c:	83 30       	cpi	r24, 0x03	; 3
    442e:	91 05       	cpc	r25, r1
    4430:	09 f4       	brne	.+2      	; 0x4434 <DIO_u8SetPinValue+0x6a>
    4432:	40 c0       	rjmp	.+128    	; 0x44b4 <DIO_u8SetPinValue+0xea>
    4434:	54 c0       	rjmp	.+168    	; 0x44de <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    4436:	ab e3       	ldi	r26, 0x3B	; 59
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	eb e3       	ldi	r30, 0x3B	; 59
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	48 2f       	mov	r20, r24
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	28 2f       	mov	r18, r24
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	02 2e       	mov	r0, r18
    444e:	02 c0       	rjmp	.+4      	; 0x4454 <DIO_u8SetPinValue+0x8a>
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	0a 94       	dec	r0
    4456:	e2 f7       	brpl	.-8      	; 0x4450 <DIO_u8SetPinValue+0x86>
    4458:	80 95       	com	r24
    445a:	84 23       	and	r24, r20
    445c:	8c 93       	st	X, r24
    445e:	bd c0       	rjmp	.+378    	; 0x45da <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    4460:	a8 e3       	ldi	r26, 0x38	; 56
    4462:	b0 e0       	ldi	r27, 0x00	; 0
    4464:	e8 e3       	ldi	r30, 0x38	; 56
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	80 81       	ld	r24, Z
    446a:	48 2f       	mov	r20, r24
    446c:	8b 81       	ldd	r24, Y+3	; 0x03
    446e:	28 2f       	mov	r18, r24
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	02 2e       	mov	r0, r18
    4478:	02 c0       	rjmp	.+4      	; 0x447e <DIO_u8SetPinValue+0xb4>
    447a:	88 0f       	add	r24, r24
    447c:	99 1f       	adc	r25, r25
    447e:	0a 94       	dec	r0
    4480:	e2 f7       	brpl	.-8      	; 0x447a <DIO_u8SetPinValue+0xb0>
    4482:	80 95       	com	r24
    4484:	84 23       	and	r24, r20
    4486:	8c 93       	st	X, r24
    4488:	a8 c0       	rjmp	.+336    	; 0x45da <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    448a:	a5 e3       	ldi	r26, 0x35	; 53
    448c:	b0 e0       	ldi	r27, 0x00	; 0
    448e:	e5 e3       	ldi	r30, 0x35	; 53
    4490:	f0 e0       	ldi	r31, 0x00	; 0
    4492:	80 81       	ld	r24, Z
    4494:	48 2f       	mov	r20, r24
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	28 2f       	mov	r18, r24
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	81 e0       	ldi	r24, 0x01	; 1
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	02 2e       	mov	r0, r18
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <DIO_u8SetPinValue+0xde>
    44a4:	88 0f       	add	r24, r24
    44a6:	99 1f       	adc	r25, r25
    44a8:	0a 94       	dec	r0
    44aa:	e2 f7       	brpl	.-8      	; 0x44a4 <DIO_u8SetPinValue+0xda>
    44ac:	80 95       	com	r24
    44ae:	84 23       	and	r24, r20
    44b0:	8c 93       	st	X, r24
    44b2:	93 c0       	rjmp	.+294    	; 0x45da <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    44b4:	a2 e3       	ldi	r26, 0x32	; 50
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	e2 e3       	ldi	r30, 0x32	; 50
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	48 2f       	mov	r20, r24
    44c0:	8b 81       	ldd	r24, Y+3	; 0x03
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	02 2e       	mov	r0, r18
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <DIO_u8SetPinValue+0x108>
    44ce:	88 0f       	add	r24, r24
    44d0:	99 1f       	adc	r25, r25
    44d2:	0a 94       	dec	r0
    44d4:	e2 f7       	brpl	.-8      	; 0x44ce <DIO_u8SetPinValue+0x104>
    44d6:	80 95       	com	r24
    44d8:	84 23       	and	r24, r20
    44da:	8c 93       	st	X, r24
    44dc:	7e c0       	rjmp	.+252    	; 0x45da <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	89 83       	std	Y+1, r24	; 0x01
    44e2:	7b c0       	rjmp	.+246    	; 0x45da <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8Pin_HIGH)
    44e4:	8c 81       	ldd	r24, Y+4	; 0x04
    44e6:	81 30       	cpi	r24, 0x01	; 1
    44e8:	09 f0       	breq	.+2      	; 0x44ec <DIO_u8SetPinValue+0x122>
    44ea:	72 c0       	rjmp	.+228    	; 0x45d0 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    44ec:	8a 81       	ldd	r24, Y+2	; 0x02
    44ee:	28 2f       	mov	r18, r24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	3e 83       	std	Y+6, r19	; 0x06
    44f4:	2d 83       	std	Y+5, r18	; 0x05
    44f6:	8d 81       	ldd	r24, Y+5	; 0x05
    44f8:	9e 81       	ldd	r25, Y+6	; 0x06
    44fa:	81 30       	cpi	r24, 0x01	; 1
    44fc:	91 05       	cpc	r25, r1
    44fe:	49 f1       	breq	.+82     	; 0x4552 <DIO_u8SetPinValue+0x188>
    4500:	2d 81       	ldd	r18, Y+5	; 0x05
    4502:	3e 81       	ldd	r19, Y+6	; 0x06
    4504:	22 30       	cpi	r18, 0x02	; 2
    4506:	31 05       	cpc	r19, r1
    4508:	2c f4       	brge	.+10     	; 0x4514 <DIO_u8SetPinValue+0x14a>
    450a:	8d 81       	ldd	r24, Y+5	; 0x05
    450c:	9e 81       	ldd	r25, Y+6	; 0x06
    450e:	00 97       	sbiw	r24, 0x00	; 0
    4510:	61 f0       	breq	.+24     	; 0x452a <DIO_u8SetPinValue+0x160>
    4512:	5b c0       	rjmp	.+182    	; 0x45ca <DIO_u8SetPinValue+0x200>
    4514:	2d 81       	ldd	r18, Y+5	; 0x05
    4516:	3e 81       	ldd	r19, Y+6	; 0x06
    4518:	22 30       	cpi	r18, 0x02	; 2
    451a:	31 05       	cpc	r19, r1
    451c:	71 f1       	breq	.+92     	; 0x457a <DIO_u8SetPinValue+0x1b0>
    451e:	8d 81       	ldd	r24, Y+5	; 0x05
    4520:	9e 81       	ldd	r25, Y+6	; 0x06
    4522:	83 30       	cpi	r24, 0x03	; 3
    4524:	91 05       	cpc	r25, r1
    4526:	e9 f1       	breq	.+122    	; 0x45a2 <DIO_u8SetPinValue+0x1d8>
    4528:	50 c0       	rjmp	.+160    	; 0x45ca <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    452a:	ab e3       	ldi	r26, 0x3B	; 59
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	eb e3       	ldi	r30, 0x3B	; 59
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	48 2f       	mov	r20, r24
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	28 2f       	mov	r18, r24
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	02 2e       	mov	r0, r18
    4542:	02 c0       	rjmp	.+4      	; 0x4548 <DIO_u8SetPinValue+0x17e>
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	0a 94       	dec	r0
    454a:	e2 f7       	brpl	.-8      	; 0x4544 <DIO_u8SetPinValue+0x17a>
    454c:	84 2b       	or	r24, r20
    454e:	8c 93       	st	X, r24
    4550:	44 c0       	rjmp	.+136    	; 0x45da <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    4552:	a8 e3       	ldi	r26, 0x38	; 56
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	e8 e3       	ldi	r30, 0x38	; 56
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	80 81       	ld	r24, Z
    455c:	48 2f       	mov	r20, r24
    455e:	8b 81       	ldd	r24, Y+3	; 0x03
    4560:	28 2f       	mov	r18, r24
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	02 2e       	mov	r0, r18
    456a:	02 c0       	rjmp	.+4      	; 0x4570 <DIO_u8SetPinValue+0x1a6>
    456c:	88 0f       	add	r24, r24
    456e:	99 1f       	adc	r25, r25
    4570:	0a 94       	dec	r0
    4572:	e2 f7       	brpl	.-8      	; 0x456c <DIO_u8SetPinValue+0x1a2>
    4574:	84 2b       	or	r24, r20
    4576:	8c 93       	st	X, r24
    4578:	30 c0       	rjmp	.+96     	; 0x45da <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    457a:	a5 e3       	ldi	r26, 0x35	; 53
    457c:	b0 e0       	ldi	r27, 0x00	; 0
    457e:	e5 e3       	ldi	r30, 0x35	; 53
    4580:	f0 e0       	ldi	r31, 0x00	; 0
    4582:	80 81       	ld	r24, Z
    4584:	48 2f       	mov	r20, r24
    4586:	8b 81       	ldd	r24, Y+3	; 0x03
    4588:	28 2f       	mov	r18, r24
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	02 2e       	mov	r0, r18
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <DIO_u8SetPinValue+0x1ce>
    4594:	88 0f       	add	r24, r24
    4596:	99 1f       	adc	r25, r25
    4598:	0a 94       	dec	r0
    459a:	e2 f7       	brpl	.-8      	; 0x4594 <DIO_u8SetPinValue+0x1ca>
    459c:	84 2b       	or	r24, r20
    459e:	8c 93       	st	X, r24
    45a0:	1c c0       	rjmp	.+56     	; 0x45da <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    45a2:	a2 e3       	ldi	r26, 0x32	; 50
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	e2 e3       	ldi	r30, 0x32	; 50
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	80 81       	ld	r24, Z
    45ac:	48 2f       	mov	r20, r24
    45ae:	8b 81       	ldd	r24, Y+3	; 0x03
    45b0:	28 2f       	mov	r18, r24
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	02 2e       	mov	r0, r18
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <DIO_u8SetPinValue+0x1f6>
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	0a 94       	dec	r0
    45c2:	e2 f7       	brpl	.-8      	; 0x45bc <DIO_u8SetPinValue+0x1f2>
    45c4:	84 2b       	or	r24, r20
    45c6:	8c 93       	st	X, r24
    45c8:	08 c0       	rjmp	.+16     	; 0x45da <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	89 83       	std	Y+1, r24	; 0x01
    45ce:	05 c0       	rjmp	.+10     	; 0x45da <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	89 83       	std	Y+1, r24	; 0x01
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    45d6:	81 e0       	ldi	r24, 0x01	; 1
    45d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    45da:	89 81       	ldd	r24, Y+1	; 0x01
}
    45dc:	28 96       	adiw	r28, 0x08	; 8
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	f8 94       	cli
    45e2:	de bf       	out	0x3e, r29	; 62
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	cd bf       	out	0x3d, r28	; 61
    45e8:	cf 91       	pop	r28
    45ea:	df 91       	pop	r29
    45ec:	08 95       	ret

000045ee <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    45ee:	df 93       	push	r29
    45f0:	cf 93       	push	r28
    45f2:	00 d0       	rcall	.+0      	; 0x45f4 <DIO_u8SetPortValue+0x6>
    45f4:	00 d0       	rcall	.+0      	; 0x45f6 <DIO_u8SetPortValue+0x8>
    45f6:	0f 92       	push	r0
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	8a 83       	std	Y+2, r24	; 0x02
    45fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    4600:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    4602:	8a 81       	ldd	r24, Y+2	; 0x02
    4604:	28 2f       	mov	r18, r24
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	3d 83       	std	Y+5, r19	; 0x05
    460a:	2c 83       	std	Y+4, r18	; 0x04
    460c:	8c 81       	ldd	r24, Y+4	; 0x04
    460e:	9d 81       	ldd	r25, Y+5	; 0x05
    4610:	81 30       	cpi	r24, 0x01	; 1
    4612:	91 05       	cpc	r25, r1
    4614:	d1 f0       	breq	.+52     	; 0x464a <DIO_u8SetPortValue+0x5c>
    4616:	2c 81       	ldd	r18, Y+4	; 0x04
    4618:	3d 81       	ldd	r19, Y+5	; 0x05
    461a:	22 30       	cpi	r18, 0x02	; 2
    461c:	31 05       	cpc	r19, r1
    461e:	2c f4       	brge	.+10     	; 0x462a <DIO_u8SetPortValue+0x3c>
    4620:	8c 81       	ldd	r24, Y+4	; 0x04
    4622:	9d 81       	ldd	r25, Y+5	; 0x05
    4624:	00 97       	sbiw	r24, 0x00	; 0
    4626:	61 f0       	breq	.+24     	; 0x4640 <DIO_u8SetPortValue+0x52>
    4628:	1f c0       	rjmp	.+62     	; 0x4668 <DIO_u8SetPortValue+0x7a>
    462a:	2c 81       	ldd	r18, Y+4	; 0x04
    462c:	3d 81       	ldd	r19, Y+5	; 0x05
    462e:	22 30       	cpi	r18, 0x02	; 2
    4630:	31 05       	cpc	r19, r1
    4632:	81 f0       	breq	.+32     	; 0x4654 <DIO_u8SetPortValue+0x66>
    4634:	8c 81       	ldd	r24, Y+4	; 0x04
    4636:	9d 81       	ldd	r25, Y+5	; 0x05
    4638:	83 30       	cpi	r24, 0x03	; 3
    463a:	91 05       	cpc	r25, r1
    463c:	81 f0       	breq	.+32     	; 0x465e <DIO_u8SetPortValue+0x70>
    463e:	14 c0       	rjmp	.+40     	; 0x4668 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    4640:	eb e3       	ldi	r30, 0x3B	; 59
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	8b 81       	ldd	r24, Y+3	; 0x03
    4646:	80 83       	st	Z, r24
    4648:	11 c0       	rjmp	.+34     	; 0x466c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    464a:	e8 e3       	ldi	r30, 0x38	; 56
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	8b 81       	ldd	r24, Y+3	; 0x03
    4650:	80 83       	st	Z, r24
    4652:	0c c0       	rjmp	.+24     	; 0x466c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    4654:	e5 e3       	ldi	r30, 0x35	; 53
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	8b 81       	ldd	r24, Y+3	; 0x03
    465a:	80 83       	st	Z, r24
    465c:	07 c0       	rjmp	.+14     	; 0x466c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    465e:	e2 e3       	ldi	r30, 0x32	; 50
    4660:	f0 e0       	ldi	r31, 0x00	; 0
    4662:	8b 81       	ldd	r24, Y+3	; 0x03
    4664:	80 83       	st	Z, r24
    4666:	02 c0       	rjmp	.+4      	; 0x466c <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    466c:	89 81       	ldd	r24, Y+1	; 0x01
}
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	0f 90       	pop	r0
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	cf 91       	pop	r28
    467a:	df 91       	pop	r29
    467c:	08 95       	ret

0000467e <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    467e:	df 93       	push	r29
    4680:	cf 93       	push	r28
    4682:	00 d0       	rcall	.+0      	; 0x4684 <DIO_u8TogglePinValue+0x6>
    4684:	00 d0       	rcall	.+0      	; 0x4686 <DIO_u8TogglePinValue+0x8>
    4686:	0f 92       	push	r0
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
    468c:	8a 83       	std	Y+2, r24	; 0x02
    468e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    4690:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
    4694:	88 30       	cpi	r24, 0x08	; 8
    4696:	08 f0       	brcs	.+2      	; 0x469a <DIO_u8TogglePinValue+0x1c>
    4698:	72 c0       	rjmp	.+228    	; 0x477e <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    469a:	8a 81       	ldd	r24, Y+2	; 0x02
    469c:	28 2f       	mov	r18, r24
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	3d 83       	std	Y+5, r19	; 0x05
    46a2:	2c 83       	std	Y+4, r18	; 0x04
    46a4:	8c 81       	ldd	r24, Y+4	; 0x04
    46a6:	9d 81       	ldd	r25, Y+5	; 0x05
    46a8:	81 30       	cpi	r24, 0x01	; 1
    46aa:	91 05       	cpc	r25, r1
    46ac:	49 f1       	breq	.+82     	; 0x4700 <DIO_u8TogglePinValue+0x82>
    46ae:	2c 81       	ldd	r18, Y+4	; 0x04
    46b0:	3d 81       	ldd	r19, Y+5	; 0x05
    46b2:	22 30       	cpi	r18, 0x02	; 2
    46b4:	31 05       	cpc	r19, r1
    46b6:	2c f4       	brge	.+10     	; 0x46c2 <DIO_u8TogglePinValue+0x44>
    46b8:	8c 81       	ldd	r24, Y+4	; 0x04
    46ba:	9d 81       	ldd	r25, Y+5	; 0x05
    46bc:	00 97       	sbiw	r24, 0x00	; 0
    46be:	61 f0       	breq	.+24     	; 0x46d8 <DIO_u8TogglePinValue+0x5a>
    46c0:	5b c0       	rjmp	.+182    	; 0x4778 <DIO_u8TogglePinValue+0xfa>
    46c2:	2c 81       	ldd	r18, Y+4	; 0x04
    46c4:	3d 81       	ldd	r19, Y+5	; 0x05
    46c6:	22 30       	cpi	r18, 0x02	; 2
    46c8:	31 05       	cpc	r19, r1
    46ca:	71 f1       	breq	.+92     	; 0x4728 <DIO_u8TogglePinValue+0xaa>
    46cc:	8c 81       	ldd	r24, Y+4	; 0x04
    46ce:	9d 81       	ldd	r25, Y+5	; 0x05
    46d0:	83 30       	cpi	r24, 0x03	; 3
    46d2:	91 05       	cpc	r25, r1
    46d4:	e9 f1       	breq	.+122    	; 0x4750 <DIO_u8TogglePinValue+0xd2>
    46d6:	50 c0       	rjmp	.+160    	; 0x4778 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOGGLE_BIT(PORTA,Copy_u8Pin); break;
    46d8:	ab e3       	ldi	r26, 0x3B	; 59
    46da:	b0 e0       	ldi	r27, 0x00	; 0
    46dc:	eb e3       	ldi	r30, 0x3B	; 59
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	80 81       	ld	r24, Z
    46e2:	48 2f       	mov	r20, r24
    46e4:	8b 81       	ldd	r24, Y+3	; 0x03
    46e6:	28 2f       	mov	r18, r24
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	02 2e       	mov	r0, r18
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <DIO_u8TogglePinValue+0x78>
    46f2:	88 0f       	add	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	0a 94       	dec	r0
    46f8:	e2 f7       	brpl	.-8      	; 0x46f2 <DIO_u8TogglePinValue+0x74>
    46fa:	84 27       	eor	r24, r20
    46fc:	8c 93       	st	X, r24
    46fe:	41 c0       	rjmp	.+130    	; 0x4782 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOGGLE_BIT(PORTB,Copy_u8Pin); break;
    4700:	a8 e3       	ldi	r26, 0x38	; 56
    4702:	b0 e0       	ldi	r27, 0x00	; 0
    4704:	e8 e3       	ldi	r30, 0x38	; 56
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	80 81       	ld	r24, Z
    470a:	48 2f       	mov	r20, r24
    470c:	8b 81       	ldd	r24, Y+3	; 0x03
    470e:	28 2f       	mov	r18, r24
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	02 2e       	mov	r0, r18
    4718:	02 c0       	rjmp	.+4      	; 0x471e <DIO_u8TogglePinValue+0xa0>
    471a:	88 0f       	add	r24, r24
    471c:	99 1f       	adc	r25, r25
    471e:	0a 94       	dec	r0
    4720:	e2 f7       	brpl	.-8      	; 0x471a <DIO_u8TogglePinValue+0x9c>
    4722:	84 27       	eor	r24, r20
    4724:	8c 93       	st	X, r24
    4726:	2d c0       	rjmp	.+90     	; 0x4782 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOGGLE_BIT(PORTC,Copy_u8Pin); break;
    4728:	a5 e3       	ldi	r26, 0x35	; 53
    472a:	b0 e0       	ldi	r27, 0x00	; 0
    472c:	e5 e3       	ldi	r30, 0x35	; 53
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	80 81       	ld	r24, Z
    4732:	48 2f       	mov	r20, r24
    4734:	8b 81       	ldd	r24, Y+3	; 0x03
    4736:	28 2f       	mov	r18, r24
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	02 2e       	mov	r0, r18
    4740:	02 c0       	rjmp	.+4      	; 0x4746 <DIO_u8TogglePinValue+0xc8>
    4742:	88 0f       	add	r24, r24
    4744:	99 1f       	adc	r25, r25
    4746:	0a 94       	dec	r0
    4748:	e2 f7       	brpl	.-8      	; 0x4742 <DIO_u8TogglePinValue+0xc4>
    474a:	84 27       	eor	r24, r20
    474c:	8c 93       	st	X, r24
    474e:	19 c0       	rjmp	.+50     	; 0x4782 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOGGLE_BIT(PORTD,Copy_u8Pin); break;
    4750:	a2 e3       	ldi	r26, 0x32	; 50
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	e2 e3       	ldi	r30, 0x32	; 50
    4756:	f0 e0       	ldi	r31, 0x00	; 0
    4758:	80 81       	ld	r24, Z
    475a:	48 2f       	mov	r20, r24
    475c:	8b 81       	ldd	r24, Y+3	; 0x03
    475e:	28 2f       	mov	r18, r24
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	02 2e       	mov	r0, r18
    4768:	02 c0       	rjmp	.+4      	; 0x476e <DIO_u8TogglePinValue+0xf0>
    476a:	88 0f       	add	r24, r24
    476c:	99 1f       	adc	r25, r25
    476e:	0a 94       	dec	r0
    4770:	e2 f7       	brpl	.-8      	; 0x476a <DIO_u8TogglePinValue+0xec>
    4772:	84 27       	eor	r24, r20
    4774:	8c 93       	st	X, r24
    4776:	05 c0       	rjmp	.+10     	; 0x4782 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState=1; break;
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	02 c0       	rjmp	.+4      	; 0x4782 <DIO_u8TogglePinValue+0x104>

		}
	}
	else
	{
		Local_u8ErrorState=1;
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    4782:	89 81       	ldd	r24, Y+1	; 0x01
}
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	27 97       	sbiw	r28, 0x07	; 7
    479e:	0f b6       	in	r0, 0x3f	; 63
    47a0:	f8 94       	cli
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	0f be       	out	0x3f, r0	; 63
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	8a 83       	std	Y+2, r24	; 0x02
    47aa:	6b 83       	std	Y+3, r22	; 0x03
    47ac:	5d 83       	std	Y+5, r21	; 0x05
    47ae:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    47b0:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    47b2:	8c 81       	ldd	r24, Y+4	; 0x04
    47b4:	9d 81       	ldd	r25, Y+5	; 0x05
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	09 f4       	brne	.+2      	; 0x47bc <DIO_u8GetPinValue+0x28>
    47ba:	78 c0       	rjmp	.+240    	; 0x48ac <DIO_u8GetPinValue+0x118>
    47bc:	8b 81       	ldd	r24, Y+3	; 0x03
    47be:	88 30       	cpi	r24, 0x08	; 8
    47c0:	08 f0       	brcs	.+2      	; 0x47c4 <DIO_u8GetPinValue+0x30>
    47c2:	74 c0       	rjmp	.+232    	; 0x48ac <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    47c4:	8a 81       	ldd	r24, Y+2	; 0x02
    47c6:	28 2f       	mov	r18, r24
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	3f 83       	std	Y+7, r19	; 0x07
    47cc:	2e 83       	std	Y+6, r18	; 0x06
    47ce:	4e 81       	ldd	r20, Y+6	; 0x06
    47d0:	5f 81       	ldd	r21, Y+7	; 0x07
    47d2:	41 30       	cpi	r20, 0x01	; 1
    47d4:	51 05       	cpc	r21, r1
    47d6:	59 f1       	breq	.+86     	; 0x482e <DIO_u8GetPinValue+0x9a>
    47d8:	8e 81       	ldd	r24, Y+6	; 0x06
    47da:	9f 81       	ldd	r25, Y+7	; 0x07
    47dc:	82 30       	cpi	r24, 0x02	; 2
    47de:	91 05       	cpc	r25, r1
    47e0:	34 f4       	brge	.+12     	; 0x47ee <DIO_u8GetPinValue+0x5a>
    47e2:	2e 81       	ldd	r18, Y+6	; 0x06
    47e4:	3f 81       	ldd	r19, Y+7	; 0x07
    47e6:	21 15       	cp	r18, r1
    47e8:	31 05       	cpc	r19, r1
    47ea:	69 f0       	breq	.+26     	; 0x4806 <DIO_u8GetPinValue+0x72>
    47ec:	5c c0       	rjmp	.+184    	; 0x48a6 <DIO_u8GetPinValue+0x112>
    47ee:	4e 81       	ldd	r20, Y+6	; 0x06
    47f0:	5f 81       	ldd	r21, Y+7	; 0x07
    47f2:	42 30       	cpi	r20, 0x02	; 2
    47f4:	51 05       	cpc	r21, r1
    47f6:	79 f1       	breq	.+94     	; 0x4856 <DIO_u8GetPinValue+0xc2>
    47f8:	8e 81       	ldd	r24, Y+6	; 0x06
    47fa:	9f 81       	ldd	r25, Y+7	; 0x07
    47fc:	83 30       	cpi	r24, 0x03	; 3
    47fe:	91 05       	cpc	r25, r1
    4800:	09 f4       	brne	.+2      	; 0x4804 <DIO_u8GetPinValue+0x70>
    4802:	3d c0       	rjmp	.+122    	; 0x487e <DIO_u8GetPinValue+0xea>
    4804:	50 c0       	rjmp	.+160    	; 0x48a6 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_Pu8Value=GET_BIT(PINA, Copy_u8Pin); break;
    4806:	e9 e3       	ldi	r30, 0x39	; 57
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	80 81       	ld	r24, Z
    480c:	28 2f       	mov	r18, r24
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	88 2f       	mov	r24, r24
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	a9 01       	movw	r20, r18
    4818:	02 c0       	rjmp	.+4      	; 0x481e <DIO_u8GetPinValue+0x8a>
    481a:	55 95       	asr	r21
    481c:	47 95       	ror	r20
    481e:	8a 95       	dec	r24
    4820:	e2 f7       	brpl	.-8      	; 0x481a <DIO_u8GetPinValue+0x86>
    4822:	ca 01       	movw	r24, r20
    4824:	81 70       	andi	r24, 0x01	; 1
    4826:	ec 81       	ldd	r30, Y+4	; 0x04
    4828:	fd 81       	ldd	r31, Y+5	; 0x05
    482a:	80 83       	st	Z, r24
    482c:	41 c0       	rjmp	.+130    	; 0x48b0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_Pu8Value=GET_BIT(PINB, Copy_u8Pin); break;
    482e:	e6 e3       	ldi	r30, 0x36	; 54
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	80 81       	ld	r24, Z
    4834:	28 2f       	mov	r18, r24
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	8b 81       	ldd	r24, Y+3	; 0x03
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	a9 01       	movw	r20, r18
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <DIO_u8GetPinValue+0xb2>
    4842:	55 95       	asr	r21
    4844:	47 95       	ror	r20
    4846:	8a 95       	dec	r24
    4848:	e2 f7       	brpl	.-8      	; 0x4842 <DIO_u8GetPinValue+0xae>
    484a:	ca 01       	movw	r24, r20
    484c:	81 70       	andi	r24, 0x01	; 1
    484e:	ec 81       	ldd	r30, Y+4	; 0x04
    4850:	fd 81       	ldd	r31, Y+5	; 0x05
    4852:	80 83       	st	Z, r24
    4854:	2d c0       	rjmp	.+90     	; 0x48b0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_Pu8Value=GET_BIT(PINC, Copy_u8Pin); break;
    4856:	e3 e3       	ldi	r30, 0x33	; 51
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	80 81       	ld	r24, Z
    485c:	28 2f       	mov	r18, r24
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	8b 81       	ldd	r24, Y+3	; 0x03
    4862:	88 2f       	mov	r24, r24
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	a9 01       	movw	r20, r18
    4868:	02 c0       	rjmp	.+4      	; 0x486e <DIO_u8GetPinValue+0xda>
    486a:	55 95       	asr	r21
    486c:	47 95       	ror	r20
    486e:	8a 95       	dec	r24
    4870:	e2 f7       	brpl	.-8      	; 0x486a <DIO_u8GetPinValue+0xd6>
    4872:	ca 01       	movw	r24, r20
    4874:	81 70       	andi	r24, 0x01	; 1
    4876:	ec 81       	ldd	r30, Y+4	; 0x04
    4878:	fd 81       	ldd	r31, Y+5	; 0x05
    487a:	80 83       	st	Z, r24
    487c:	19 c0       	rjmp	.+50     	; 0x48b0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_Pu8Value=GET_BIT(PIND, Copy_u8Pin); break;
    487e:	e0 e3       	ldi	r30, 0x30	; 48
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	80 81       	ld	r24, Z
    4884:	28 2f       	mov	r18, r24
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	8b 81       	ldd	r24, Y+3	; 0x03
    488a:	88 2f       	mov	r24, r24
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	a9 01       	movw	r20, r18
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <DIO_u8GetPinValue+0x102>
    4892:	55 95       	asr	r21
    4894:	47 95       	ror	r20
    4896:	8a 95       	dec	r24
    4898:	e2 f7       	brpl	.-8      	; 0x4892 <DIO_u8GetPinValue+0xfe>
    489a:	ca 01       	movw	r24, r20
    489c:	81 70       	andi	r24, 0x01	; 1
    489e:	ec 81       	ldd	r30, Y+4	; 0x04
    48a0:	fd 81       	ldd	r31, Y+5	; 0x05
    48a2:	80 83       	st	Z, r24
    48a4:	05 c0       	rjmp	.+10     	; 0x48b0 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1; break;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	89 83       	std	Y+1, r24	; 0x01
    48aa:	02 c0       	rjmp	.+4      	; 0x48b0 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    48b2:	27 96       	adiw	r28, 0x07	; 7
    48b4:	0f b6       	in	r0, 0x3f	; 63
    48b6:	f8 94       	cli
    48b8:	de bf       	out	0x3e, r29	; 62
    48ba:	0f be       	out	0x3f, r0	; 63
    48bc:	cd bf       	out	0x3d, r28	; 61
    48be:	cf 91       	pop	r28
    48c0:	df 91       	pop	r29
    48c2:	08 95       	ret

000048c4 <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
    48c4:	df 93       	push	r29
    48c6:	cf 93       	push	r28
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <DIO_U8GetPortValue+0x6>
    48ca:	00 d0       	rcall	.+0      	; 0x48cc <DIO_U8GetPortValue+0x8>
    48cc:	00 d0       	rcall	.+0      	; 0x48ce <DIO_U8GetPortValue+0xa>
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	8a 83       	std	Y+2, r24	; 0x02
    48d4:	7c 83       	std	Y+4, r23	; 0x04
    48d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    48d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Value!=NULL)
    48da:	8b 81       	ldd	r24, Y+3	; 0x03
    48dc:	9c 81       	ldd	r25, Y+4	; 0x04
    48de:	00 97       	sbiw	r24, 0x00	; 0
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <DIO_U8GetPortValue+0x20>
    48e2:	3e c0       	rjmp	.+124    	; 0x4960 <DIO_U8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    48e4:	8a 81       	ldd	r24, Y+2	; 0x02
    48e6:	28 2f       	mov	r18, r24
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	3e 83       	std	Y+6, r19	; 0x06
    48ec:	2d 83       	std	Y+5, r18	; 0x05
    48ee:	8d 81       	ldd	r24, Y+5	; 0x05
    48f0:	9e 81       	ldd	r25, Y+6	; 0x06
    48f2:	81 30       	cpi	r24, 0x01	; 1
    48f4:	91 05       	cpc	r25, r1
    48f6:	e1 f0       	breq	.+56     	; 0x4930 <DIO_U8GetPortValue+0x6c>
    48f8:	2d 81       	ldd	r18, Y+5	; 0x05
    48fa:	3e 81       	ldd	r19, Y+6	; 0x06
    48fc:	22 30       	cpi	r18, 0x02	; 2
    48fe:	31 05       	cpc	r19, r1
    4900:	2c f4       	brge	.+10     	; 0x490c <DIO_U8GetPortValue+0x48>
    4902:	8d 81       	ldd	r24, Y+5	; 0x05
    4904:	9e 81       	ldd	r25, Y+6	; 0x06
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	61 f0       	breq	.+24     	; 0x4922 <DIO_U8GetPortValue+0x5e>
    490a:	27 c0       	rjmp	.+78     	; 0x495a <DIO_U8GetPortValue+0x96>
    490c:	2d 81       	ldd	r18, Y+5	; 0x05
    490e:	3e 81       	ldd	r19, Y+6	; 0x06
    4910:	22 30       	cpi	r18, 0x02	; 2
    4912:	31 05       	cpc	r19, r1
    4914:	a1 f0       	breq	.+40     	; 0x493e <DIO_U8GetPortValue+0x7a>
    4916:	8d 81       	ldd	r24, Y+5	; 0x05
    4918:	9e 81       	ldd	r25, Y+6	; 0x06
    491a:	83 30       	cpi	r24, 0x03	; 3
    491c:	91 05       	cpc	r25, r1
    491e:	b1 f0       	breq	.+44     	; 0x494c <DIO_U8GetPortValue+0x88>
    4920:	1c c0       	rjmp	.+56     	; 0x495a <DIO_U8GetPortValue+0x96>
		{
		case DIO_u8PORTA: *Copy_Pu8Value=PINA; break;
    4922:	e9 e3       	ldi	r30, 0x39	; 57
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	80 81       	ld	r24, Z
    4928:	eb 81       	ldd	r30, Y+3	; 0x03
    492a:	fc 81       	ldd	r31, Y+4	; 0x04
    492c:	80 83       	st	Z, r24
    492e:	1a c0       	rjmp	.+52     	; 0x4964 <DIO_U8GetPortValue+0xa0>
		case DIO_u8PORTB: *Copy_Pu8Value=PINB; break;
    4930:	e6 e3       	ldi	r30, 0x36	; 54
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	80 81       	ld	r24, Z
    4936:	eb 81       	ldd	r30, Y+3	; 0x03
    4938:	fc 81       	ldd	r31, Y+4	; 0x04
    493a:	80 83       	st	Z, r24
    493c:	13 c0       	rjmp	.+38     	; 0x4964 <DIO_U8GetPortValue+0xa0>
		case DIO_u8PORTC: *Copy_Pu8Value=PINC; break;
    493e:	e3 e3       	ldi	r30, 0x33	; 51
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	80 81       	ld	r24, Z
    4944:	eb 81       	ldd	r30, Y+3	; 0x03
    4946:	fc 81       	ldd	r31, Y+4	; 0x04
    4948:	80 83       	st	Z, r24
    494a:	0c c0       	rjmp	.+24     	; 0x4964 <DIO_U8GetPortValue+0xa0>
		case DIO_u8PORTD: *Copy_Pu8Value=PIND; break;
    494c:	e0 e3       	ldi	r30, 0x30	; 48
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	eb 81       	ldd	r30, Y+3	; 0x03
    4954:	fc 81       	ldd	r31, Y+4	; 0x04
    4956:	80 83       	st	Z, r24
    4958:	05 c0       	rjmp	.+10     	; 0x4964 <DIO_U8GetPortValue+0xa0>
		default: Local_u8ErrorState=1; break;
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	89 83       	std	Y+1, r24	; 0x01
    495e:	02 c0       	rjmp	.+4      	; 0x4964 <DIO_U8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    4960:	81 e0       	ldi	r24, 0x01	; 1
    4962:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    4964:	89 81       	ldd	r24, Y+1	; 0x01
}
    4966:	26 96       	adiw	r28, 0x06	; 6
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	f8 94       	cli
    496c:	de bf       	out	0x3e, r29	; 62
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	cd bf       	out	0x3d, r28	; 61
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	08 95       	ret

00004978 <main>:
static u8 APP_u8Direction=0;
DC_MOTOR DC={DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN7};
void APP_DCSpeed(void);
void APP_DCSpeed(void);
int main(void)
{
    4978:	0f 93       	push	r16
    497a:	1f 93       	push	r17
    497c:	df 93       	push	r29
    497e:	cf 93       	push	r28
    4980:	cd b7       	in	r28, 0x3d	; 61
    4982:	de b7       	in	r29, 0x3e	; 62
    4984:	cc 5b       	subi	r28, 0xBC	; 188
    4986:	d0 40       	sbci	r29, 0x00	; 0
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
	STEPPER_MOTOR MOTOR1={DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN1,DIO_u8PIN2,DIO_u8PIN3};
    4992:	ce 01       	movw	r24, r28
    4994:	85 56       	subi	r24, 0x65	; 101
    4996:	9f 4f       	sbci	r25, 0xFF	; 255
    4998:	c8 54       	subi	r28, 0x48	; 72
    499a:	df 4f       	sbci	r29, 0xFF	; 255
    499c:	99 83       	std	Y+1, r25	; 0x01
    499e:	88 83       	st	Y, r24
    49a0:	c8 5b       	subi	r28, 0xB8	; 184
    49a2:	d0 40       	sbci	r29, 0x00	; 0
    49a4:	28 eb       	ldi	r18, 0xB8	; 184
    49a6:	31 e0       	ldi	r19, 0x01	; 1
    49a8:	c6 54       	subi	r28, 0x46	; 70
    49aa:	df 4f       	sbci	r29, 0xFF	; 255
    49ac:	39 83       	std	Y+1, r19	; 0x01
    49ae:	28 83       	st	Y, r18
    49b0:	ca 5b       	subi	r28, 0xBA	; 186
    49b2:	d0 40       	sbci	r29, 0x00	; 0
    49b4:	35 e0       	ldi	r19, 0x05	; 5
    49b6:	c4 54       	subi	r28, 0x44	; 68
    49b8:	df 4f       	sbci	r29, 0xFF	; 255
    49ba:	38 83       	st	Y, r19
    49bc:	cc 5b       	subi	r28, 0xBC	; 188
    49be:	d0 40       	sbci	r29, 0x00	; 0
    49c0:	c6 54       	subi	r28, 0x46	; 70
    49c2:	df 4f       	sbci	r29, 0xFF	; 255
    49c4:	e8 81       	ld	r30, Y
    49c6:	f9 81       	ldd	r31, Y+1	; 0x01
    49c8:	ca 5b       	subi	r28, 0xBA	; 186
    49ca:	d0 40       	sbci	r29, 0x00	; 0
    49cc:	00 80       	ld	r0, Z
    49ce:	c6 54       	subi	r28, 0x46	; 70
    49d0:	df 4f       	sbci	r29, 0xFF	; 255
    49d2:	28 81       	ld	r18, Y
    49d4:	39 81       	ldd	r19, Y+1	; 0x01
    49d6:	ca 5b       	subi	r28, 0xBA	; 186
    49d8:	d0 40       	sbci	r29, 0x00	; 0
    49da:	2f 5f       	subi	r18, 0xFF	; 255
    49dc:	3f 4f       	sbci	r19, 0xFF	; 255
    49de:	c6 54       	subi	r28, 0x46	; 70
    49e0:	df 4f       	sbci	r29, 0xFF	; 255
    49e2:	39 83       	std	Y+1, r19	; 0x01
    49e4:	28 83       	st	Y, r18
    49e6:	ca 5b       	subi	r28, 0xBA	; 186
    49e8:	d0 40       	sbci	r29, 0x00	; 0
    49ea:	c8 54       	subi	r28, 0x48	; 72
    49ec:	df 4f       	sbci	r29, 0xFF	; 255
    49ee:	e8 81       	ld	r30, Y
    49f0:	f9 81       	ldd	r31, Y+1	; 0x01
    49f2:	c8 5b       	subi	r28, 0xB8	; 184
    49f4:	d0 40       	sbci	r29, 0x00	; 0
    49f6:	00 82       	st	Z, r0
    49f8:	c8 54       	subi	r28, 0x48	; 72
    49fa:	df 4f       	sbci	r29, 0xFF	; 255
    49fc:	28 81       	ld	r18, Y
    49fe:	39 81       	ldd	r19, Y+1	; 0x01
    4a00:	c8 5b       	subi	r28, 0xB8	; 184
    4a02:	d0 40       	sbci	r29, 0x00	; 0
    4a04:	2f 5f       	subi	r18, 0xFF	; 255
    4a06:	3f 4f       	sbci	r19, 0xFF	; 255
    4a08:	c8 54       	subi	r28, 0x48	; 72
    4a0a:	df 4f       	sbci	r29, 0xFF	; 255
    4a0c:	39 83       	std	Y+1, r19	; 0x01
    4a0e:	28 83       	st	Y, r18
    4a10:	c8 5b       	subi	r28, 0xB8	; 184
    4a12:	d0 40       	sbci	r29, 0x00	; 0
    4a14:	c4 54       	subi	r28, 0x44	; 68
    4a16:	df 4f       	sbci	r29, 0xFF	; 255
    4a18:	38 81       	ld	r19, Y
    4a1a:	cc 5b       	subi	r28, 0xBC	; 188
    4a1c:	d0 40       	sbci	r29, 0x00	; 0
    4a1e:	31 50       	subi	r19, 0x01	; 1
    4a20:	c4 54       	subi	r28, 0x44	; 68
    4a22:	df 4f       	sbci	r29, 0xFF	; 255
    4a24:	38 83       	st	Y, r19
    4a26:	cc 5b       	subi	r28, 0xBC	; 188
    4a28:	d0 40       	sbci	r29, 0x00	; 0
    4a2a:	c4 54       	subi	r28, 0x44	; 68
    4a2c:	df 4f       	sbci	r29, 0xFF	; 255
    4a2e:	48 81       	ld	r20, Y
    4a30:	cc 5b       	subi	r28, 0xBC	; 188
    4a32:	d0 40       	sbci	r29, 0x00	; 0
    4a34:	44 23       	and	r20, r20
    4a36:	21 f6       	brne	.-120    	; 0x49c0 <main+0x48>
	s8 Local_ps8Buffer[10];
	u16 Local_u16Angle=0;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e7 56       	subi	r30, 0x67	; 103
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	11 82       	std	Z+1, r1	; 0x01
    4a40:	10 82       	st	Z, r1
	u16 Local_u16MappedAngle=0;
    4a42:	fe 01       	movw	r30, r28
    4a44:	e9 56       	subi	r30, 0x69	; 105
    4a46:	ff 4f       	sbci	r31, 0xFF	; 255
    4a48:	11 82       	std	Z+1, r1	; 0x01
    4a4a:	10 82       	st	Z, r1
	u16 Local_ADCReading=0;
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e6 55       	subi	r30, 0x56	; 86
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	11 82       	std	Z+1, r1	; 0x01
    4a54:	10 82       	st	Z, r1
	u8 Local_u8Counter=0;
    4a56:	fe 01       	movw	r30, r28
    4a58:	ea 56       	subi	r30, 0x6A	; 106
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	10 82       	st	Z, r1
	u8 Local_u8TrailesCounter=0;
    4a5e:	fe 01       	movw	r30, r28
    4a60:	eb 56       	subi	r30, 0x6B	; 107
    4a62:	ff 4f       	sbci	r31, 0xFF	; 255
    4a64:	10 82       	st	Z, r1
	u8 Local_u8PressedKey=0;
    4a66:	fe 01       	movw	r30, r28
    4a68:	ec 56       	subi	r30, 0x6C	; 108
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	10 82       	st	Z, r1
	u16 Local_u16UserName=0;
    4a6e:	fe 01       	movw	r30, r28
    4a70:	ee 56       	subi	r30, 0x6E	; 110
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	11 82       	std	Z+1, r1	; 0x01
    4a76:	10 82       	st	Z, r1
	u16 Local_u16EnteredPassword=0;
    4a78:	fe 01       	movw	r30, r28
    4a7a:	e0 57       	subi	r30, 0x70	; 112
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	11 82       	std	Z+1, r1	; 0x01
    4a80:	10 82       	st	Z, r1
	u16 Local_u16CorrectPassword=0;
    4a82:	fe 01       	movw	r30, r28
    4a84:	e2 57       	subi	r30, 0x72	; 114
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	11 82       	std	Z+1, r1	; 0x01
    4a8a:	10 82       	st	Z, r1
	/*Initialization of Port direction*/
	PORT_voidInit();
    4a8c:	0e 94 c1 21 	call	0x4382	; 0x4382 <PORT_voidInit>
	CLCD_void_Init();
    4a90:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <CLCD_void_Init>
	GIE_voidEnable();
    4a94:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <GIE_voidEnable>
	ADC_voidInit();
    4a98:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <ADC_voidInit>
	TIMER0_voidInit();
    4a9c:	0e 94 89 1c 	call	0x3912	; 0x3912 <TIMER0_voidInit>
	TIMER1_voidInit();
    4aa0:	0e 94 be 1c 	call	0x397c	; 0x397c <TIMER1_voidInit>
	CLCD_voidSendString("Welcome");
    4aa4:	80 e6       	ldi	r24, 0x60	; 96
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
    4aac:	fe 01       	movw	r30, r28
    4aae:	e7 57       	subi	r30, 0x77	; 119
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e8       	ldi	r25, 0x80	; 128
    4ab6:	ab e3       	ldi	r26, 0x3B	; 59
    4ab8:	b5 e4       	ldi	r27, 0x45	; 69
    4aba:	80 83       	st	Z, r24
    4abc:	91 83       	std	Z+1, r25	; 0x01
    4abe:	a2 83       	std	Z+2, r26	; 0x02
    4ac0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac2:	8e 01       	movw	r16, r28
    4ac4:	0b 57       	subi	r16, 0x7B	; 123
    4ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac8:	fe 01       	movw	r30, r28
    4aca:	e7 57       	subi	r30, 0x77	; 119
    4acc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ace:	60 81       	ld	r22, Z
    4ad0:	71 81       	ldd	r23, Z+1	; 0x01
    4ad2:	82 81       	ldd	r24, Z+2	; 0x02
    4ad4:	93 81       	ldd	r25, Z+3	; 0x03
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	4a ef       	ldi	r20, 0xFA	; 250
    4adc:	54 e4       	ldi	r21, 0x44	; 68
    4ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	f8 01       	movw	r30, r16
    4ae8:	80 83       	st	Z, r24
    4aea:	91 83       	std	Z+1, r25	; 0x01
    4aec:	a2 83       	std	Z+2, r26	; 0x02
    4aee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4af0:	fe 01       	movw	r30, r28
    4af2:	eb 57       	subi	r30, 0x7B	; 123
    4af4:	ff 4f       	sbci	r31, 0xFF	; 255
    4af6:	60 81       	ld	r22, Z
    4af8:	71 81       	ldd	r23, Z+1	; 0x01
    4afa:	82 81       	ldd	r24, Z+2	; 0x02
    4afc:	93 81       	ldd	r25, Z+3	; 0x03
    4afe:	20 e0       	ldi	r18, 0x00	; 0
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	40 e8       	ldi	r20, 0x80	; 128
    4b04:	5f e3       	ldi	r21, 0x3F	; 63
    4b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b0a:	88 23       	and	r24, r24
    4b0c:	44 f4       	brge	.+16     	; 0x4b1e <main+0x1a6>
		__ticks = 1;
    4b0e:	fe 01       	movw	r30, r28
    4b10:	ed 57       	subi	r30, 0x7D	; 125
    4b12:	ff 4f       	sbci	r31, 0xFF	; 255
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
    4b1c:	64 c0       	rjmp	.+200    	; 0x4be6 <main+0x26e>
	else if (__tmp > 65535)
    4b1e:	fe 01       	movw	r30, r28
    4b20:	eb 57       	subi	r30, 0x7B	; 123
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	60 81       	ld	r22, Z
    4b26:	71 81       	ldd	r23, Z+1	; 0x01
    4b28:	82 81       	ldd	r24, Z+2	; 0x02
    4b2a:	93 81       	ldd	r25, Z+3	; 0x03
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	3f ef       	ldi	r19, 0xFF	; 255
    4b30:	4f e7       	ldi	r20, 0x7F	; 127
    4b32:	57 e4       	ldi	r21, 0x47	; 71
    4b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b38:	18 16       	cp	r1, r24
    4b3a:	0c f0       	brlt	.+2      	; 0x4b3e <main+0x1c6>
    4b3c:	43 c0       	rjmp	.+134    	; 0x4bc4 <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b3e:	fe 01       	movw	r30, r28
    4b40:	e7 57       	subi	r30, 0x77	; 119
    4b42:	ff 4f       	sbci	r31, 0xFF	; 255
    4b44:	60 81       	ld	r22, Z
    4b46:	71 81       	ldd	r23, Z+1	; 0x01
    4b48:	82 81       	ldd	r24, Z+2	; 0x02
    4b4a:	93 81       	ldd	r25, Z+3	; 0x03
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e2       	ldi	r20, 0x20	; 32
    4b52:	51 e4       	ldi	r21, 0x41	; 65
    4b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	8e 01       	movw	r16, r28
    4b5e:	0d 57       	subi	r16, 0x7D	; 125
    4b60:	1f 4f       	sbci	r17, 0xFF	; 255
    4b62:	bc 01       	movw	r22, r24
    4b64:	cd 01       	movw	r24, r26
    4b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	f8 01       	movw	r30, r16
    4b70:	91 83       	std	Z+1, r25	; 0x01
    4b72:	80 83       	st	Z, r24
    4b74:	1f c0       	rjmp	.+62     	; 0x4bb4 <main+0x23c>
    4b76:	fe 01       	movw	r30, r28
    4b78:	ef 57       	subi	r30, 0x7F	; 127
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	88 ec       	ldi	r24, 0xC8	; 200
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	91 83       	std	Z+1, r25	; 0x01
    4b82:	80 83       	st	Z, r24
    4b84:	fe 01       	movw	r30, r28
    4b86:	ef 57       	subi	r30, 0x7F	; 127
    4b88:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8a:	80 81       	ld	r24, Z
    4b8c:	91 81       	ldd	r25, Z+1	; 0x01
    4b8e:	01 97       	sbiw	r24, 0x01	; 1
    4b90:	f1 f7       	brne	.-4      	; 0x4b8e <main+0x216>
    4b92:	fe 01       	movw	r30, r28
    4b94:	ef 57       	subi	r30, 0x7F	; 127
    4b96:	ff 4f       	sbci	r31, 0xFF	; 255
    4b98:	91 83       	std	Z+1, r25	; 0x01
    4b9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b9c:	de 01       	movw	r26, r28
    4b9e:	ad 57       	subi	r26, 0x7D	; 125
    4ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	ed 57       	subi	r30, 0x7D	; 125
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 81       	ld	r24, Z
    4baa:	91 81       	ldd	r25, Z+1	; 0x01
    4bac:	01 97       	sbiw	r24, 0x01	; 1
    4bae:	11 96       	adiw	r26, 0x01	; 1
    4bb0:	9c 93       	st	X, r25
    4bb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	ed 57       	subi	r30, 0x7D	; 125
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	80 81       	ld	r24, Z
    4bbc:	91 81       	ldd	r25, Z+1	; 0x01
    4bbe:	00 97       	sbiw	r24, 0x00	; 0
    4bc0:	d1 f6       	brne	.-76     	; 0x4b76 <main+0x1fe>
    4bc2:	27 c0       	rjmp	.+78     	; 0x4c12 <main+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc4:	8e 01       	movw	r16, r28
    4bc6:	0d 57       	subi	r16, 0x7D	; 125
    4bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bca:	fe 01       	movw	r30, r28
    4bcc:	eb 57       	subi	r30, 0x7B	; 123
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	60 81       	ld	r22, Z
    4bd2:	71 81       	ldd	r23, Z+1	; 0x01
    4bd4:	82 81       	ldd	r24, Z+2	; 0x02
    4bd6:	93 81       	ldd	r25, Z+3	; 0x03
    4bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	f8 01       	movw	r30, r16
    4be2:	91 83       	std	Z+1, r25	; 0x01
    4be4:	80 83       	st	Z, r24
    4be6:	de 01       	movw	r26, r28
    4be8:	a1 58       	subi	r26, 0x81	; 129
    4bea:	bf 4f       	sbci	r27, 0xFF	; 255
    4bec:	fe 01       	movw	r30, r28
    4bee:	ed 57       	subi	r30, 0x7D	; 125
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 81       	ld	r24, Z
    4bf4:	91 81       	ldd	r25, Z+1	; 0x01
    4bf6:	8d 93       	st	X+, r24
    4bf8:	9c 93       	st	X, r25
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e1 58       	subi	r30, 0x81	; 129
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	91 81       	ldd	r25, Z+1	; 0x01
    4c04:	01 97       	sbiw	r24, 0x01	; 1
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <main+0x28c>
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e1 58       	subi	r30, 0x81	; 129
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	91 83       	std	Z+1, r25	; 0x01
    4c10:	80 83       	st	Z, r24
	_delay_ms(3000);
	CLCD_voidCLR();
    4c12:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
	CLCD_voidSendString("Enter ID: ");
    4c16:	88 e6       	ldi	r24, 0x68	; 104
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
	while(1)
	{
		/*Loop to take the user ID from Keypad*/
		for(u8 Local_u8Counter=0;Local_u8Counter<4;Local_u8Counter++)
    4c1e:	fe 01       	movw	r30, r28
    4c20:	e3 57       	subi	r30, 0x73	; 115
    4c22:	ff 4f       	sbci	r31, 0xFF	; 255
    4c24:	10 82       	st	Z, r1
    4c26:	be c0       	rjmp	.+380    	; 0x4da4 <main+0x42c>
		{
			Local_u8PressedKey=KPD_u8GetPressedKey();
    4c28:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    4c2c:	fe 01       	movw	r30, r28
    4c2e:	ec 56       	subi	r30, 0x6C	; 108
    4c30:	ff 4f       	sbci	r31, 0xFF	; 255
    4c32:	80 83       	st	Z, r24
			CLCD_voidSendData(Local_u8PressedKey);
    4c34:	fe 01       	movw	r30, r28
    4c36:	ec 56       	subi	r30, 0x6C	; 108
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	80 81       	ld	r24, Z
    4c3c:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
			/*make the ID as a Number*/
			switch(Local_u8Counter)
    4c40:	fe 01       	movw	r30, r28
    4c42:	e3 57       	subi	r30, 0x73	; 115
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	80 81       	ld	r24, Z
    4c48:	28 2f       	mov	r18, r24
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	ca 54       	subi	r28, 0x4A	; 74
    4c4e:	df 4f       	sbci	r29, 0xFF	; 255
    4c50:	39 83       	std	Y+1, r19	; 0x01
    4c52:	28 83       	st	Y, r18
    4c54:	c6 5b       	subi	r28, 0xB6	; 182
    4c56:	d0 40       	sbci	r29, 0x00	; 0
    4c58:	ca 54       	subi	r28, 0x4A	; 74
    4c5a:	df 4f       	sbci	r29, 0xFF	; 255
    4c5c:	48 81       	ld	r20, Y
    4c5e:	59 81       	ldd	r21, Y+1	; 0x01
    4c60:	c6 5b       	subi	r28, 0xB6	; 182
    4c62:	d0 40       	sbci	r29, 0x00	; 0
    4c64:	41 30       	cpi	r20, 0x01	; 1
    4c66:	51 05       	cpc	r21, r1
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <main+0x2f4>
    4c6a:	40 c0       	rjmp	.+128    	; 0x4cec <main+0x374>
    4c6c:	ca 54       	subi	r28, 0x4A	; 74
    4c6e:	df 4f       	sbci	r29, 0xFF	; 255
    4c70:	88 81       	ld	r24, Y
    4c72:	99 81       	ldd	r25, Y+1	; 0x01
    4c74:	c6 5b       	subi	r28, 0xB6	; 182
    4c76:	d0 40       	sbci	r29, 0x00	; 0
    4c78:	82 30       	cpi	r24, 0x02	; 2
    4c7a:	91 05       	cpc	r25, r1
    4c7c:	4c f4       	brge	.+18     	; 0x4c90 <main+0x318>
    4c7e:	ca 54       	subi	r28, 0x4A	; 74
    4c80:	df 4f       	sbci	r29, 0xFF	; 255
    4c82:	e8 81       	ld	r30, Y
    4c84:	f9 81       	ldd	r31, Y+1	; 0x01
    4c86:	c6 5b       	subi	r28, 0xB6	; 182
    4c88:	d0 40       	sbci	r29, 0x00	; 0
    4c8a:	30 97       	sbiw	r30, 0x00	; 0
    4c8c:	b1 f0       	breq	.+44     	; 0x4cba <main+0x342>
    4c8e:	81 c0       	rjmp	.+258    	; 0x4d92 <main+0x41a>
    4c90:	ca 54       	subi	r28, 0x4A	; 74
    4c92:	df 4f       	sbci	r29, 0xFF	; 255
    4c94:	28 81       	ld	r18, Y
    4c96:	39 81       	ldd	r19, Y+1	; 0x01
    4c98:	c6 5b       	subi	r28, 0xB6	; 182
    4c9a:	d0 40       	sbci	r29, 0x00	; 0
    4c9c:	22 30       	cpi	r18, 0x02	; 2
    4c9e:	31 05       	cpc	r19, r1
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <main+0x32c>
    4ca2:	44 c0       	rjmp	.+136    	; 0x4d2c <main+0x3b4>
    4ca4:	ca 54       	subi	r28, 0x4A	; 74
    4ca6:	df 4f       	sbci	r29, 0xFF	; 255
    4ca8:	48 81       	ld	r20, Y
    4caa:	59 81       	ldd	r21, Y+1	; 0x01
    4cac:	c6 5b       	subi	r28, 0xB6	; 182
    4cae:	d0 40       	sbci	r29, 0x00	; 0
    4cb0:	43 30       	cpi	r20, 0x03	; 3
    4cb2:	51 05       	cpc	r21, r1
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <main+0x340>
    4cb6:	5a c0       	rjmp	.+180    	; 0x4d6c <main+0x3f4>
    4cb8:	6c c0       	rjmp	.+216    	; 0x4d92 <main+0x41a>
			{
			case 0: Local_u16UserName=(Local_u8PressedKey-'0')*1000; break;
    4cba:	fe 01       	movw	r30, r28
    4cbc:	ec 56       	subi	r30, 0x6C	; 108
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	80 81       	ld	r24, Z
    4cc2:	88 2f       	mov	r24, r24
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	9c 01       	movw	r18, r24
    4cc8:	20 53       	subi	r18, 0x30	; 48
    4cca:	30 40       	sbci	r19, 0x00	; 0
    4ccc:	88 ee       	ldi	r24, 0xE8	; 232
    4cce:	93 e0       	ldi	r25, 0x03	; 3
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	2e 9f       	mul	r18, r30
    4cd4:	c0 01       	movw	r24, r0
    4cd6:	2f 9f       	mul	r18, r31
    4cd8:	90 0d       	add	r25, r0
    4cda:	3e 9f       	mul	r19, r30
    4cdc:	90 0d       	add	r25, r0
    4cde:	11 24       	eor	r1, r1
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	ee 56       	subi	r30, 0x6E	; 110
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	91 83       	std	Z+1, r25	; 0x01
    4ce8:	80 83       	st	Z, r24
    4cea:	53 c0       	rjmp	.+166    	; 0x4d92 <main+0x41a>
			case 1: Local_u16UserName+=(Local_u8PressedKey-'0')*100; break;
    4cec:	fe 01       	movw	r30, r28
    4cee:	ec 56       	subi	r30, 0x6C	; 108
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	80 81       	ld	r24, Z
    4cf4:	28 2f       	mov	r18, r24
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	84 e6       	ldi	r24, 0x64	; 100
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	ac 01       	movw	r20, r24
    4cfe:	24 9f       	mul	r18, r20
    4d00:	c0 01       	movw	r24, r0
    4d02:	25 9f       	mul	r18, r21
    4d04:	90 0d       	add	r25, r0
    4d06:	34 9f       	mul	r19, r20
    4d08:	90 0d       	add	r25, r0
    4d0a:	11 24       	eor	r1, r1
    4d0c:	9c 01       	movw	r18, r24
    4d0e:	fe 01       	movw	r30, r28
    4d10:	ee 56       	subi	r30, 0x6E	; 110
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	80 81       	ld	r24, Z
    4d16:	91 81       	ldd	r25, Z+1	; 0x01
    4d18:	82 0f       	add	r24, r18
    4d1a:	93 1f       	adc	r25, r19
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	ee 56       	subi	r30, 0x6E	; 110
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	80 5c       	subi	r24, 0xC0	; 192
    4d24:	92 41       	sbci	r25, 0x12	; 18
    4d26:	91 83       	std	Z+1, r25	; 0x01
    4d28:	80 83       	st	Z, r24
    4d2a:	33 c0       	rjmp	.+102    	; 0x4d92 <main+0x41a>
			case 2: Local_u16UserName+=(Local_u8PressedKey-'0')*10; break;
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	ec 56       	subi	r30, 0x6C	; 108
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	88 2f       	mov	r24, r24
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	9c 01       	movw	r18, r24
    4d3a:	22 0f       	add	r18, r18
    4d3c:	33 1f       	adc	r19, r19
    4d3e:	c9 01       	movw	r24, r18
    4d40:	88 0f       	add	r24, r24
    4d42:	99 1f       	adc	r25, r25
    4d44:	88 0f       	add	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	82 0f       	add	r24, r18
    4d4a:	93 1f       	adc	r25, r19
    4d4c:	9c 01       	movw	r18, r24
    4d4e:	fe 01       	movw	r30, r28
    4d50:	ee 56       	subi	r30, 0x6E	; 110
    4d52:	ff 4f       	sbci	r31, 0xFF	; 255
    4d54:	80 81       	ld	r24, Z
    4d56:	91 81       	ldd	r25, Z+1	; 0x01
    4d58:	82 0f       	add	r24, r18
    4d5a:	93 1f       	adc	r25, r19
    4d5c:	fe 01       	movw	r30, r28
    4d5e:	ee 56       	subi	r30, 0x6E	; 110
    4d60:	ff 4f       	sbci	r31, 0xFF	; 255
    4d62:	80 5e       	subi	r24, 0xE0	; 224
    4d64:	91 40       	sbci	r25, 0x01	; 1
    4d66:	91 83       	std	Z+1, r25	; 0x01
    4d68:	80 83       	st	Z, r24
    4d6a:	13 c0       	rjmp	.+38     	; 0x4d92 <main+0x41a>
			case 3: Local_u16UserName+=(Local_u8PressedKey-'0'); break;
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	ec 56       	subi	r30, 0x6C	; 108
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	80 81       	ld	r24, Z
    4d74:	28 2f       	mov	r18, r24
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	fe 01       	movw	r30, r28
    4d7a:	ee 56       	subi	r30, 0x6E	; 110
    4d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7e:	80 81       	ld	r24, Z
    4d80:	91 81       	ldd	r25, Z+1	; 0x01
    4d82:	82 0f       	add	r24, r18
    4d84:	93 1f       	adc	r25, r19
    4d86:	fe 01       	movw	r30, r28
    4d88:	ee 56       	subi	r30, 0x6E	; 110
    4d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8c:	c0 97       	sbiw	r24, 0x30	; 48
    4d8e:	91 83       	std	Z+1, r25	; 0x01
    4d90:	80 83       	st	Z, r24
	CLCD_voidCLR();
	CLCD_voidSendString("Enter ID: ");
	while(1)
	{
		/*Loop to take the user ID from Keypad*/
		for(u8 Local_u8Counter=0;Local_u8Counter<4;Local_u8Counter++)
    4d92:	de 01       	movw	r26, r28
    4d94:	a3 57       	subi	r26, 0x73	; 115
    4d96:	bf 4f       	sbci	r27, 0xFF	; 255
    4d98:	fe 01       	movw	r30, r28
    4d9a:	e3 57       	subi	r30, 0x73	; 115
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	80 81       	ld	r24, Z
    4da0:	8f 5f       	subi	r24, 0xFF	; 255
    4da2:	8c 93       	st	X, r24
    4da4:	fe 01       	movw	r30, r28
    4da6:	e3 57       	subi	r30, 0x73	; 115
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	80 81       	ld	r24, Z
    4dac:	84 30       	cpi	r24, 0x04	; 4
    4dae:	08 f4       	brcc	.+2      	; 0x4db2 <main+0x43a>
    4db0:	3b cf       	rjmp	.-394    	; 0x4c28 <main+0x2b0>
    4db2:	fe 01       	movw	r30, r28
    4db4:	e5 58       	subi	r30, 0x85	; 133
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	aa e7       	ldi	r26, 0x7A	; 122
    4dbe:	b3 e4       	ldi	r27, 0x43	; 67
    4dc0:	80 83       	st	Z, r24
    4dc2:	91 83       	std	Z+1, r25	; 0x01
    4dc4:	a2 83       	std	Z+2, r26	; 0x02
    4dc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc8:	8e 01       	movw	r16, r28
    4dca:	09 58       	subi	r16, 0x89	; 137
    4dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    4dce:	fe 01       	movw	r30, r28
    4dd0:	e5 58       	subi	r30, 0x85	; 133
    4dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd4:	60 81       	ld	r22, Z
    4dd6:	71 81       	ldd	r23, Z+1	; 0x01
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	93 81       	ldd	r25, Z+3	; 0x03
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	4a ef       	ldi	r20, 0xFA	; 250
    4de2:	54 e4       	ldi	r21, 0x44	; 68
    4de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	f8 01       	movw	r30, r16
    4dee:	80 83       	st	Z, r24
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	a2 83       	std	Z+2, r26	; 0x02
    4df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4df6:	fe 01       	movw	r30, r28
    4df8:	e9 58       	subi	r30, 0x89	; 137
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	60 81       	ld	r22, Z
    4dfe:	71 81       	ldd	r23, Z+1	; 0x01
    4e00:	82 81       	ldd	r24, Z+2	; 0x02
    4e02:	93 81       	ldd	r25, Z+3	; 0x03
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	40 e8       	ldi	r20, 0x80	; 128
    4e0a:	5f e3       	ldi	r21, 0x3F	; 63
    4e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e10:	88 23       	and	r24, r24
    4e12:	44 f4       	brge	.+16     	; 0x4e24 <main+0x4ac>
		__ticks = 1;
    4e14:	fe 01       	movw	r30, r28
    4e16:	eb 58       	subi	r30, 0x8B	; 139
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	80 83       	st	Z, r24
    4e22:	64 c0       	rjmp	.+200    	; 0x4eec <main+0x574>
	else if (__tmp > 65535)
    4e24:	fe 01       	movw	r30, r28
    4e26:	e9 58       	subi	r30, 0x89	; 137
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	60 81       	ld	r22, Z
    4e2c:	71 81       	ldd	r23, Z+1	; 0x01
    4e2e:	82 81       	ldd	r24, Z+2	; 0x02
    4e30:	93 81       	ldd	r25, Z+3	; 0x03
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	3f ef       	ldi	r19, 0xFF	; 255
    4e36:	4f e7       	ldi	r20, 0x7F	; 127
    4e38:	57 e4       	ldi	r21, 0x47	; 71
    4e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e3e:	18 16       	cp	r1, r24
    4e40:	0c f0       	brlt	.+2      	; 0x4e44 <main+0x4cc>
    4e42:	43 c0       	rjmp	.+134    	; 0x4eca <main+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e44:	fe 01       	movw	r30, r28
    4e46:	e5 58       	subi	r30, 0x85	; 133
    4e48:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e2       	ldi	r20, 0x20	; 32
    4e58:	51 e4       	ldi	r21, 0x41	; 65
    4e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	8e 01       	movw	r16, r28
    4e64:	0b 58       	subi	r16, 0x8B	; 139
    4e66:	1f 4f       	sbci	r17, 0xFF	; 255
    4e68:	bc 01       	movw	r22, r24
    4e6a:	cd 01       	movw	r24, r26
    4e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	f8 01       	movw	r30, r16
    4e76:	91 83       	std	Z+1, r25	; 0x01
    4e78:	80 83       	st	Z, r24
    4e7a:	1f c0       	rjmp	.+62     	; 0x4eba <main+0x542>
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	ed 58       	subi	r30, 0x8D	; 141
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	88 ec       	ldi	r24, 0xC8	; 200
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	91 83       	std	Z+1, r25	; 0x01
    4e88:	80 83       	st	Z, r24
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	ed 58       	subi	r30, 0x8D	; 141
    4e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e90:	80 81       	ld	r24, Z
    4e92:	91 81       	ldd	r25, Z+1	; 0x01
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	f1 f7       	brne	.-4      	; 0x4e94 <main+0x51c>
    4e98:	fe 01       	movw	r30, r28
    4e9a:	ed 58       	subi	r30, 0x8D	; 141
    4e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ea2:	de 01       	movw	r26, r28
    4ea4:	ab 58       	subi	r26, 0x8B	; 139
    4ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	eb 58       	subi	r30, 0x8B	; 139
    4eac:	ff 4f       	sbci	r31, 0xFF	; 255
    4eae:	80 81       	ld	r24, Z
    4eb0:	91 81       	ldd	r25, Z+1	; 0x01
    4eb2:	01 97       	sbiw	r24, 0x01	; 1
    4eb4:	11 96       	adiw	r26, 0x01	; 1
    4eb6:	9c 93       	st	X, r25
    4eb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eba:	fe 01       	movw	r30, r28
    4ebc:	eb 58       	subi	r30, 0x8B	; 139
    4ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec0:	80 81       	ld	r24, Z
    4ec2:	91 81       	ldd	r25, Z+1	; 0x01
    4ec4:	00 97       	sbiw	r24, 0x00	; 0
    4ec6:	d1 f6       	brne	.-76     	; 0x4e7c <main+0x504>
    4ec8:	27 c0       	rjmp	.+78     	; 0x4f18 <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eca:	8e 01       	movw	r16, r28
    4ecc:	0b 58       	subi	r16, 0x8B	; 139
    4ece:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	e9 58       	subi	r30, 0x89	; 137
    4ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed6:	60 81       	ld	r22, Z
    4ed8:	71 81       	ldd	r23, Z+1	; 0x01
    4eda:	82 81       	ldd	r24, Z+2	; 0x02
    4edc:	93 81       	ldd	r25, Z+3	; 0x03
    4ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	f8 01       	movw	r30, r16
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	80 83       	st	Z, r24
    4eec:	de 01       	movw	r26, r28
    4eee:	af 58       	subi	r26, 0x8F	; 143
    4ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	eb 58       	subi	r30, 0x8B	; 139
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	91 81       	ldd	r25, Z+1	; 0x01
    4efc:	8d 93       	st	X+, r24
    4efe:	9c 93       	st	X, r25
    4f00:	fe 01       	movw	r30, r28
    4f02:	ef 58       	subi	r30, 0x8F	; 143
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 81       	ld	r24, Z
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	f1 f7       	brne	.-4      	; 0x4f0a <main+0x592>
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ef 58       	subi	r30, 0x8F	; 143
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	80 83       	st	Z, r24
			case 2: Local_u16UserName+=(Local_u8PressedKey-'0')*10; break;
			case 3: Local_u16UserName+=(Local_u8PressedKey-'0'); break;
			}
		}
		_delay_ms(250);
		CLCD_voidCLR();
    4f18:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
		CLCD_voidSendString("Password: ");
    4f1c:	83 e7       	ldi	r24, 0x73	; 115
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
		/*Loop to take the user Password from Keypad*/
		for(Local_u8TrailesCounter=0;Local_u8TrailesCounter<3;Local_u8TrailesCounter++)
    4f24:	fe 01       	movw	r30, r28
    4f26:	eb 56       	subi	r30, 0x6B	; 107
    4f28:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2a:	10 82       	st	Z, r1
    4f2c:	2c c3       	rjmp	.+1624   	; 0x5586 <main+0xc0e>
		{
			for(Local_u8Counter=0;Local_u8Counter<4;Local_u8Counter++)
    4f2e:	fe 01       	movw	r30, r28
    4f30:	ea 56       	subi	r30, 0x6A	; 106
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	10 82       	st	Z, r1
    4f36:	be c0       	rjmp	.+380    	; 0x50b4 <main+0x73c>
			{
				Local_u8PressedKey=KPD_u8GetPressedKey();
    4f38:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	ec 56       	subi	r30, 0x6C	; 108
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	80 83       	st	Z, r24
				CLCD_voidSendData(Local_u8PressedKey);
    4f44:	fe 01       	movw	r30, r28
    4f46:	ec 56       	subi	r30, 0x6C	; 108
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	80 81       	ld	r24, Z
    4f4c:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
				switch(Local_u8Counter)
    4f50:	fe 01       	movw	r30, r28
    4f52:	ea 56       	subi	r30, 0x6A	; 106
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	80 81       	ld	r24, Z
    4f58:	28 2f       	mov	r18, r24
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	cc 54       	subi	r28, 0x4C	; 76
    4f5e:	df 4f       	sbci	r29, 0xFF	; 255
    4f60:	39 83       	std	Y+1, r19	; 0x01
    4f62:	28 83       	st	Y, r18
    4f64:	c4 5b       	subi	r28, 0xB4	; 180
    4f66:	d0 40       	sbci	r29, 0x00	; 0
    4f68:	cc 54       	subi	r28, 0x4C	; 76
    4f6a:	df 4f       	sbci	r29, 0xFF	; 255
    4f6c:	48 81       	ld	r20, Y
    4f6e:	59 81       	ldd	r21, Y+1	; 0x01
    4f70:	c4 5b       	subi	r28, 0xB4	; 180
    4f72:	d0 40       	sbci	r29, 0x00	; 0
    4f74:	41 30       	cpi	r20, 0x01	; 1
    4f76:	51 05       	cpc	r21, r1
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <main+0x604>
    4f7a:	40 c0       	rjmp	.+128    	; 0x4ffc <main+0x684>
    4f7c:	cc 54       	subi	r28, 0x4C	; 76
    4f7e:	df 4f       	sbci	r29, 0xFF	; 255
    4f80:	88 81       	ld	r24, Y
    4f82:	99 81       	ldd	r25, Y+1	; 0x01
    4f84:	c4 5b       	subi	r28, 0xB4	; 180
    4f86:	d0 40       	sbci	r29, 0x00	; 0
    4f88:	82 30       	cpi	r24, 0x02	; 2
    4f8a:	91 05       	cpc	r25, r1
    4f8c:	4c f4       	brge	.+18     	; 0x4fa0 <main+0x628>
    4f8e:	cc 54       	subi	r28, 0x4C	; 76
    4f90:	df 4f       	sbci	r29, 0xFF	; 255
    4f92:	e8 81       	ld	r30, Y
    4f94:	f9 81       	ldd	r31, Y+1	; 0x01
    4f96:	c4 5b       	subi	r28, 0xB4	; 180
    4f98:	d0 40       	sbci	r29, 0x00	; 0
    4f9a:	30 97       	sbiw	r30, 0x00	; 0
    4f9c:	b1 f0       	breq	.+44     	; 0x4fca <main+0x652>
    4f9e:	81 c0       	rjmp	.+258    	; 0x50a2 <main+0x72a>
    4fa0:	cc 54       	subi	r28, 0x4C	; 76
    4fa2:	df 4f       	sbci	r29, 0xFF	; 255
    4fa4:	28 81       	ld	r18, Y
    4fa6:	39 81       	ldd	r19, Y+1	; 0x01
    4fa8:	c4 5b       	subi	r28, 0xB4	; 180
    4faa:	d0 40       	sbci	r29, 0x00	; 0
    4fac:	22 30       	cpi	r18, 0x02	; 2
    4fae:	31 05       	cpc	r19, r1
    4fb0:	09 f4       	brne	.+2      	; 0x4fb4 <main+0x63c>
    4fb2:	44 c0       	rjmp	.+136    	; 0x503c <main+0x6c4>
    4fb4:	cc 54       	subi	r28, 0x4C	; 76
    4fb6:	df 4f       	sbci	r29, 0xFF	; 255
    4fb8:	48 81       	ld	r20, Y
    4fba:	59 81       	ldd	r21, Y+1	; 0x01
    4fbc:	c4 5b       	subi	r28, 0xB4	; 180
    4fbe:	d0 40       	sbci	r29, 0x00	; 0
    4fc0:	43 30       	cpi	r20, 0x03	; 3
    4fc2:	51 05       	cpc	r21, r1
    4fc4:	09 f4       	brne	.+2      	; 0x4fc8 <main+0x650>
    4fc6:	5a c0       	rjmp	.+180    	; 0x507c <main+0x704>
    4fc8:	6c c0       	rjmp	.+216    	; 0x50a2 <main+0x72a>
				{
				case 0: Local_u16EnteredPassword=(Local_u8PressedKey-'0')*1000; break;
    4fca:	fe 01       	movw	r30, r28
    4fcc:	ec 56       	subi	r30, 0x6C	; 108
    4fce:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd0:	80 81       	ld	r24, Z
    4fd2:	88 2f       	mov	r24, r24
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	9c 01       	movw	r18, r24
    4fd8:	20 53       	subi	r18, 0x30	; 48
    4fda:	30 40       	sbci	r19, 0x00	; 0
    4fdc:	88 ee       	ldi	r24, 0xE8	; 232
    4fde:	93 e0       	ldi	r25, 0x03	; 3
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	2e 9f       	mul	r18, r30
    4fe4:	c0 01       	movw	r24, r0
    4fe6:	2f 9f       	mul	r18, r31
    4fe8:	90 0d       	add	r25, r0
    4fea:	3e 9f       	mul	r19, r30
    4fec:	90 0d       	add	r25, r0
    4fee:	11 24       	eor	r1, r1
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	e0 57       	subi	r30, 0x70	; 112
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	91 83       	std	Z+1, r25	; 0x01
    4ff8:	80 83       	st	Z, r24
    4ffa:	53 c0       	rjmp	.+166    	; 0x50a2 <main+0x72a>
				case 1: Local_u16EnteredPassword+=(Local_u8PressedKey-'0')*100; break;
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	ec 56       	subi	r30, 0x6C	; 108
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	80 81       	ld	r24, Z
    5004:	28 2f       	mov	r18, r24
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	84 e6       	ldi	r24, 0x64	; 100
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	ac 01       	movw	r20, r24
    500e:	24 9f       	mul	r18, r20
    5010:	c0 01       	movw	r24, r0
    5012:	25 9f       	mul	r18, r21
    5014:	90 0d       	add	r25, r0
    5016:	34 9f       	mul	r19, r20
    5018:	90 0d       	add	r25, r0
    501a:	11 24       	eor	r1, r1
    501c:	9c 01       	movw	r18, r24
    501e:	fe 01       	movw	r30, r28
    5020:	e0 57       	subi	r30, 0x70	; 112
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	80 81       	ld	r24, Z
    5026:	91 81       	ldd	r25, Z+1	; 0x01
    5028:	82 0f       	add	r24, r18
    502a:	93 1f       	adc	r25, r19
    502c:	fe 01       	movw	r30, r28
    502e:	e0 57       	subi	r30, 0x70	; 112
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 5c       	subi	r24, 0xC0	; 192
    5034:	92 41       	sbci	r25, 0x12	; 18
    5036:	91 83       	std	Z+1, r25	; 0x01
    5038:	80 83       	st	Z, r24
    503a:	33 c0       	rjmp	.+102    	; 0x50a2 <main+0x72a>
				case 2: Local_u16EnteredPassword+=(Local_u8PressedKey-'0')*10; break;
    503c:	fe 01       	movw	r30, r28
    503e:	ec 56       	subi	r30, 0x6C	; 108
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	80 81       	ld	r24, Z
    5044:	88 2f       	mov	r24, r24
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	9c 01       	movw	r18, r24
    504a:	22 0f       	add	r18, r18
    504c:	33 1f       	adc	r19, r19
    504e:	c9 01       	movw	r24, r18
    5050:	88 0f       	add	r24, r24
    5052:	99 1f       	adc	r25, r25
    5054:	88 0f       	add	r24, r24
    5056:	99 1f       	adc	r25, r25
    5058:	82 0f       	add	r24, r18
    505a:	93 1f       	adc	r25, r19
    505c:	9c 01       	movw	r18, r24
    505e:	fe 01       	movw	r30, r28
    5060:	e0 57       	subi	r30, 0x70	; 112
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	80 81       	ld	r24, Z
    5066:	91 81       	ldd	r25, Z+1	; 0x01
    5068:	82 0f       	add	r24, r18
    506a:	93 1f       	adc	r25, r19
    506c:	fe 01       	movw	r30, r28
    506e:	e0 57       	subi	r30, 0x70	; 112
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	80 5e       	subi	r24, 0xE0	; 224
    5074:	91 40       	sbci	r25, 0x01	; 1
    5076:	91 83       	std	Z+1, r25	; 0x01
    5078:	80 83       	st	Z, r24
    507a:	13 c0       	rjmp	.+38     	; 0x50a2 <main+0x72a>
				case 3: Local_u16EnteredPassword+=(Local_u8PressedKey-'0'); break;
    507c:	fe 01       	movw	r30, r28
    507e:	ec 56       	subi	r30, 0x6C	; 108
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	80 81       	ld	r24, Z
    5084:	28 2f       	mov	r18, r24
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	fe 01       	movw	r30, r28
    508a:	e0 57       	subi	r30, 0x70	; 112
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	80 81       	ld	r24, Z
    5090:	91 81       	ldd	r25, Z+1	; 0x01
    5092:	82 0f       	add	r24, r18
    5094:	93 1f       	adc	r25, r19
    5096:	fe 01       	movw	r30, r28
    5098:	e0 57       	subi	r30, 0x70	; 112
    509a:	ff 4f       	sbci	r31, 0xFF	; 255
    509c:	c0 97       	sbiw	r24, 0x30	; 48
    509e:	91 83       	std	Z+1, r25	; 0x01
    50a0:	80 83       	st	Z, r24
		CLCD_voidCLR();
		CLCD_voidSendString("Password: ");
		/*Loop to take the user Password from Keypad*/
		for(Local_u8TrailesCounter=0;Local_u8TrailesCounter<3;Local_u8TrailesCounter++)
		{
			for(Local_u8Counter=0;Local_u8Counter<4;Local_u8Counter++)
    50a2:	de 01       	movw	r26, r28
    50a4:	aa 56       	subi	r26, 0x6A	; 106
    50a6:	bf 4f       	sbci	r27, 0xFF	; 255
    50a8:	fe 01       	movw	r30, r28
    50aa:	ea 56       	subi	r30, 0x6A	; 106
    50ac:	ff 4f       	sbci	r31, 0xFF	; 255
    50ae:	80 81       	ld	r24, Z
    50b0:	8f 5f       	subi	r24, 0xFF	; 255
    50b2:	8c 93       	st	X, r24
    50b4:	fe 01       	movw	r30, r28
    50b6:	ea 56       	subi	r30, 0x6A	; 106
    50b8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ba:	80 81       	ld	r24, Z
    50bc:	84 30       	cpi	r24, 0x04	; 4
    50be:	08 f4       	brcc	.+2      	; 0x50c2 <main+0x74a>
    50c0:	3b cf       	rjmp	.-394    	; 0x4f38 <main+0x5c0>
				case 2: Local_u16EnteredPassword+=(Local_u8PressedKey-'0')*10; break;
				case 3: Local_u16EnteredPassword+=(Local_u8PressedKey-'0'); break;
				}
			}
			/*The Password is the ID inverted*/
			Local_u16CorrectPassword=App_u16InvertNumber(Local_u16UserName);
    50c2:	fe 01       	movw	r30, r28
    50c4:	ee 56       	subi	r30, 0x6E	; 110
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	0e 94 03 30 	call	0x6006	; 0x6006 <App_u16InvertNumber>
    50d0:	fe 01       	movw	r30, r28
    50d2:	e2 57       	subi	r30, 0x72	; 114
    50d4:	ff 4f       	sbci	r31, 0xFF	; 255
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24
			if(Local_u16EnteredPassword==Local_u16CorrectPassword)
    50da:	fe 01       	movw	r30, r28
    50dc:	e0 57       	subi	r30, 0x70	; 112
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	de 01       	movw	r26, r28
    50e2:	a2 57       	subi	r26, 0x72	; 114
    50e4:	bf 4f       	sbci	r27, 0xFF	; 255
    50e6:	20 81       	ld	r18, Z
    50e8:	31 81       	ldd	r19, Z+1	; 0x01
    50ea:	8d 91       	ld	r24, X+
    50ec:	9c 91       	ld	r25, X
    50ee:	11 97       	sbiw	r26, 0x01	; 1
    50f0:	28 17       	cp	r18, r24
    50f2:	39 07       	cpc	r19, r25
    50f4:	09 f0       	breq	.+2      	; 0x50f8 <main+0x780>
    50f6:	85 c1       	rjmp	.+778    	; 0x5402 <main+0xa8a>
    50f8:	fe 01       	movw	r30, r28
    50fa:	e3 59       	subi	r30, 0x93	; 147
    50fc:	ff 4f       	sbci	r31, 0xFF	; 255
    50fe:	80 e0       	ldi	r24, 0x00	; 0
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	aa e7       	ldi	r26, 0x7A	; 122
    5104:	b3 e4       	ldi	r27, 0x43	; 67
    5106:	80 83       	st	Z, r24
    5108:	91 83       	std	Z+1, r25	; 0x01
    510a:	a2 83       	std	Z+2, r26	; 0x02
    510c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    510e:	8e 01       	movw	r16, r28
    5110:	07 59       	subi	r16, 0x97	; 151
    5112:	1f 4f       	sbci	r17, 0xFF	; 255
    5114:	fe 01       	movw	r30, r28
    5116:	e3 59       	subi	r30, 0x93	; 147
    5118:	ff 4f       	sbci	r31, 0xFF	; 255
    511a:	60 81       	ld	r22, Z
    511c:	71 81       	ldd	r23, Z+1	; 0x01
    511e:	82 81       	ldd	r24, Z+2	; 0x02
    5120:	93 81       	ldd	r25, Z+3	; 0x03
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	4a ef       	ldi	r20, 0xFA	; 250
    5128:	54 e4       	ldi	r21, 0x44	; 68
    512a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512e:	dc 01       	movw	r26, r24
    5130:	cb 01       	movw	r24, r22
    5132:	f8 01       	movw	r30, r16
    5134:	80 83       	st	Z, r24
    5136:	91 83       	std	Z+1, r25	; 0x01
    5138:	a2 83       	std	Z+2, r26	; 0x02
    513a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    513c:	fe 01       	movw	r30, r28
    513e:	e7 59       	subi	r30, 0x97	; 151
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	60 81       	ld	r22, Z
    5144:	71 81       	ldd	r23, Z+1	; 0x01
    5146:	82 81       	ldd	r24, Z+2	; 0x02
    5148:	93 81       	ldd	r25, Z+3	; 0x03
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	40 e8       	ldi	r20, 0x80	; 128
    5150:	5f e3       	ldi	r21, 0x3F	; 63
    5152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5156:	88 23       	and	r24, r24
    5158:	44 f4       	brge	.+16     	; 0x516a <main+0x7f2>
		__ticks = 1;
    515a:	fe 01       	movw	r30, r28
    515c:	e9 59       	subi	r30, 0x99	; 153
    515e:	ff 4f       	sbci	r31, 0xFF	; 255
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	91 83       	std	Z+1, r25	; 0x01
    5166:	80 83       	st	Z, r24
    5168:	64 c0       	rjmp	.+200    	; 0x5232 <main+0x8ba>
	else if (__tmp > 65535)
    516a:	fe 01       	movw	r30, r28
    516c:	e7 59       	subi	r30, 0x97	; 151
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	60 81       	ld	r22, Z
    5172:	71 81       	ldd	r23, Z+1	; 0x01
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	93 81       	ldd	r25, Z+3	; 0x03
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	3f ef       	ldi	r19, 0xFF	; 255
    517c:	4f e7       	ldi	r20, 0x7F	; 127
    517e:	57 e4       	ldi	r21, 0x47	; 71
    5180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5184:	18 16       	cp	r1, r24
    5186:	0c f0       	brlt	.+2      	; 0x518a <main+0x812>
    5188:	43 c0       	rjmp	.+134    	; 0x5210 <main+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    518a:	fe 01       	movw	r30, r28
    518c:	e3 59       	subi	r30, 0x93	; 147
    518e:	ff 4f       	sbci	r31, 0xFF	; 255
    5190:	60 81       	ld	r22, Z
    5192:	71 81       	ldd	r23, Z+1	; 0x01
    5194:	82 81       	ldd	r24, Z+2	; 0x02
    5196:	93 81       	ldd	r25, Z+3	; 0x03
    5198:	20 e0       	ldi	r18, 0x00	; 0
    519a:	30 e0       	ldi	r19, 0x00	; 0
    519c:	40 e2       	ldi	r20, 0x20	; 32
    519e:	51 e4       	ldi	r21, 0x41	; 65
    51a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a4:	dc 01       	movw	r26, r24
    51a6:	cb 01       	movw	r24, r22
    51a8:	8e 01       	movw	r16, r28
    51aa:	09 59       	subi	r16, 0x99	; 153
    51ac:	1f 4f       	sbci	r17, 0xFF	; 255
    51ae:	bc 01       	movw	r22, r24
    51b0:	cd 01       	movw	r24, r26
    51b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b6:	dc 01       	movw	r26, r24
    51b8:	cb 01       	movw	r24, r22
    51ba:	f8 01       	movw	r30, r16
    51bc:	91 83       	std	Z+1, r25	; 0x01
    51be:	80 83       	st	Z, r24
    51c0:	1f c0       	rjmp	.+62     	; 0x5200 <main+0x888>
    51c2:	fe 01       	movw	r30, r28
    51c4:	eb 59       	subi	r30, 0x9B	; 155
    51c6:	ff 4f       	sbci	r31, 0xFF	; 255
    51c8:	88 ec       	ldi	r24, 0xC8	; 200
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	91 83       	std	Z+1, r25	; 0x01
    51ce:	80 83       	st	Z, r24
    51d0:	fe 01       	movw	r30, r28
    51d2:	eb 59       	subi	r30, 0x9B	; 155
    51d4:	ff 4f       	sbci	r31, 0xFF	; 255
    51d6:	80 81       	ld	r24, Z
    51d8:	91 81       	ldd	r25, Z+1	; 0x01
    51da:	01 97       	sbiw	r24, 0x01	; 1
    51dc:	f1 f7       	brne	.-4      	; 0x51da <main+0x862>
    51de:	fe 01       	movw	r30, r28
    51e0:	eb 59       	subi	r30, 0x9B	; 155
    51e2:	ff 4f       	sbci	r31, 0xFF	; 255
    51e4:	91 83       	std	Z+1, r25	; 0x01
    51e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e8:	de 01       	movw	r26, r28
    51ea:	a9 59       	subi	r26, 0x99	; 153
    51ec:	bf 4f       	sbci	r27, 0xFF	; 255
    51ee:	fe 01       	movw	r30, r28
    51f0:	e9 59       	subi	r30, 0x99	; 153
    51f2:	ff 4f       	sbci	r31, 0xFF	; 255
    51f4:	80 81       	ld	r24, Z
    51f6:	91 81       	ldd	r25, Z+1	; 0x01
    51f8:	01 97       	sbiw	r24, 0x01	; 1
    51fa:	11 96       	adiw	r26, 0x01	; 1
    51fc:	9c 93       	st	X, r25
    51fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5200:	fe 01       	movw	r30, r28
    5202:	e9 59       	subi	r30, 0x99	; 153
    5204:	ff 4f       	sbci	r31, 0xFF	; 255
    5206:	80 81       	ld	r24, Z
    5208:	91 81       	ldd	r25, Z+1	; 0x01
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	d1 f6       	brne	.-76     	; 0x51c2 <main+0x84a>
    520e:	27 c0       	rjmp	.+78     	; 0x525e <main+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5210:	8e 01       	movw	r16, r28
    5212:	09 59       	subi	r16, 0x99	; 153
    5214:	1f 4f       	sbci	r17, 0xFF	; 255
    5216:	fe 01       	movw	r30, r28
    5218:	e7 59       	subi	r30, 0x97	; 151
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	60 81       	ld	r22, Z
    521e:	71 81       	ldd	r23, Z+1	; 0x01
    5220:	82 81       	ldd	r24, Z+2	; 0x02
    5222:	93 81       	ldd	r25, Z+3	; 0x03
    5224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5228:	dc 01       	movw	r26, r24
    522a:	cb 01       	movw	r24, r22
    522c:	f8 01       	movw	r30, r16
    522e:	91 83       	std	Z+1, r25	; 0x01
    5230:	80 83       	st	Z, r24
    5232:	de 01       	movw	r26, r28
    5234:	ad 59       	subi	r26, 0x9D	; 157
    5236:	bf 4f       	sbci	r27, 0xFF	; 255
    5238:	fe 01       	movw	r30, r28
    523a:	e9 59       	subi	r30, 0x99	; 153
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	80 81       	ld	r24, Z
    5240:	91 81       	ldd	r25, Z+1	; 0x01
    5242:	8d 93       	st	X+, r24
    5244:	9c 93       	st	X, r25
    5246:	fe 01       	movw	r30, r28
    5248:	ed 59       	subi	r30, 0x9D	; 157
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	80 81       	ld	r24, Z
    524e:	91 81       	ldd	r25, Z+1	; 0x01
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	f1 f7       	brne	.-4      	; 0x5250 <main+0x8d8>
    5254:	fe 01       	movw	r30, r28
    5256:	ed 59       	subi	r30, 0x9D	; 157
    5258:	ff 4f       	sbci	r31, 0xFF	; 255
    525a:	91 83       	std	Z+1, r25	; 0x01
    525c:	80 83       	st	Z, r24
			{
				_delay_ms(250);
				CLCD_voidCLR();
    525e:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("welcome to Motor");
    5262:	8e e7       	ldi	r24, 0x7E	; 126
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	60 e0       	ldi	r22, 0x00	; 0
    526e:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
				CLCD_voidSendString("Dash Board ");
    5272:	8f e8       	ldi	r24, 0x8F	; 143
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				CLCD_void_SendNumber(Local_ps8Buffer,Local_u16UserName);
    527a:	fe 01       	movw	r30, r28
    527c:	ee 56       	subi	r30, 0x6E	; 110
    527e:	ff 4f       	sbci	r31, 0xFF	; 255
    5280:	80 81       	ld	r24, Z
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	9c 01       	movw	r18, r24
    5286:	40 e0       	ldi	r20, 0x00	; 0
    5288:	50 e0       	ldi	r21, 0x00	; 0
    528a:	ce 01       	movw	r24, r28
    528c:	80 56       	subi	r24, 0x60	; 96
    528e:	9f 4f       	sbci	r25, 0xFF	; 255
    5290:	ba 01       	movw	r22, r20
    5292:	a9 01       	movw	r20, r18
    5294:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <CLCD_void_SendNumber>
    5298:	fe 01       	movw	r30, r28
    529a:	e1 5a       	subi	r30, 0xA1	; 161
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	aa e7       	ldi	r26, 0x7A	; 122
    52a4:	b4 e4       	ldi	r27, 0x44	; 68
    52a6:	80 83       	st	Z, r24
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	a2 83       	std	Z+2, r26	; 0x02
    52ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ae:	8e 01       	movw	r16, r28
    52b0:	05 5a       	subi	r16, 0xA5	; 165
    52b2:	1f 4f       	sbci	r17, 0xFF	; 255
    52b4:	fe 01       	movw	r30, r28
    52b6:	e1 5a       	subi	r30, 0xA1	; 161
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	60 81       	ld	r22, Z
    52bc:	71 81       	ldd	r23, Z+1	; 0x01
    52be:	82 81       	ldd	r24, Z+2	; 0x02
    52c0:	93 81       	ldd	r25, Z+3	; 0x03
    52c2:	20 e0       	ldi	r18, 0x00	; 0
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	4a ef       	ldi	r20, 0xFA	; 250
    52c8:	54 e4       	ldi	r21, 0x44	; 68
    52ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ce:	dc 01       	movw	r26, r24
    52d0:	cb 01       	movw	r24, r22
    52d2:	f8 01       	movw	r30, r16
    52d4:	80 83       	st	Z, r24
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	a2 83       	std	Z+2, r26	; 0x02
    52da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52dc:	fe 01       	movw	r30, r28
    52de:	e5 5a       	subi	r30, 0xA5	; 165
    52e0:	ff 4f       	sbci	r31, 0xFF	; 255
    52e2:	60 81       	ld	r22, Z
    52e4:	71 81       	ldd	r23, Z+1	; 0x01
    52e6:	82 81       	ldd	r24, Z+2	; 0x02
    52e8:	93 81       	ldd	r25, Z+3	; 0x03
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	40 e8       	ldi	r20, 0x80	; 128
    52f0:	5f e3       	ldi	r21, 0x3F	; 63
    52f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52f6:	88 23       	and	r24, r24
    52f8:	44 f4       	brge	.+16     	; 0x530a <main+0x992>
		__ticks = 1;
    52fa:	fe 01       	movw	r30, r28
    52fc:	e7 5a       	subi	r30, 0xA7	; 167
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	91 83       	std	Z+1, r25	; 0x01
    5306:	80 83       	st	Z, r24
    5308:	64 c0       	rjmp	.+200    	; 0x53d2 <main+0xa5a>
	else if (__tmp > 65535)
    530a:	fe 01       	movw	r30, r28
    530c:	e5 5a       	subi	r30, 0xA5	; 165
    530e:	ff 4f       	sbci	r31, 0xFF	; 255
    5310:	60 81       	ld	r22, Z
    5312:	71 81       	ldd	r23, Z+1	; 0x01
    5314:	82 81       	ldd	r24, Z+2	; 0x02
    5316:	93 81       	ldd	r25, Z+3	; 0x03
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	3f ef       	ldi	r19, 0xFF	; 255
    531c:	4f e7       	ldi	r20, 0x7F	; 127
    531e:	57 e4       	ldi	r21, 0x47	; 71
    5320:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5324:	18 16       	cp	r1, r24
    5326:	0c f0       	brlt	.+2      	; 0x532a <main+0x9b2>
    5328:	43 c0       	rjmp	.+134    	; 0x53b0 <main+0xa38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    532a:	fe 01       	movw	r30, r28
    532c:	e1 5a       	subi	r30, 0xA1	; 161
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	60 81       	ld	r22, Z
    5332:	71 81       	ldd	r23, Z+1	; 0x01
    5334:	82 81       	ldd	r24, Z+2	; 0x02
    5336:	93 81       	ldd	r25, Z+3	; 0x03
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	40 e2       	ldi	r20, 0x20	; 32
    533e:	51 e4       	ldi	r21, 0x41	; 65
    5340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5344:	dc 01       	movw	r26, r24
    5346:	cb 01       	movw	r24, r22
    5348:	8e 01       	movw	r16, r28
    534a:	07 5a       	subi	r16, 0xA7	; 167
    534c:	1f 4f       	sbci	r17, 0xFF	; 255
    534e:	bc 01       	movw	r22, r24
    5350:	cd 01       	movw	r24, r26
    5352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5356:	dc 01       	movw	r26, r24
    5358:	cb 01       	movw	r24, r22
    535a:	f8 01       	movw	r30, r16
    535c:	91 83       	std	Z+1, r25	; 0x01
    535e:	80 83       	st	Z, r24
    5360:	1f c0       	rjmp	.+62     	; 0x53a0 <main+0xa28>
    5362:	fe 01       	movw	r30, r28
    5364:	e9 5a       	subi	r30, 0xA9	; 169
    5366:	ff 4f       	sbci	r31, 0xFF	; 255
    5368:	88 ec       	ldi	r24, 0xC8	; 200
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	91 83       	std	Z+1, r25	; 0x01
    536e:	80 83       	st	Z, r24
    5370:	fe 01       	movw	r30, r28
    5372:	e9 5a       	subi	r30, 0xA9	; 169
    5374:	ff 4f       	sbci	r31, 0xFF	; 255
    5376:	80 81       	ld	r24, Z
    5378:	91 81       	ldd	r25, Z+1	; 0x01
    537a:	01 97       	sbiw	r24, 0x01	; 1
    537c:	f1 f7       	brne	.-4      	; 0x537a <main+0xa02>
    537e:	fe 01       	movw	r30, r28
    5380:	e9 5a       	subi	r30, 0xA9	; 169
    5382:	ff 4f       	sbci	r31, 0xFF	; 255
    5384:	91 83       	std	Z+1, r25	; 0x01
    5386:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5388:	de 01       	movw	r26, r28
    538a:	a7 5a       	subi	r26, 0xA7	; 167
    538c:	bf 4f       	sbci	r27, 0xFF	; 255
    538e:	fe 01       	movw	r30, r28
    5390:	e7 5a       	subi	r30, 0xA7	; 167
    5392:	ff 4f       	sbci	r31, 0xFF	; 255
    5394:	80 81       	ld	r24, Z
    5396:	91 81       	ldd	r25, Z+1	; 0x01
    5398:	01 97       	sbiw	r24, 0x01	; 1
    539a:	11 96       	adiw	r26, 0x01	; 1
    539c:	9c 93       	st	X, r25
    539e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53a0:	fe 01       	movw	r30, r28
    53a2:	e7 5a       	subi	r30, 0xA7	; 167
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 81       	ld	r24, Z
    53a8:	91 81       	ldd	r25, Z+1	; 0x01
    53aa:	00 97       	sbiw	r24, 0x00	; 0
    53ac:	d1 f6       	brne	.-76     	; 0x5362 <main+0x9ea>
    53ae:	f2 c0       	rjmp	.+484    	; 0x5594 <main+0xc1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53b0:	8e 01       	movw	r16, r28
    53b2:	07 5a       	subi	r16, 0xA7	; 167
    53b4:	1f 4f       	sbci	r17, 0xFF	; 255
    53b6:	fe 01       	movw	r30, r28
    53b8:	e5 5a       	subi	r30, 0xA5	; 165
    53ba:	ff 4f       	sbci	r31, 0xFF	; 255
    53bc:	60 81       	ld	r22, Z
    53be:	71 81       	ldd	r23, Z+1	; 0x01
    53c0:	82 81       	ldd	r24, Z+2	; 0x02
    53c2:	93 81       	ldd	r25, Z+3	; 0x03
    53c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c8:	dc 01       	movw	r26, r24
    53ca:	cb 01       	movw	r24, r22
    53cc:	f8 01       	movw	r30, r16
    53ce:	91 83       	std	Z+1, r25	; 0x01
    53d0:	80 83       	st	Z, r24
    53d2:	de 01       	movw	r26, r28
    53d4:	ab 5a       	subi	r26, 0xAB	; 171
    53d6:	bf 4f       	sbci	r27, 0xFF	; 255
    53d8:	fe 01       	movw	r30, r28
    53da:	e7 5a       	subi	r30, 0xA7	; 167
    53dc:	ff 4f       	sbci	r31, 0xFF	; 255
    53de:	80 81       	ld	r24, Z
    53e0:	91 81       	ldd	r25, Z+1	; 0x01
    53e2:	11 96       	adiw	r26, 0x01	; 1
    53e4:	9c 93       	st	X, r25
    53e6:	8e 93       	st	-X, r24
    53e8:	fe 01       	movw	r30, r28
    53ea:	eb 5a       	subi	r30, 0xAB	; 171
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	80 81       	ld	r24, Z
    53f0:	91 81       	ldd	r25, Z+1	; 0x01
    53f2:	01 97       	sbiw	r24, 0x01	; 1
    53f4:	f1 f7       	brne	.-4      	; 0x53f2 <main+0xa7a>
    53f6:	fe 01       	movw	r30, r28
    53f8:	eb 5a       	subi	r30, 0xAB	; 171
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	91 83       	std	Z+1, r25	; 0x01
    53fe:	80 83       	st	Z, r24
    5400:	c9 c0       	rjmp	.+402    	; 0x5594 <main+0xc1c>
				_delay_ms(1000);
				break;
    5402:	fe 01       	movw	r30, r28
    5404:	ef 5a       	subi	r30, 0xAF	; 175
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	aa e7       	ldi	r26, 0x7A	; 122
    540e:	b3 e4       	ldi	r27, 0x43	; 67
    5410:	80 83       	st	Z, r24
    5412:	91 83       	std	Z+1, r25	; 0x01
    5414:	a2 83       	std	Z+2, r26	; 0x02
    5416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5418:	8e 01       	movw	r16, r28
    541a:	03 5b       	subi	r16, 0xB3	; 179
    541c:	1f 4f       	sbci	r17, 0xFF	; 255
    541e:	fe 01       	movw	r30, r28
    5420:	ef 5a       	subi	r30, 0xAF	; 175
    5422:	ff 4f       	sbci	r31, 0xFF	; 255
    5424:	60 81       	ld	r22, Z
    5426:	71 81       	ldd	r23, Z+1	; 0x01
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	93 81       	ldd	r25, Z+3	; 0x03
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	4a ef       	ldi	r20, 0xFA	; 250
    5432:	54 e4       	ldi	r21, 0x44	; 68
    5434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	f8 01       	movw	r30, r16
    543e:	80 83       	st	Z, r24
    5440:	91 83       	std	Z+1, r25	; 0x01
    5442:	a2 83       	std	Z+2, r26	; 0x02
    5444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5446:	fe 01       	movw	r30, r28
    5448:	e3 5b       	subi	r30, 0xB3	; 179
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	60 81       	ld	r22, Z
    544e:	71 81       	ldd	r23, Z+1	; 0x01
    5450:	82 81       	ldd	r24, Z+2	; 0x02
    5452:	93 81       	ldd	r25, Z+3	; 0x03
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	40 e8       	ldi	r20, 0x80	; 128
    545a:	5f e3       	ldi	r21, 0x3F	; 63
    545c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5460:	88 23       	and	r24, r24
    5462:	44 f4       	brge	.+16     	; 0x5474 <main+0xafc>
		__ticks = 1;
    5464:	fe 01       	movw	r30, r28
    5466:	e5 5b       	subi	r30, 0xB5	; 181
    5468:	ff 4f       	sbci	r31, 0xFF	; 255
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	91 83       	std	Z+1, r25	; 0x01
    5470:	80 83       	st	Z, r24
    5472:	64 c0       	rjmp	.+200    	; 0x553c <main+0xbc4>
	else if (__tmp > 65535)
    5474:	fe 01       	movw	r30, r28
    5476:	e3 5b       	subi	r30, 0xB3	; 179
    5478:	ff 4f       	sbci	r31, 0xFF	; 255
    547a:	60 81       	ld	r22, Z
    547c:	71 81       	ldd	r23, Z+1	; 0x01
    547e:	82 81       	ldd	r24, Z+2	; 0x02
    5480:	93 81       	ldd	r25, Z+3	; 0x03
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	3f ef       	ldi	r19, 0xFF	; 255
    5486:	4f e7       	ldi	r20, 0x7F	; 127
    5488:	57 e4       	ldi	r21, 0x47	; 71
    548a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    548e:	18 16       	cp	r1, r24
    5490:	0c f0       	brlt	.+2      	; 0x5494 <main+0xb1c>
    5492:	43 c0       	rjmp	.+134    	; 0x551a <main+0xba2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5494:	fe 01       	movw	r30, r28
    5496:	ef 5a       	subi	r30, 0xAF	; 175
    5498:	ff 4f       	sbci	r31, 0xFF	; 255
    549a:	60 81       	ld	r22, Z
    549c:	71 81       	ldd	r23, Z+1	; 0x01
    549e:	82 81       	ldd	r24, Z+2	; 0x02
    54a0:	93 81       	ldd	r25, Z+3	; 0x03
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	40 e2       	ldi	r20, 0x20	; 32
    54a8:	51 e4       	ldi	r21, 0x41	; 65
    54aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	8e 01       	movw	r16, r28
    54b4:	05 5b       	subi	r16, 0xB5	; 181
    54b6:	1f 4f       	sbci	r17, 0xFF	; 255
    54b8:	bc 01       	movw	r22, r24
    54ba:	cd 01       	movw	r24, r26
    54bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c0:	dc 01       	movw	r26, r24
    54c2:	cb 01       	movw	r24, r22
    54c4:	f8 01       	movw	r30, r16
    54c6:	91 83       	std	Z+1, r25	; 0x01
    54c8:	80 83       	st	Z, r24
    54ca:	1f c0       	rjmp	.+62     	; 0x550a <main+0xb92>
    54cc:	fe 01       	movw	r30, r28
    54ce:	e7 5b       	subi	r30, 0xB7	; 183
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	88 ec       	ldi	r24, 0xC8	; 200
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	91 83       	std	Z+1, r25	; 0x01
    54d8:	80 83       	st	Z, r24
    54da:	fe 01       	movw	r30, r28
    54dc:	e7 5b       	subi	r30, 0xB7	; 183
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	80 81       	ld	r24, Z
    54e2:	91 81       	ldd	r25, Z+1	; 0x01
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <main+0xb6c>
    54e8:	fe 01       	movw	r30, r28
    54ea:	e7 5b       	subi	r30, 0xB7	; 183
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	91 83       	std	Z+1, r25	; 0x01
    54f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54f2:	de 01       	movw	r26, r28
    54f4:	a5 5b       	subi	r26, 0xB5	; 181
    54f6:	bf 4f       	sbci	r27, 0xFF	; 255
    54f8:	fe 01       	movw	r30, r28
    54fa:	e5 5b       	subi	r30, 0xB5	; 181
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	80 81       	ld	r24, Z
    5500:	91 81       	ldd	r25, Z+1	; 0x01
    5502:	01 97       	sbiw	r24, 0x01	; 1
    5504:	11 96       	adiw	r26, 0x01	; 1
    5506:	9c 93       	st	X, r25
    5508:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550a:	fe 01       	movw	r30, r28
    550c:	e5 5b       	subi	r30, 0xB5	; 181
    550e:	ff 4f       	sbci	r31, 0xFF	; 255
    5510:	80 81       	ld	r24, Z
    5512:	91 81       	ldd	r25, Z+1	; 0x01
    5514:	00 97       	sbiw	r24, 0x00	; 0
    5516:	d1 f6       	brne	.-76     	; 0x54cc <main+0xb54>
    5518:	27 c0       	rjmp	.+78     	; 0x5568 <main+0xbf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    551a:	8e 01       	movw	r16, r28
    551c:	05 5b       	subi	r16, 0xB5	; 181
    551e:	1f 4f       	sbci	r17, 0xFF	; 255
    5520:	fe 01       	movw	r30, r28
    5522:	e3 5b       	subi	r30, 0xB3	; 179
    5524:	ff 4f       	sbci	r31, 0xFF	; 255
    5526:	60 81       	ld	r22, Z
    5528:	71 81       	ldd	r23, Z+1	; 0x01
    552a:	82 81       	ldd	r24, Z+2	; 0x02
    552c:	93 81       	ldd	r25, Z+3	; 0x03
    552e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	f8 01       	movw	r30, r16
    5538:	91 83       	std	Z+1, r25	; 0x01
    553a:	80 83       	st	Z, r24
    553c:	de 01       	movw	r26, r28
    553e:	a9 5b       	subi	r26, 0xB9	; 185
    5540:	bf 4f       	sbci	r27, 0xFF	; 255
    5542:	fe 01       	movw	r30, r28
    5544:	e5 5b       	subi	r30, 0xB5	; 181
    5546:	ff 4f       	sbci	r31, 0xFF	; 255
    5548:	80 81       	ld	r24, Z
    554a:	91 81       	ldd	r25, Z+1	; 0x01
    554c:	8d 93       	st	X+, r24
    554e:	9c 93       	st	X, r25
    5550:	fe 01       	movw	r30, r28
    5552:	e9 5b       	subi	r30, 0xB9	; 185
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	80 81       	ld	r24, Z
    5558:	91 81       	ldd	r25, Z+1	; 0x01
    555a:	01 97       	sbiw	r24, 0x01	; 1
    555c:	f1 f7       	brne	.-4      	; 0x555a <main+0xbe2>
    555e:	fe 01       	movw	r30, r28
    5560:	e9 5b       	subi	r30, 0xB9	; 185
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	91 83       	std	Z+1, r25	; 0x01
    5566:	80 83       	st	Z, r24
			}
			else
			{
				_delay_ms(250);
				CLCD_voidCLR();
    5568:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("Try Again: ");
    556c:	8b e9       	ldi	r24, 0x9B	; 155
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
		}
		_delay_ms(250);
		CLCD_voidCLR();
		CLCD_voidSendString("Password: ");
		/*Loop to take the user Password from Keypad*/
		for(Local_u8TrailesCounter=0;Local_u8TrailesCounter<3;Local_u8TrailesCounter++)
    5574:	de 01       	movw	r26, r28
    5576:	ab 56       	subi	r26, 0x6B	; 107
    5578:	bf 4f       	sbci	r27, 0xFF	; 255
    557a:	fe 01       	movw	r30, r28
    557c:	eb 56       	subi	r30, 0x6B	; 107
    557e:	ff 4f       	sbci	r31, 0xFF	; 255
    5580:	80 81       	ld	r24, Z
    5582:	8f 5f       	subi	r24, 0xFF	; 255
    5584:	8c 93       	st	X, r24
    5586:	fe 01       	movw	r30, r28
    5588:	eb 56       	subi	r30, 0x6B	; 107
    558a:	ff 4f       	sbci	r31, 0xFF	; 255
    558c:	80 81       	ld	r24, Z
    558e:	83 30       	cpi	r24, 0x03	; 3
    5590:	08 f4       	brcc	.+2      	; 0x5594 <main+0xc1c>
    5592:	cd cc       	rjmp	.-1638   	; 0x4f2e <main+0x5b6>
				CLCD_voidCLR();
				CLCD_voidSendString("Try Again: ");
			}
		}
		/*If the password entered 3 times wrong close the system*/
		if(Local_u8TrailesCounter==3)
    5594:	fe 01       	movw	r30, r28
    5596:	eb 56       	subi	r30, 0x6B	; 107
    5598:	ff 4f       	sbci	r31, 0xFF	; 255
    559a:	80 81       	ld	r24, Z
    559c:	83 30       	cpi	r24, 0x03	; 3
    559e:	09 f0       	breq	.+2      	; 0x55a2 <main+0xc2a>
    55a0:	8c c0       	rjmp	.+280    	; 0x56ba <main+0xd42>
    55a2:	fe 01       	movw	r30, r28
    55a4:	ed 5b       	subi	r30, 0xBD	; 189
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	aa e7       	ldi	r26, 0x7A	; 122
    55ae:	b3 e4       	ldi	r27, 0x43	; 67
    55b0:	80 83       	st	Z, r24
    55b2:	91 83       	std	Z+1, r25	; 0x01
    55b4:	a2 83       	std	Z+2, r26	; 0x02
    55b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b8:	8e 01       	movw	r16, r28
    55ba:	01 5c       	subi	r16, 0xC1	; 193
    55bc:	1f 4f       	sbci	r17, 0xFF	; 255
    55be:	fe 01       	movw	r30, r28
    55c0:	ed 5b       	subi	r30, 0xBD	; 189
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	60 81       	ld	r22, Z
    55c6:	71 81       	ldd	r23, Z+1	; 0x01
    55c8:	82 81       	ldd	r24, Z+2	; 0x02
    55ca:	93 81       	ldd	r25, Z+3	; 0x03
    55cc:	20 e0       	ldi	r18, 0x00	; 0
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	4a ef       	ldi	r20, 0xFA	; 250
    55d2:	54 e4       	ldi	r21, 0x44	; 68
    55d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d8:	dc 01       	movw	r26, r24
    55da:	cb 01       	movw	r24, r22
    55dc:	f8 01       	movw	r30, r16
    55de:	80 83       	st	Z, r24
    55e0:	91 83       	std	Z+1, r25	; 0x01
    55e2:	a2 83       	std	Z+2, r26	; 0x02
    55e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55e6:	fe 01       	movw	r30, r28
    55e8:	ff 96       	adiw	r30, 0x3f	; 63
    55ea:	60 81       	ld	r22, Z
    55ec:	71 81       	ldd	r23, Z+1	; 0x01
    55ee:	82 81       	ldd	r24, Z+2	; 0x02
    55f0:	93 81       	ldd	r25, Z+3	; 0x03
    55f2:	20 e0       	ldi	r18, 0x00	; 0
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	40 e8       	ldi	r20, 0x80	; 128
    55f8:	5f e3       	ldi	r21, 0x3F	; 63
    55fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55fe:	88 23       	and	r24, r24
    5600:	2c f4       	brge	.+10     	; 0x560c <main+0xc94>
		__ticks = 1;
    5602:	81 e0       	ldi	r24, 0x01	; 1
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	9e af       	std	Y+62, r25	; 0x3e
    5608:	8d af       	std	Y+61, r24	; 0x3d
    560a:	46 c0       	rjmp	.+140    	; 0x5698 <main+0xd20>
	else if (__tmp > 65535)
    560c:	fe 01       	movw	r30, r28
    560e:	ff 96       	adiw	r30, 0x3f	; 63
    5610:	60 81       	ld	r22, Z
    5612:	71 81       	ldd	r23, Z+1	; 0x01
    5614:	82 81       	ldd	r24, Z+2	; 0x02
    5616:	93 81       	ldd	r25, Z+3	; 0x03
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	3f ef       	ldi	r19, 0xFF	; 255
    561c:	4f e7       	ldi	r20, 0x7F	; 127
    561e:	57 e4       	ldi	r21, 0x47	; 71
    5620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5624:	18 16       	cp	r1, r24
    5626:	64 f5       	brge	.+88     	; 0x5680 <main+0xd08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5628:	fe 01       	movw	r30, r28
    562a:	ed 5b       	subi	r30, 0xBD	; 189
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	60 81       	ld	r22, Z
    5630:	71 81       	ldd	r23, Z+1	; 0x01
    5632:	82 81       	ldd	r24, Z+2	; 0x02
    5634:	93 81       	ldd	r25, Z+3	; 0x03
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	40 e2       	ldi	r20, 0x20	; 32
    563c:	51 e4       	ldi	r21, 0x41	; 65
    563e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	bc 01       	movw	r22, r24
    5648:	cd 01       	movw	r24, r26
    564a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564e:	dc 01       	movw	r26, r24
    5650:	cb 01       	movw	r24, r22
    5652:	9e af       	std	Y+62, r25	; 0x3e
    5654:	8d af       	std	Y+61, r24	; 0x3d
    5656:	0f c0       	rjmp	.+30     	; 0x5676 <main+0xcfe>
    5658:	88 ec       	ldi	r24, 0xC8	; 200
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	9c af       	std	Y+60, r25	; 0x3c
    565e:	8b af       	std	Y+59, r24	; 0x3b
    5660:	8b ad       	ldd	r24, Y+59	; 0x3b
    5662:	9c ad       	ldd	r25, Y+60	; 0x3c
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	f1 f7       	brne	.-4      	; 0x5664 <main+0xcec>
    5668:	9c af       	std	Y+60, r25	; 0x3c
    566a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    566c:	8d ad       	ldd	r24, Y+61	; 0x3d
    566e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5670:	01 97       	sbiw	r24, 0x01	; 1
    5672:	9e af       	std	Y+62, r25	; 0x3e
    5674:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5676:	8d ad       	ldd	r24, Y+61	; 0x3d
    5678:	9e ad       	ldd	r25, Y+62	; 0x3e
    567a:	00 97       	sbiw	r24, 0x00	; 0
    567c:	69 f7       	brne	.-38     	; 0x5658 <main+0xce0>
    567e:	16 c0       	rjmp	.+44     	; 0x56ac <main+0xd34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5680:	fe 01       	movw	r30, r28
    5682:	ff 96       	adiw	r30, 0x3f	; 63
    5684:	60 81       	ld	r22, Z
    5686:	71 81       	ldd	r23, Z+1	; 0x01
    5688:	82 81       	ldd	r24, Z+2	; 0x02
    568a:	93 81       	ldd	r25, Z+3	; 0x03
    568c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5690:	dc 01       	movw	r26, r24
    5692:	cb 01       	movw	r24, r22
    5694:	9e af       	std	Y+62, r25	; 0x3e
    5696:	8d af       	std	Y+61, r24	; 0x3d
    5698:	8d ad       	ldd	r24, Y+61	; 0x3d
    569a:	9e ad       	ldd	r25, Y+62	; 0x3e
    569c:	9a af       	std	Y+58, r25	; 0x3a
    569e:	89 af       	std	Y+57, r24	; 0x39
    56a0:	89 ad       	ldd	r24, Y+57	; 0x39
    56a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    56a4:	01 97       	sbiw	r24, 0x01	; 1
    56a6:	f1 f7       	brne	.-4      	; 0x56a4 <main+0xd2c>
    56a8:	9a af       	std	Y+58, r25	; 0x3a
    56aa:	89 af       	std	Y+57, r24	; 0x39
		{
			_delay_ms(250);
			CLCD_voidCLR();
    56ac:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
			CLCD_voidSendString("ByeBye");
    56b0:	87 ea       	ldi	r24, 0xA7	; 167
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
    56b8:	b2 ca       	rjmp	.-2716   	; 0x4c1e <main+0x2a6>
		}
		else
		{
			while(1)
			{
				CLCD_voidCLR();
    56ba:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("Choose One Motor");
    56be:	8e ea       	ldi	r24, 0xAE	; 174
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
    56c6:	80 e0       	ldi	r24, 0x00	; 0
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	aa ef       	ldi	r26, 0xFA	; 250
    56cc:	b3 e4       	ldi	r27, 0x43	; 67
    56ce:	8d ab       	std	Y+53, r24	; 0x35
    56d0:	9e ab       	std	Y+54, r25	; 0x36
    56d2:	af ab       	std	Y+55, r26	; 0x37
    56d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56d6:	6d a9       	ldd	r22, Y+53	; 0x35
    56d8:	7e a9       	ldd	r23, Y+54	; 0x36
    56da:	8f a9       	ldd	r24, Y+55	; 0x37
    56dc:	98 ad       	ldd	r25, Y+56	; 0x38
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	4a ef       	ldi	r20, 0xFA	; 250
    56e4:	54 e4       	ldi	r21, 0x44	; 68
    56e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	89 ab       	std	Y+49, r24	; 0x31
    56f0:	9a ab       	std	Y+50, r25	; 0x32
    56f2:	ab ab       	std	Y+51, r26	; 0x33
    56f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    56f6:	69 a9       	ldd	r22, Y+49	; 0x31
    56f8:	7a a9       	ldd	r23, Y+50	; 0x32
    56fa:	8b a9       	ldd	r24, Y+51	; 0x33
    56fc:	9c a9       	ldd	r25, Y+52	; 0x34
    56fe:	20 e0       	ldi	r18, 0x00	; 0
    5700:	30 e0       	ldi	r19, 0x00	; 0
    5702:	40 e8       	ldi	r20, 0x80	; 128
    5704:	5f e3       	ldi	r21, 0x3F	; 63
    5706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    570a:	88 23       	and	r24, r24
    570c:	2c f4       	brge	.+10     	; 0x5718 <main+0xda0>
		__ticks = 1;
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	98 ab       	std	Y+48, r25	; 0x30
    5714:	8f a7       	std	Y+47, r24	; 0x2f
    5716:	3f c0       	rjmp	.+126    	; 0x5796 <main+0xe1e>
	else if (__tmp > 65535)
    5718:	69 a9       	ldd	r22, Y+49	; 0x31
    571a:	7a a9       	ldd	r23, Y+50	; 0x32
    571c:	8b a9       	ldd	r24, Y+51	; 0x33
    571e:	9c a9       	ldd	r25, Y+52	; 0x34
    5720:	20 e0       	ldi	r18, 0x00	; 0
    5722:	3f ef       	ldi	r19, 0xFF	; 255
    5724:	4f e7       	ldi	r20, 0x7F	; 127
    5726:	57 e4       	ldi	r21, 0x47	; 71
    5728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    572c:	18 16       	cp	r1, r24
    572e:	4c f5       	brge	.+82     	; 0x5782 <main+0xe0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5730:	6d a9       	ldd	r22, Y+53	; 0x35
    5732:	7e a9       	ldd	r23, Y+54	; 0x36
    5734:	8f a9       	ldd	r24, Y+55	; 0x37
    5736:	98 ad       	ldd	r25, Y+56	; 0x38
    5738:	20 e0       	ldi	r18, 0x00	; 0
    573a:	30 e0       	ldi	r19, 0x00	; 0
    573c:	40 e2       	ldi	r20, 0x20	; 32
    573e:	51 e4       	ldi	r21, 0x41	; 65
    5740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5744:	dc 01       	movw	r26, r24
    5746:	cb 01       	movw	r24, r22
    5748:	bc 01       	movw	r22, r24
    574a:	cd 01       	movw	r24, r26
    574c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	98 ab       	std	Y+48, r25	; 0x30
    5756:	8f a7       	std	Y+47, r24	; 0x2f
    5758:	0f c0       	rjmp	.+30     	; 0x5778 <main+0xe00>
    575a:	88 ec       	ldi	r24, 0xC8	; 200
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	9e a7       	std	Y+46, r25	; 0x2e
    5760:	8d a7       	std	Y+45, r24	; 0x2d
    5762:	8d a5       	ldd	r24, Y+45	; 0x2d
    5764:	9e a5       	ldd	r25, Y+46	; 0x2e
    5766:	01 97       	sbiw	r24, 0x01	; 1
    5768:	f1 f7       	brne	.-4      	; 0x5766 <main+0xdee>
    576a:	9e a7       	std	Y+46, r25	; 0x2e
    576c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    576e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5770:	98 a9       	ldd	r25, Y+48	; 0x30
    5772:	01 97       	sbiw	r24, 0x01	; 1
    5774:	98 ab       	std	Y+48, r25	; 0x30
    5776:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5778:	8f a5       	ldd	r24, Y+47	; 0x2f
    577a:	98 a9       	ldd	r25, Y+48	; 0x30
    577c:	00 97       	sbiw	r24, 0x00	; 0
    577e:	69 f7       	brne	.-38     	; 0x575a <main+0xde2>
    5780:	14 c0       	rjmp	.+40     	; 0x57aa <main+0xe32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5782:	69 a9       	ldd	r22, Y+49	; 0x31
    5784:	7a a9       	ldd	r23, Y+50	; 0x32
    5786:	8b a9       	ldd	r24, Y+51	; 0x33
    5788:	9c a9       	ldd	r25, Y+52	; 0x34
    578a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	98 ab       	std	Y+48, r25	; 0x30
    5794:	8f a7       	std	Y+47, r24	; 0x2f
    5796:	8f a5       	ldd	r24, Y+47	; 0x2f
    5798:	98 a9       	ldd	r25, Y+48	; 0x30
    579a:	9c a7       	std	Y+44, r25	; 0x2c
    579c:	8b a7       	std	Y+43, r24	; 0x2b
    579e:	8b a5       	ldd	r24, Y+43	; 0x2b
    57a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	f1 f7       	brne	.-4      	; 0x57a2 <main+0xe2a>
    57a6:	9c a7       	std	Y+44, r25	; 0x2c
    57a8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				CLCD_voidCLR();
    57aa:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("1-DC   2-Stepper");
    57ae:	8f eb       	ldi	r24, 0xBF	; 191
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	60 e0       	ldi	r22, 0x00	; 0
    57ba:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
				CLCD_voidSendString("3-Servo");
    57be:	80 ed       	ldi	r24, 0xD0	; 208
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				Local_u8PressedKey=KPD_u8GetPressedKey();
    57c6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    57ca:	fe 01       	movw	r30, r28
    57cc:	ec 56       	subi	r30, 0x6C	; 108
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	80 83       	st	Z, r24
				switch(Local_u8PressedKey)
    57d2:	fe 01       	movw	r30, r28
    57d4:	ec 56       	subi	r30, 0x6C	; 108
    57d6:	ff 4f       	sbci	r31, 0xFF	; 255
    57d8:	80 81       	ld	r24, Z
    57da:	28 2f       	mov	r18, r24
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	ce 54       	subi	r28, 0x4E	; 78
    57e0:	df 4f       	sbci	r29, 0xFF	; 255
    57e2:	39 83       	std	Y+1, r19	; 0x01
    57e4:	28 83       	st	Y, r18
    57e6:	c2 5b       	subi	r28, 0xB2	; 178
    57e8:	d0 40       	sbci	r29, 0x00	; 0
    57ea:	ce 54       	subi	r28, 0x4E	; 78
    57ec:	df 4f       	sbci	r29, 0xFF	; 255
    57ee:	48 81       	ld	r20, Y
    57f0:	59 81       	ldd	r21, Y+1	; 0x01
    57f2:	c2 5b       	subi	r28, 0xB2	; 178
    57f4:	d0 40       	sbci	r29, 0x00	; 0
    57f6:	42 33       	cpi	r20, 0x32	; 50
    57f8:	51 05       	cpc	r21, r1
    57fa:	09 f4       	brne	.+2      	; 0x57fe <main+0xe86>
    57fc:	96 c2       	rjmp	.+1324   	; 0x5d2a <main+0x13b2>
    57fe:	ce 54       	subi	r28, 0x4E	; 78
    5800:	df 4f       	sbci	r29, 0xFF	; 255
    5802:	88 81       	ld	r24, Y
    5804:	99 81       	ldd	r25, Y+1	; 0x01
    5806:	c2 5b       	subi	r28, 0xB2	; 178
    5808:	d0 40       	sbci	r29, 0x00	; 0
    580a:	83 33       	cpi	r24, 0x33	; 51
    580c:	91 05       	cpc	r25, r1
    580e:	09 f4       	brne	.+2      	; 0x5812 <main+0xe9a>
    5810:	55 c3       	rjmp	.+1706   	; 0x5ebc <main+0x1544>
    5812:	ce 54       	subi	r28, 0x4E	; 78
    5814:	df 4f       	sbci	r29, 0xFF	; 255
    5816:	e8 81       	ld	r30, Y
    5818:	f9 81       	ldd	r31, Y+1	; 0x01
    581a:	c2 5b       	subi	r28, 0xB2	; 178
    581c:	d0 40       	sbci	r29, 0x00	; 0
    581e:	e1 33       	cpi	r30, 0x31	; 49
    5820:	f1 05       	cpc	r31, r1
    5822:	09 f0       	breq	.+2      	; 0x5826 <main+0xeae>
    5824:	e6 c3       	rjmp	.+1996   	; 0x5ff2 <main+0x167a>
				{
				case'1': CLCD_voidCLR();
    5826:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("1-CW   2-CCW");
    582a:	88 ed       	ldi	r24, 0xD8	; 216
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				APP_u8Direction=KPD_u8GetPressedKey();
    5832:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5836:	80 93 d2 01 	sts	0x01D2, r24
				if(APP_u8Direction=='1' || APP_u8Direction=='2')
    583a:	80 91 d2 01 	lds	r24, 0x01D2
    583e:	81 33       	cpi	r24, 0x31	; 49
    5840:	29 f0       	breq	.+10     	; 0x584c <main+0xed4>
    5842:	80 91 d2 01 	lds	r24, 0x01D2
    5846:	82 33       	cpi	r24, 0x32	; 50
    5848:	09 f0       	breq	.+2      	; 0x584c <main+0xed4>
    584a:	37 cf       	rjmp	.-402    	; 0x56ba <main+0xd42>
				{
					CLCD_voidCLR();
    584c:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
					CLCD_voidSendString("Speed Control");
    5850:	85 ee       	ldi	r24, 0xE5	; 229
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	aa ef       	ldi	r26, 0xFA	; 250
    585e:	b3 e4       	ldi	r27, 0x43	; 67
    5860:	8f a3       	std	Y+39, r24	; 0x27
    5862:	98 a7       	std	Y+40, r25	; 0x28
    5864:	a9 a7       	std	Y+41, r26	; 0x29
    5866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5868:	6f a1       	ldd	r22, Y+39	; 0x27
    586a:	78 a5       	ldd	r23, Y+40	; 0x28
    586c:	89 a5       	ldd	r24, Y+41	; 0x29
    586e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	4a ef       	ldi	r20, 0xFA	; 250
    5876:	54 e4       	ldi	r21, 0x44	; 68
    5878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	8b a3       	std	Y+35, r24	; 0x23
    5882:	9c a3       	std	Y+36, r25	; 0x24
    5884:	ad a3       	std	Y+37, r26	; 0x25
    5886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5888:	6b a1       	ldd	r22, Y+35	; 0x23
    588a:	7c a1       	ldd	r23, Y+36	; 0x24
    588c:	8d a1       	ldd	r24, Y+37	; 0x25
    588e:	9e a1       	ldd	r25, Y+38	; 0x26
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e8       	ldi	r20, 0x80	; 128
    5896:	5f e3       	ldi	r21, 0x3F	; 63
    5898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    589c:	88 23       	and	r24, r24
    589e:	2c f4       	brge	.+10     	; 0x58aa <main+0xf32>
		__ticks = 1;
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	9a a3       	std	Y+34, r25	; 0x22
    58a6:	89 a3       	std	Y+33, r24	; 0x21
    58a8:	3f c0       	rjmp	.+126    	; 0x5928 <main+0xfb0>
	else if (__tmp > 65535)
    58aa:	6b a1       	ldd	r22, Y+35	; 0x23
    58ac:	7c a1       	ldd	r23, Y+36	; 0x24
    58ae:	8d a1       	ldd	r24, Y+37	; 0x25
    58b0:	9e a1       	ldd	r25, Y+38	; 0x26
    58b2:	20 e0       	ldi	r18, 0x00	; 0
    58b4:	3f ef       	ldi	r19, 0xFF	; 255
    58b6:	4f e7       	ldi	r20, 0x7F	; 127
    58b8:	57 e4       	ldi	r21, 0x47	; 71
    58ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    58be:	18 16       	cp	r1, r24
    58c0:	4c f5       	brge	.+82     	; 0x5914 <main+0xf9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58c2:	6f a1       	ldd	r22, Y+39	; 0x27
    58c4:	78 a5       	ldd	r23, Y+40	; 0x28
    58c6:	89 a5       	ldd	r24, Y+41	; 0x29
    58c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e2       	ldi	r20, 0x20	; 32
    58d0:	51 e4       	ldi	r21, 0x41	; 65
    58d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	9a a3       	std	Y+34, r25	; 0x22
    58e8:	89 a3       	std	Y+33, r24	; 0x21
    58ea:	0f c0       	rjmp	.+30     	; 0x590a <main+0xf92>
    58ec:	88 ec       	ldi	r24, 0xC8	; 200
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	98 a3       	std	Y+32, r25	; 0x20
    58f2:	8f 8f       	std	Y+31, r24	; 0x1f
    58f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58f6:	98 a1       	ldd	r25, Y+32	; 0x20
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <main+0xf80>
    58fc:	98 a3       	std	Y+32, r25	; 0x20
    58fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5900:	89 a1       	ldd	r24, Y+33	; 0x21
    5902:	9a a1       	ldd	r25, Y+34	; 0x22
    5904:	01 97       	sbiw	r24, 0x01	; 1
    5906:	9a a3       	std	Y+34, r25	; 0x22
    5908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    590a:	89 a1       	ldd	r24, Y+33	; 0x21
    590c:	9a a1       	ldd	r25, Y+34	; 0x22
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	69 f7       	brne	.-38     	; 0x58ec <main+0xf74>
    5912:	14 c0       	rjmp	.+40     	; 0x593c <main+0xfc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5914:	6b a1       	ldd	r22, Y+35	; 0x23
    5916:	7c a1       	ldd	r23, Y+36	; 0x24
    5918:	8d a1       	ldd	r24, Y+37	; 0x25
    591a:	9e a1       	ldd	r25, Y+38	; 0x26
    591c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9a a3       	std	Y+34, r25	; 0x22
    5926:	89 a3       	std	Y+33, r24	; 0x21
    5928:	89 a1       	ldd	r24, Y+33	; 0x21
    592a:	9a a1       	ldd	r25, Y+34	; 0x22
    592c:	9e 8f       	std	Y+30, r25	; 0x1e
    592e:	8d 8f       	std	Y+29, r24	; 0x1d
    5930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5934:	01 97       	sbiw	r24, 0x01	; 1
    5936:	f1 f7       	brne	.-4      	; 0x5934 <main+0xfbc>
    5938:	9e 8f       	std	Y+30, r25	; 0x1e
    593a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					CLCD_voidCLR();
    593c:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
					CLCD_voidSendString("1-FSpeed  2-LM35");
    5940:	83 ef       	ldi	r24, 0xF3	; 243
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	60 e0       	ldi	r22, 0x00	; 0
    594c:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
					CLCD_voidSendString("3-Potentiometer");
    5950:	84 e0       	ldi	r24, 0x04	; 4
    5952:	91 e0       	ldi	r25, 0x01	; 1
    5954:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					Local_u8PressedKey=KPD_u8GetPressedKey();
    5958:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    595c:	fe 01       	movw	r30, r28
    595e:	ec 56       	subi	r30, 0x6C	; 108
    5960:	ff 4f       	sbci	r31, 0xFF	; 255
    5962:	80 83       	st	Z, r24
					CLCD_voidCLR();
    5964:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
					CLCD_voidSendString("DC is Running");
    5968:	84 e1       	ldi	r24, 0x14	; 20
    596a:	91 e0       	ldi	r25, 0x01	; 1
    596c:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	60 e0       	ldi	r22, 0x00	; 0
    5974:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
					switch(Local_u8PressedKey)
    5978:	fe 01       	movw	r30, r28
    597a:	ec 56       	subi	r30, 0x6C	; 108
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 81       	ld	r24, Z
    5980:	28 2f       	mov	r18, r24
    5982:	30 e0       	ldi	r19, 0x00	; 0
    5984:	c0 55       	subi	r28, 0x50	; 80
    5986:	df 4f       	sbci	r29, 0xFF	; 255
    5988:	39 83       	std	Y+1, r19	; 0x01
    598a:	28 83       	st	Y, r18
    598c:	c0 5b       	subi	r28, 0xB0	; 176
    598e:	d0 40       	sbci	r29, 0x00	; 0
    5990:	c0 55       	subi	r28, 0x50	; 80
    5992:	df 4f       	sbci	r29, 0xFF	; 255
    5994:	48 81       	ld	r20, Y
    5996:	59 81       	ldd	r21, Y+1	; 0x01
    5998:	c0 5b       	subi	r28, 0xB0	; 176
    599a:	d0 40       	sbci	r29, 0x00	; 0
    599c:	42 33       	cpi	r20, 0x32	; 50
    599e:	51 05       	cpc	r21, r1
    59a0:	09 f4       	brne	.+2      	; 0x59a4 <main+0x102c>
    59a2:	49 c0       	rjmp	.+146    	; 0x5a36 <main+0x10be>
    59a4:	c0 55       	subi	r28, 0x50	; 80
    59a6:	df 4f       	sbci	r29, 0xFF	; 255
    59a8:	88 81       	ld	r24, Y
    59aa:	99 81       	ldd	r25, Y+1	; 0x01
    59ac:	c0 5b       	subi	r28, 0xB0	; 176
    59ae:	d0 40       	sbci	r29, 0x00	; 0
    59b0:	83 33       	cpi	r24, 0x33	; 51
    59b2:	91 05       	cpc	r25, r1
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <main+0x1040>
    59b6:	fc c0       	rjmp	.+504    	; 0x5bb0 <main+0x1238>
    59b8:	c0 55       	subi	r28, 0x50	; 80
    59ba:	df 4f       	sbci	r29, 0xFF	; 255
    59bc:	e8 81       	ld	r30, Y
    59be:	f9 81       	ldd	r31, Y+1	; 0x01
    59c0:	c0 5b       	subi	r28, 0xB0	; 176
    59c2:	d0 40       	sbci	r29, 0x00	; 0
    59c4:	e1 33       	cpi	r30, 0x31	; 49
    59c6:	f1 05       	cpc	r31, r1
    59c8:	09 f0       	breq	.+2      	; 0x59cc <main+0x1054>
    59ca:	77 ce       	rjmp	.-786    	; 0x56ba <main+0xd42>
					{
					case '1': CLCD_voidSendString("Full Speed");
    59cc:	82 e2       	ldi	r24, 0x22	; 34
    59ce:	91 e0       	ldi	r25, 0x01	; 1
    59d0:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					switch(APP_u8Direction)
    59d4:	80 91 d2 01 	lds	r24, 0x01D2
    59d8:	28 2f       	mov	r18, r24
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	c2 55       	subi	r28, 0x52	; 82
    59de:	df 4f       	sbci	r29, 0xFF	; 255
    59e0:	39 83       	std	Y+1, r19	; 0x01
    59e2:	28 83       	st	Y, r18
    59e4:	ce 5a       	subi	r28, 0xAE	; 174
    59e6:	d0 40       	sbci	r29, 0x00	; 0
    59e8:	c2 55       	subi	r28, 0x52	; 82
    59ea:	df 4f       	sbci	r29, 0xFF	; 255
    59ec:	48 81       	ld	r20, Y
    59ee:	59 81       	ldd	r21, Y+1	; 0x01
    59f0:	ce 5a       	subi	r28, 0xAE	; 174
    59f2:	d0 40       	sbci	r29, 0x00	; 0
    59f4:	41 33       	cpi	r20, 0x31	; 49
    59f6:	51 05       	cpc	r21, r1
    59f8:	51 f0       	breq	.+20     	; 0x5a0e <main+0x1096>
    59fa:	c2 55       	subi	r28, 0x52	; 82
    59fc:	df 4f       	sbci	r29, 0xFF	; 255
    59fe:	88 81       	ld	r24, Y
    5a00:	99 81       	ldd	r25, Y+1	; 0x01
    5a02:	ce 5a       	subi	r28, 0xAE	; 174
    5a04:	d0 40       	sbci	r29, 0x00	; 0
    5a06:	82 33       	cpi	r24, 0x32	; 50
    5a08:	91 05       	cpc	r25, r1
    5a0a:	39 f0       	breq	.+14     	; 0x5a1a <main+0x10a2>
    5a0c:	0b c0       	rjmp	.+22     	; 0x5a24 <main+0x10ac>
					{
					case '1': DC_u8Rotate(&DC,CW); break;
    5a0e:	85 eb       	ldi	r24, 0xB5	; 181
    5a10:	91 e0       	ldi	r25, 0x01	; 1
    5a12:	61 e0       	ldi	r22, 0x01	; 1
    5a14:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_u8Rotate>
    5a18:	05 c0       	rjmp	.+10     	; 0x5a24 <main+0x10ac>
					case '2': DC_u8Rotate(&DC,CCW); break;
    5a1a:	85 eb       	ldi	r24, 0xB5	; 181
    5a1c:	91 e0       	ldi	r25, 0x01	; 1
    5a1e:	62 e0       	ldi	r22, 0x02	; 2
    5a20:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_u8Rotate>
					}
					while(KPD_u8GetPressedKey()!='*');
    5a24:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5a28:	8a 32       	cpi	r24, 0x2A	; 42
    5a2a:	e1 f7       	brne	.-8      	; 0x5a24 <main+0x10ac>
					DC_u8Stop(&DC); break;
    5a2c:	85 eb       	ldi	r24, 0xB5	; 181
    5a2e:	91 e0       	ldi	r25, 0x01	; 1
    5a30:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DC_u8Stop>
    5a34:	42 ce       	rjmp	.-892    	; 0x56ba <main+0xd42>
					case '2': CLCD_voidSendString("LM35 Control");
    5a36:	8d e2       	ldi	r24, 0x2D	; 45
    5a38:	91 e0       	ldi	r25, 0x01	; 1
    5a3a:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
    5a3e:	a8 c0       	rjmp	.+336    	; 0x5b90 <main+0x1218>
					while(Local_u8PressedKey!='*')
					{
						APP_PotenMappedValue=0;
    5a40:	10 92 cf 01 	sts	0x01CF, r1
    5a44:	10 92 ce 01 	sts	0x01CE, r1
						ADC_u16StartConversionSynch(4,&Local_ADCReading);
    5a48:	9e 01       	movw	r18, r28
    5a4a:	26 55       	subi	r18, 0x56	; 86
    5a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a4e:	84 e0       	ldi	r24, 0x04	; 4
    5a50:	b9 01       	movw	r22, r18
    5a52:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u16StartConversionSynch>
						APP_LM35MappedValue=ADC_S16ReadingMap(&LM35Reading,Local_ADCReading);
    5a56:	fe 01       	movw	r30, r28
    5a58:	e6 55       	subi	r30, 0x56	; 86
    5a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5c:	80 81       	ld	r24, Z
    5a5e:	91 81       	ldd	r25, Z+1	; 0x01
    5a60:	9c 01       	movw	r18, r24
    5a62:	8d e9       	ldi	r24, 0x9D	; 157
    5a64:	91 e0       	ldi	r25, 0x01	; 1
    5a66:	b9 01       	movw	r22, r18
    5a68:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <ADC_S16ReadingMap>
    5a6c:	90 93 d1 01 	sts	0x01D1, r25
    5a70:	80 93 d0 01 	sts	0x01D0, r24
						CLCD_voidCLR();
    5a74:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
						CLCD_void_SendNumber(Local_ps8Buffer,APP_LM35MappedValue);
    5a78:	80 91 d0 01 	lds	r24, 0x01D0
    5a7c:	90 91 d1 01 	lds	r25, 0x01D1
    5a80:	9c 01       	movw	r18, r24
    5a82:	44 27       	eor	r20, r20
    5a84:	37 fd       	sbrc	r19, 7
    5a86:	40 95       	com	r20
    5a88:	54 2f       	mov	r21, r20
    5a8a:	ce 01       	movw	r24, r28
    5a8c:	80 56       	subi	r24, 0x60	; 96
    5a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a90:	ba 01       	movw	r22, r20
    5a92:	a9 01       	movw	r20, r18
    5a94:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <CLCD_void_SendNumber>
    5a98:	80 e0       	ldi	r24, 0x00	; 0
    5a9a:	90 e4       	ldi	r25, 0x40	; 64
    5a9c:	ac e1       	ldi	r26, 0x1C	; 28
    5a9e:	b5 e4       	ldi	r27, 0x45	; 69
    5aa0:	89 8f       	std	Y+25, r24	; 0x19
    5aa2:	9a 8f       	std	Y+26, r25	; 0x1a
    5aa4:	ab 8f       	std	Y+27, r26	; 0x1b
    5aa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aa8:	69 8d       	ldd	r22, Y+25	; 0x19
    5aaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5aac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5aae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ab0:	20 e0       	ldi	r18, 0x00	; 0
    5ab2:	30 e0       	ldi	r19, 0x00	; 0
    5ab4:	4a ef       	ldi	r20, 0xFA	; 250
    5ab6:	54 e4       	ldi	r21, 0x44	; 68
    5ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5abc:	dc 01       	movw	r26, r24
    5abe:	cb 01       	movw	r24, r22
    5ac0:	8d 8b       	std	Y+21, r24	; 0x15
    5ac2:	9e 8b       	std	Y+22, r25	; 0x16
    5ac4:	af 8b       	std	Y+23, r26	; 0x17
    5ac6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    5aca:	7e 89       	ldd	r23, Y+22	; 0x16
    5acc:	8f 89       	ldd	r24, Y+23	; 0x17
    5ace:	98 8d       	ldd	r25, Y+24	; 0x18
    5ad0:	20 e0       	ldi	r18, 0x00	; 0
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	40 e8       	ldi	r20, 0x80	; 128
    5ad6:	5f e3       	ldi	r21, 0x3F	; 63
    5ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5adc:	88 23       	and	r24, r24
    5ade:	2c f4       	brge	.+10     	; 0x5aea <main+0x1172>
		__ticks = 1;
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	9c 8b       	std	Y+20, r25	; 0x14
    5ae6:	8b 8b       	std	Y+19, r24	; 0x13
    5ae8:	3f c0       	rjmp	.+126    	; 0x5b68 <main+0x11f0>
	else if (__tmp > 65535)
    5aea:	6d 89       	ldd	r22, Y+21	; 0x15
    5aec:	7e 89       	ldd	r23, Y+22	; 0x16
    5aee:	8f 89       	ldd	r24, Y+23	; 0x17
    5af0:	98 8d       	ldd	r25, Y+24	; 0x18
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	3f ef       	ldi	r19, 0xFF	; 255
    5af6:	4f e7       	ldi	r20, 0x7F	; 127
    5af8:	57 e4       	ldi	r21, 0x47	; 71
    5afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5afe:	18 16       	cp	r1, r24
    5b00:	4c f5       	brge	.+82     	; 0x5b54 <main+0x11dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b02:	69 8d       	ldd	r22, Y+25	; 0x19
    5b04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	40 e2       	ldi	r20, 0x20	; 32
    5b10:	51 e4       	ldi	r21, 0x41	; 65
    5b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	bc 01       	movw	r22, r24
    5b1c:	cd 01       	movw	r24, r26
    5b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b22:	dc 01       	movw	r26, r24
    5b24:	cb 01       	movw	r24, r22
    5b26:	9c 8b       	std	Y+20, r25	; 0x14
    5b28:	8b 8b       	std	Y+19, r24	; 0x13
    5b2a:	0f c0       	rjmp	.+30     	; 0x5b4a <main+0x11d2>
    5b2c:	88 ec       	ldi	r24, 0xC8	; 200
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	9a 8b       	std	Y+18, r25	; 0x12
    5b32:	89 8b       	std	Y+17, r24	; 0x11
    5b34:	89 89       	ldd	r24, Y+17	; 0x11
    5b36:	9a 89       	ldd	r25, Y+18	; 0x12
    5b38:	01 97       	sbiw	r24, 0x01	; 1
    5b3a:	f1 f7       	brne	.-4      	; 0x5b38 <main+0x11c0>
    5b3c:	9a 8b       	std	Y+18, r25	; 0x12
    5b3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b40:	8b 89       	ldd	r24, Y+19	; 0x13
    5b42:	9c 89       	ldd	r25, Y+20	; 0x14
    5b44:	01 97       	sbiw	r24, 0x01	; 1
    5b46:	9c 8b       	std	Y+20, r25	; 0x14
    5b48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    5b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    5b4e:	00 97       	sbiw	r24, 0x00	; 0
    5b50:	69 f7       	brne	.-38     	; 0x5b2c <main+0x11b4>
    5b52:	14 c0       	rjmp	.+40     	; 0x5b7c <main+0x1204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b54:	6d 89       	ldd	r22, Y+21	; 0x15
    5b56:	7e 89       	ldd	r23, Y+22	; 0x16
    5b58:	8f 89       	ldd	r24, Y+23	; 0x17
    5b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    5b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b60:	dc 01       	movw	r26, r24
    5b62:	cb 01       	movw	r24, r22
    5b64:	9c 8b       	std	Y+20, r25	; 0x14
    5b66:	8b 8b       	std	Y+19, r24	; 0x13
    5b68:	8b 89       	ldd	r24, Y+19	; 0x13
    5b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    5b6c:	98 8b       	std	Y+16, r25	; 0x10
    5b6e:	8f 87       	std	Y+15, r24	; 0x0f
    5b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b72:	98 89       	ldd	r25, Y+16	; 0x10
    5b74:	01 97       	sbiw	r24, 0x01	; 1
    5b76:	f1 f7       	brne	.-4      	; 0x5b74 <main+0x11fc>
    5b78:	98 8b       	std	Y+16, r25	; 0x10
    5b7a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2500);
						TIMER0_u8SetCallBack(&APP_DCSpeed);
    5b7c:	8b e9       	ldi	r24, 0x9B	; 155
    5b7e:	90 e3       	ldi	r25, 0x30	; 48
    5b80:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <TIMER0_u8SetCallBack>
						Local_u8PressedKey=KPD_u8GetPressedKey();
    5b84:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5b88:	fe 01       	movw	r30, r28
    5b8a:	ec 56       	subi	r30, 0x6C	; 108
    5b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8e:	80 83       	st	Z, r24
					case '2': DC_u8Rotate(&DC,CCW); break;
					}
					while(KPD_u8GetPressedKey()!='*');
					DC_u8Stop(&DC); break;
					case '2': CLCD_voidSendString("LM35 Control");
					while(Local_u8PressedKey!='*')
    5b90:	fe 01       	movw	r30, r28
    5b92:	ec 56       	subi	r30, 0x6C	; 108
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
    5b96:	80 81       	ld	r24, Z
    5b98:	8a 32       	cpi	r24, 0x2A	; 42
    5b9a:	09 f0       	breq	.+2      	; 0x5b9e <main+0x1226>
    5b9c:	51 cf       	rjmp	.-350    	; 0x5a40 <main+0x10c8>
						CLCD_voidCLR();
						CLCD_void_SendNumber(Local_ps8Buffer,APP_LM35MappedValue);
						_delay_ms(2500);
						TIMER0_u8SetCallBack(&APP_DCSpeed);
						Local_u8PressedKey=KPD_u8GetPressedKey();
					}DC_u8Stop(&DC); APP_LM35MappedValue=0; break;
    5b9e:	85 eb       	ldi	r24, 0xB5	; 181
    5ba0:	91 e0       	ldi	r25, 0x01	; 1
    5ba2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DC_u8Stop>
    5ba6:	10 92 d1 01 	sts	0x01D1, r1
    5baa:	10 92 d0 01 	sts	0x01D0, r1
    5bae:	85 cd       	rjmp	.-1270   	; 0x56ba <main+0xd42>
					case '3': CLCD_voidSendString("Potentiometer");
    5bb0:	8a e3       	ldi	r24, 0x3A	; 58
    5bb2:	91 e0       	ldi	r25, 0x01	; 1
    5bb4:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
    5bb8:	a8 c0       	rjmp	.+336    	; 0x5d0a <main+0x1392>
					while(Local_u8PressedKey!='*')
					{
						APP_LM35MappedValue=0;
    5bba:	10 92 d1 01 	sts	0x01D1, r1
    5bbe:	10 92 d0 01 	sts	0x01D0, r1
						ADC_u16StartConversionSynch(5,&Local_ADCReading);
    5bc2:	9e 01       	movw	r18, r28
    5bc4:	26 55       	subi	r18, 0x56	; 86
    5bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bc8:	85 e0       	ldi	r24, 0x05	; 5
    5bca:	b9 01       	movw	r22, r18
    5bcc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u16StartConversionSynch>
						APP_PotenMappedValue=ADC_S16ReadingMap(&PotenReading,Local_ADCReading);
    5bd0:	fe 01       	movw	r30, r28
    5bd2:	e6 55       	subi	r30, 0x56	; 86
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	80 81       	ld	r24, Z
    5bd8:	91 81       	ldd	r25, Z+1	; 0x01
    5bda:	9c 01       	movw	r18, r24
    5bdc:	85 ea       	ldi	r24, 0xA5	; 165
    5bde:	91 e0       	ldi	r25, 0x01	; 1
    5be0:	b9 01       	movw	r22, r18
    5be2:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <ADC_S16ReadingMap>
    5be6:	90 93 cf 01 	sts	0x01CF, r25
    5bea:	80 93 ce 01 	sts	0x01CE, r24
						CLCD_voidCLR();
    5bee:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
						CLCD_void_SendNumber(Local_ps8Buffer,APP_LM35MappedValue);
    5bf2:	80 91 d0 01 	lds	r24, 0x01D0
    5bf6:	90 91 d1 01 	lds	r25, 0x01D1
    5bfa:	9c 01       	movw	r18, r24
    5bfc:	44 27       	eor	r20, r20
    5bfe:	37 fd       	sbrc	r19, 7
    5c00:	40 95       	com	r20
    5c02:	54 2f       	mov	r21, r20
    5c04:	ce 01       	movw	r24, r28
    5c06:	80 56       	subi	r24, 0x60	; 96
    5c08:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0a:	ba 01       	movw	r22, r20
    5c0c:	a9 01       	movw	r20, r18
    5c0e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <CLCD_void_SendNumber>
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	90 e4       	ldi	r25, 0x40	; 64
    5c16:	ac e1       	ldi	r26, 0x1C	; 28
    5c18:	b5 e4       	ldi	r27, 0x45	; 69
    5c1a:	8b 87       	std	Y+11, r24	; 0x0b
    5c1c:	9c 87       	std	Y+12, r25	; 0x0c
    5c1e:	ad 87       	std	Y+13, r26	; 0x0d
    5c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	4a ef       	ldi	r20, 0xFA	; 250
    5c30:	54 e4       	ldi	r21, 0x44	; 68
    5c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	8f 83       	std	Y+7, r24	; 0x07
    5c3c:	98 87       	std	Y+8, r25	; 0x08
    5c3e:	a9 87       	std	Y+9, r26	; 0x09
    5c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c42:	6f 81       	ldd	r22, Y+7	; 0x07
    5c44:	78 85       	ldd	r23, Y+8	; 0x08
    5c46:	89 85       	ldd	r24, Y+9	; 0x09
    5c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	40 e8       	ldi	r20, 0x80	; 128
    5c50:	5f e3       	ldi	r21, 0x3F	; 63
    5c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c56:	88 23       	and	r24, r24
    5c58:	2c f4       	brge	.+10     	; 0x5c64 <main+0x12ec>
		__ticks = 1;
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	9e 83       	std	Y+6, r25	; 0x06
    5c60:	8d 83       	std	Y+5, r24	; 0x05
    5c62:	3f c0       	rjmp	.+126    	; 0x5ce2 <main+0x136a>
	else if (__tmp > 65535)
    5c64:	6f 81       	ldd	r22, Y+7	; 0x07
    5c66:	78 85       	ldd	r23, Y+8	; 0x08
    5c68:	89 85       	ldd	r24, Y+9	; 0x09
    5c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	3f ef       	ldi	r19, 0xFF	; 255
    5c70:	4f e7       	ldi	r20, 0x7F	; 127
    5c72:	57 e4       	ldi	r21, 0x47	; 71
    5c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c78:	18 16       	cp	r1, r24
    5c7a:	4c f5       	brge	.+82     	; 0x5cce <main+0x1356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c84:	20 e0       	ldi	r18, 0x00	; 0
    5c86:	30 e0       	ldi	r19, 0x00	; 0
    5c88:	40 e2       	ldi	r20, 0x20	; 32
    5c8a:	51 e4       	ldi	r21, 0x41	; 65
    5c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	bc 01       	movw	r22, r24
    5c96:	cd 01       	movw	r24, r26
    5c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	cb 01       	movw	r24, r22
    5ca0:	9e 83       	std	Y+6, r25	; 0x06
    5ca2:	8d 83       	std	Y+5, r24	; 0x05
    5ca4:	0f c0       	rjmp	.+30     	; 0x5cc4 <main+0x134c>
    5ca6:	88 ec       	ldi	r24, 0xC8	; 200
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	9c 83       	std	Y+4, r25	; 0x04
    5cac:	8b 83       	std	Y+3, r24	; 0x03
    5cae:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    5cb2:	01 97       	sbiw	r24, 0x01	; 1
    5cb4:	f1 f7       	brne	.-4      	; 0x5cb2 <main+0x133a>
    5cb6:	9c 83       	std	Y+4, r25	; 0x04
    5cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cba:	8d 81       	ldd	r24, Y+5	; 0x05
    5cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    5cbe:	01 97       	sbiw	r24, 0x01	; 1
    5cc0:	9e 83       	std	Y+6, r25	; 0x06
    5cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc8:	00 97       	sbiw	r24, 0x00	; 0
    5cca:	69 f7       	brne	.-38     	; 0x5ca6 <main+0x132e>
    5ccc:	14 c0       	rjmp	.+40     	; 0x5cf6 <main+0x137e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cce:	6f 81       	ldd	r22, Y+7	; 0x07
    5cd0:	78 85       	ldd	r23, Y+8	; 0x08
    5cd2:	89 85       	ldd	r24, Y+9	; 0x09
    5cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	9e 83       	std	Y+6, r25	; 0x06
    5ce0:	8d 83       	std	Y+5, r24	; 0x05
    5ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce6:	9a 83       	std	Y+2, r25	; 0x02
    5ce8:	89 83       	std	Y+1, r24	; 0x01
    5cea:	89 81       	ldd	r24, Y+1	; 0x01
    5cec:	9a 81       	ldd	r25, Y+2	; 0x02
    5cee:	01 97       	sbiw	r24, 0x01	; 1
    5cf0:	f1 f7       	brne	.-4      	; 0x5cee <main+0x1376>
    5cf2:	9a 83       	std	Y+2, r25	; 0x02
    5cf4:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2500);
						TIMER0_u8SetCallBack(&APP_DCSpeed);
    5cf6:	8b e9       	ldi	r24, 0x9B	; 155
    5cf8:	90 e3       	ldi	r25, 0x30	; 48
    5cfa:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <TIMER0_u8SetCallBack>
						Local_u8PressedKey=KPD_u8GetPressedKey();
    5cfe:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5d02:	fe 01       	movw	r30, r28
    5d04:	ec 56       	subi	r30, 0x6C	; 108
    5d06:	ff 4f       	sbci	r31, 0xFF	; 255
    5d08:	80 83       	st	Z, r24
						_delay_ms(2500);
						TIMER0_u8SetCallBack(&APP_DCSpeed);
						Local_u8PressedKey=KPD_u8GetPressedKey();
					}DC_u8Stop(&DC); APP_LM35MappedValue=0; break;
					case '3': CLCD_voidSendString("Potentiometer");
					while(Local_u8PressedKey!='*')
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	ec 56       	subi	r30, 0x6C	; 108
    5d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d10:	80 81       	ld	r24, Z
    5d12:	8a 32       	cpi	r24, 0x2A	; 42
    5d14:	09 f0       	breq	.+2      	; 0x5d18 <main+0x13a0>
    5d16:	51 cf       	rjmp	.-350    	; 0x5bba <main+0x1242>
						CLCD_void_SendNumber(Local_ps8Buffer,APP_LM35MappedValue);
						_delay_ms(2500);
						TIMER0_u8SetCallBack(&APP_DCSpeed);
						Local_u8PressedKey=KPD_u8GetPressedKey();
					}
					DC_u8Stop(&DC); APP_PotenMappedValue=0; break;
    5d18:	85 eb       	ldi	r24, 0xB5	; 181
    5d1a:	91 e0       	ldi	r25, 0x01	; 1
    5d1c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DC_u8Stop>
    5d20:	10 92 cf 01 	sts	0x01CF, r1
    5d24:	10 92 ce 01 	sts	0x01CE, r1
    5d28:	c8 cc       	rjmp	.-1648   	; 0x56ba <main+0xd42>
					}
				}break;
				case '2': CLCD_voidCLR();
    5d2a:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("1-CW   2-CCW");
    5d2e:	88 ed       	ldi	r24, 0xD8	; 216
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				APP_u8Direction=KPD_u8GetPressedKey();
    5d36:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5d3a:	80 93 d2 01 	sts	0x01D2, r24
				if(APP_u8Direction=='1' || APP_u8Direction=='2')
    5d3e:	80 91 d2 01 	lds	r24, 0x01D2
    5d42:	81 33       	cpi	r24, 0x31	; 49
    5d44:	29 f0       	breq	.+10     	; 0x5d50 <main+0x13d8>
    5d46:	80 91 d2 01 	lds	r24, 0x01D2
    5d4a:	82 33       	cpi	r24, 0x32	; 50
    5d4c:	09 f0       	breq	.+2      	; 0x5d50 <main+0x13d8>
    5d4e:	b5 cc       	rjmp	.-1686   	; 0x56ba <main+0xd42>
				{
					CLCD_voidCLR();
    5d50:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
					CLCD_voidSendString("Angle: ");
    5d54:	88 e4       	ldi	r24, 0x48	; 72
    5d56:	91 e0       	ldi	r25, 0x01	; 1
    5d58:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
    5d5e:	60 e0       	ldi	r22, 0x00	; 0
    5d60:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
					CLCD_voidSendString("Press # Last");
    5d64:	80 e5       	ldi	r24, 0x50	; 80
    5d66:	91 e0       	ldi	r25, 0x01	; 1
    5d68:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					Local_u8PressedKey=KPD_u8GetPressedKey();
    5d6c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5d70:	fe 01       	movw	r30, r28
    5d72:	ec 56       	subi	r30, 0x6C	; 108
    5d74:	ff 4f       	sbci	r31, 0xFF	; 255
    5d76:	80 83       	st	Z, r24
					CLCD_voidGoToXY(0,7);
    5d78:	80 e0       	ldi	r24, 0x00	; 0
    5d7a:	67 e0       	ldi	r22, 0x07	; 7
    5d7c:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
					Local_u16Angle=0;
    5d80:	fe 01       	movw	r30, r28
    5d82:	e7 56       	subi	r30, 0x67	; 103
    5d84:	ff 4f       	sbci	r31, 0xFF	; 255
    5d86:	11 82       	std	Z+1, r1	; 0x01
    5d88:	10 82       	st	Z, r1
					Local_u8Counter=0;
    5d8a:	fe 01       	movw	r30, r28
    5d8c:	ea 56       	subi	r30, 0x6A	; 106
    5d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d90:	10 82       	st	Z, r1
    5d92:	4c c0       	rjmp	.+152    	; 0x5e2c <main+0x14b4>
					while(Local_u8PressedKey!='#')
					{
						if(Local_u8Counter==0)
    5d94:	fe 01       	movw	r30, r28
    5d96:	ea 56       	subi	r30, 0x6A	; 106
    5d98:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9a:	80 81       	ld	r24, Z
    5d9c:	88 23       	and	r24, r24
    5d9e:	e9 f4       	brne	.+58     	; 0x5dda <main+0x1462>
						{
							Local_u16Angle+=(Local_u8PressedKey-'0');
    5da0:	fe 01       	movw	r30, r28
    5da2:	ec 56       	subi	r30, 0x6C	; 108
    5da4:	ff 4f       	sbci	r31, 0xFF	; 255
    5da6:	80 81       	ld	r24, Z
    5da8:	28 2f       	mov	r18, r24
    5daa:	30 e0       	ldi	r19, 0x00	; 0
    5dac:	fe 01       	movw	r30, r28
    5dae:	e7 56       	subi	r30, 0x67	; 103
    5db0:	ff 4f       	sbci	r31, 0xFF	; 255
    5db2:	80 81       	ld	r24, Z
    5db4:	91 81       	ldd	r25, Z+1	; 0x01
    5db6:	82 0f       	add	r24, r18
    5db8:	93 1f       	adc	r25, r19
    5dba:	fe 01       	movw	r30, r28
    5dbc:	e7 56       	subi	r30, 0x67	; 103
    5dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc0:	c0 97       	sbiw	r24, 0x30	; 48
    5dc2:	91 83       	std	Z+1, r25	; 0x01
    5dc4:	80 83       	st	Z, r24
							Local_u8Counter++;
    5dc6:	de 01       	movw	r26, r28
    5dc8:	aa 56       	subi	r26, 0x6A	; 106
    5dca:	bf 4f       	sbci	r27, 0xFF	; 255
    5dcc:	fe 01       	movw	r30, r28
    5dce:	ea 56       	subi	r30, 0x6A	; 106
    5dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd2:	80 81       	ld	r24, Z
    5dd4:	8f 5f       	subi	r24, 0xFF	; 255
    5dd6:	8c 93       	st	X, r24
    5dd8:	1d c0       	rjmp	.+58     	; 0x5e14 <main+0x149c>
						}
						else
						{
							Local_u16Angle=(Local_u16Angle*10)+(Local_u8PressedKey-'0');
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e7 56       	subi	r30, 0x67	; 103
    5dde:	ff 4f       	sbci	r31, 0xFF	; 255
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	9c 01       	movw	r18, r24
    5de6:	22 0f       	add	r18, r18
    5de8:	33 1f       	adc	r19, r19
    5dea:	c9 01       	movw	r24, r18
    5dec:	88 0f       	add	r24, r24
    5dee:	99 1f       	adc	r25, r25
    5df0:	88 0f       	add	r24, r24
    5df2:	99 1f       	adc	r25, r25
    5df4:	28 0f       	add	r18, r24
    5df6:	39 1f       	adc	r19, r25
    5df8:	fe 01       	movw	r30, r28
    5dfa:	ec 56       	subi	r30, 0x6C	; 108
    5dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfe:	80 81       	ld	r24, Z
    5e00:	88 2f       	mov	r24, r24
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	82 0f       	add	r24, r18
    5e06:	93 1f       	adc	r25, r19
    5e08:	fe 01       	movw	r30, r28
    5e0a:	e7 56       	subi	r30, 0x67	; 103
    5e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0e:	c0 97       	sbiw	r24, 0x30	; 48
    5e10:	91 83       	std	Z+1, r25	; 0x01
    5e12:	80 83       	st	Z, r24
						}
						CLCD_voidSendData(Local_u8PressedKey);
    5e14:	fe 01       	movw	r30, r28
    5e16:	ec 56       	subi	r30, 0x6C	; 108
    5e18:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1a:	80 81       	ld	r24, Z
    5e1c:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
						Local_u8PressedKey=KPD_u8GetPressedKey();
    5e20:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5e24:	fe 01       	movw	r30, r28
    5e26:	ec 56       	subi	r30, 0x6C	; 108
    5e28:	ff 4f       	sbci	r31, 0xFF	; 255
    5e2a:	80 83       	st	Z, r24
					CLCD_voidSendString("Press # Last");
					Local_u8PressedKey=KPD_u8GetPressedKey();
					CLCD_voidGoToXY(0,7);
					Local_u16Angle=0;
					Local_u8Counter=0;
					while(Local_u8PressedKey!='#')
    5e2c:	fe 01       	movw	r30, r28
    5e2e:	ec 56       	subi	r30, 0x6C	; 108
    5e30:	ff 4f       	sbci	r31, 0xFF	; 255
    5e32:	80 81       	ld	r24, Z
    5e34:	83 32       	cpi	r24, 0x23	; 35
    5e36:	09 f0       	breq	.+2      	; 0x5e3a <main+0x14c2>
    5e38:	ad cf       	rjmp	.-166    	; 0x5d94 <main+0x141c>
							Local_u16Angle=(Local_u16Angle*10)+(Local_u8PressedKey-'0');
						}
						CLCD_voidSendData(Local_u8PressedKey);
						Local_u8PressedKey=KPD_u8GetPressedKey();
					}
					CLCD_voidCLR();
    5e3a:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
					CLCD_voidSendString("StepperMotor Run");
    5e3e:	8d e5       	ldi	r24, 0x5D	; 93
    5e40:	91 e0       	ldi	r25, 0x01	; 1
    5e42:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    5e46:	81 e0       	ldi	r24, 0x01	; 1
    5e48:	60 e0       	ldi	r22, 0x00	; 0
    5e4a:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
					switch(APP_u8Direction)
    5e4e:	80 91 d2 01 	lds	r24, 0x01D2
    5e52:	e8 2f       	mov	r30, r24
    5e54:	f0 e0       	ldi	r31, 0x00	; 0
    5e56:	c4 55       	subi	r28, 0x54	; 84
    5e58:	df 4f       	sbci	r29, 0xFF	; 255
    5e5a:	f9 83       	std	Y+1, r31	; 0x01
    5e5c:	e8 83       	st	Y, r30
    5e5e:	cc 5a       	subi	r28, 0xAC	; 172
    5e60:	d0 40       	sbci	r29, 0x00	; 0
    5e62:	c4 55       	subi	r28, 0x54	; 84
    5e64:	df 4f       	sbci	r29, 0xFF	; 255
    5e66:	28 81       	ld	r18, Y
    5e68:	39 81       	ldd	r19, Y+1	; 0x01
    5e6a:	cc 5a       	subi	r28, 0xAC	; 172
    5e6c:	d0 40       	sbci	r29, 0x00	; 0
    5e6e:	21 33       	cpi	r18, 0x31	; 49
    5e70:	31 05       	cpc	r19, r1
    5e72:	51 f0       	breq	.+20     	; 0x5e88 <main+0x1510>
    5e74:	c4 55       	subi	r28, 0x54	; 84
    5e76:	df 4f       	sbci	r29, 0xFF	; 255
    5e78:	48 81       	ld	r20, Y
    5e7a:	59 81       	ldd	r21, Y+1	; 0x01
    5e7c:	cc 5a       	subi	r28, 0xAC	; 172
    5e7e:	d0 40       	sbci	r29, 0x00	; 0
    5e80:	42 33       	cpi	r20, 0x32	; 50
    5e82:	51 05       	cpc	r21, r1
    5e84:	71 f0       	breq	.+28     	; 0x5ea2 <main+0x152a>
    5e86:	19 cc       	rjmp	.-1998   	; 0x56ba <main+0xd42>
					{
					case '1': STEPPER_u8Rotate(&MOTOR1,Local_u16Angle,CW); break;
    5e88:	ce 01       	movw	r24, r28
    5e8a:	85 56       	subi	r24, 0x65	; 101
    5e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e8e:	fe 01       	movw	r30, r28
    5e90:	e7 56       	subi	r30, 0x67	; 103
    5e92:	ff 4f       	sbci	r31, 0xFF	; 255
    5e94:	20 81       	ld	r18, Z
    5e96:	31 81       	ldd	r19, Z+1	; 0x01
    5e98:	b9 01       	movw	r22, r18
    5e9a:	41 e0       	ldi	r20, 0x01	; 1
    5e9c:	0e 94 26 06 	call	0xc4c	; 0xc4c <STEPPER_u8Rotate>
    5ea0:	0c cc       	rjmp	.-2024   	; 0x56ba <main+0xd42>
					case '2': STEPPER_u8Rotate(&MOTOR1,Local_u16Angle,CCW); break;
    5ea2:	ce 01       	movw	r24, r28
    5ea4:	85 56       	subi	r24, 0x65	; 101
    5ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ea8:	fe 01       	movw	r30, r28
    5eaa:	e7 56       	subi	r30, 0x67	; 103
    5eac:	ff 4f       	sbci	r31, 0xFF	; 255
    5eae:	20 81       	ld	r18, Z
    5eb0:	31 81       	ldd	r19, Z+1	; 0x01
    5eb2:	b9 01       	movw	r22, r18
    5eb4:	42 e0       	ldi	r20, 0x02	; 2
    5eb6:	0e 94 26 06 	call	0xc4c	; 0xc4c <STEPPER_u8Rotate>
    5eba:	ff cb       	rjmp	.-2050   	; 0x56ba <main+0xd42>
					}
				}break;
				case '3': CLCD_voidCLR();
    5ebc:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("Angle: ");
    5ec0:	88 e4       	ldi	r24, 0x48	; 72
    5ec2:	91 e0       	ldi	r25, 0x01	; 1
    5ec4:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    5ec8:	81 e0       	ldi	r24, 0x01	; 1
    5eca:	60 e0       	ldi	r22, 0x00	; 0
    5ecc:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
				CLCD_voidSendString("Press # Last");
    5ed0:	80 e5       	ldi	r24, 0x50	; 80
    5ed2:	91 e0       	ldi	r25, 0x01	; 1
    5ed4:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				CLCD_voidGoToXY(0,7);
    5ed8:	80 e0       	ldi	r24, 0x00	; 0
    5eda:	67 e0       	ldi	r22, 0x07	; 7
    5edc:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidGoToXY>
				Local_u8PressedKey=KPD_u8GetPressedKey();
    5ee0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5ee4:	fe 01       	movw	r30, r28
    5ee6:	ec 56       	subi	r30, 0x6C	; 108
    5ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eea:	80 83       	st	Z, r24
				Local_u16Angle=0;
    5eec:	fe 01       	movw	r30, r28
    5eee:	e7 56       	subi	r30, 0x67	; 103
    5ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef2:	11 82       	std	Z+1, r1	; 0x01
    5ef4:	10 82       	st	Z, r1
				Local_u8Counter=0;
    5ef6:	fe 01       	movw	r30, r28
    5ef8:	ea 56       	subi	r30, 0x6A	; 106
    5efa:	ff 4f       	sbci	r31, 0xFF	; 255
    5efc:	10 82       	st	Z, r1
    5efe:	4c c0       	rjmp	.+152    	; 0x5f98 <main+0x1620>
				while(Local_u8PressedKey!='#')
				{
					if(Local_u8Counter==0)
    5f00:	fe 01       	movw	r30, r28
    5f02:	ea 56       	subi	r30, 0x6A	; 106
    5f04:	ff 4f       	sbci	r31, 0xFF	; 255
    5f06:	80 81       	ld	r24, Z
    5f08:	88 23       	and	r24, r24
    5f0a:	e9 f4       	brne	.+58     	; 0x5f46 <main+0x15ce>
					{
						Local_u16Angle+=(Local_u8PressedKey-'0');
    5f0c:	fe 01       	movw	r30, r28
    5f0e:	ec 56       	subi	r30, 0x6C	; 108
    5f10:	ff 4f       	sbci	r31, 0xFF	; 255
    5f12:	80 81       	ld	r24, Z
    5f14:	28 2f       	mov	r18, r24
    5f16:	30 e0       	ldi	r19, 0x00	; 0
    5f18:	fe 01       	movw	r30, r28
    5f1a:	e7 56       	subi	r30, 0x67	; 103
    5f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1e:	80 81       	ld	r24, Z
    5f20:	91 81       	ldd	r25, Z+1	; 0x01
    5f22:	82 0f       	add	r24, r18
    5f24:	93 1f       	adc	r25, r19
    5f26:	fe 01       	movw	r30, r28
    5f28:	e7 56       	subi	r30, 0x67	; 103
    5f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2c:	c0 97       	sbiw	r24, 0x30	; 48
    5f2e:	91 83       	std	Z+1, r25	; 0x01
    5f30:	80 83       	st	Z, r24
						Local_u8Counter++;
    5f32:	de 01       	movw	r26, r28
    5f34:	aa 56       	subi	r26, 0x6A	; 106
    5f36:	bf 4f       	sbci	r27, 0xFF	; 255
    5f38:	fe 01       	movw	r30, r28
    5f3a:	ea 56       	subi	r30, 0x6A	; 106
    5f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3e:	80 81       	ld	r24, Z
    5f40:	8f 5f       	subi	r24, 0xFF	; 255
    5f42:	8c 93       	st	X, r24
    5f44:	1d c0       	rjmp	.+58     	; 0x5f80 <main+0x1608>
					}
					else
					{
						Local_u16Angle=(Local_u16Angle*10)+(Local_u8PressedKey-'0');
    5f46:	fe 01       	movw	r30, r28
    5f48:	e7 56       	subi	r30, 0x67	; 103
    5f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4c:	80 81       	ld	r24, Z
    5f4e:	91 81       	ldd	r25, Z+1	; 0x01
    5f50:	9c 01       	movw	r18, r24
    5f52:	22 0f       	add	r18, r18
    5f54:	33 1f       	adc	r19, r19
    5f56:	c9 01       	movw	r24, r18
    5f58:	88 0f       	add	r24, r24
    5f5a:	99 1f       	adc	r25, r25
    5f5c:	88 0f       	add	r24, r24
    5f5e:	99 1f       	adc	r25, r25
    5f60:	28 0f       	add	r18, r24
    5f62:	39 1f       	adc	r19, r25
    5f64:	fe 01       	movw	r30, r28
    5f66:	ec 56       	subi	r30, 0x6C	; 108
    5f68:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6a:	80 81       	ld	r24, Z
    5f6c:	88 2f       	mov	r24, r24
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	82 0f       	add	r24, r18
    5f72:	93 1f       	adc	r25, r19
    5f74:	fe 01       	movw	r30, r28
    5f76:	e7 56       	subi	r30, 0x67	; 103
    5f78:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7a:	c0 97       	sbiw	r24, 0x30	; 48
    5f7c:	91 83       	std	Z+1, r25	; 0x01
    5f7e:	80 83       	st	Z, r24
					}
					CLCD_voidSendData(Local_u8PressedKey);
    5f80:	fe 01       	movw	r30, r28
    5f82:	ec 56       	subi	r30, 0x6C	; 108
    5f84:	ff 4f       	sbci	r31, 0xFF	; 255
    5f86:	80 81       	ld	r24, Z
    5f88:	0e 94 ab 18 	call	0x3156	; 0x3156 <CLCD_voidSendData>
					Local_u8PressedKey=KPD_u8GetPressedKey();
    5f8c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <KPD_u8GetPressedKey>
    5f90:	fe 01       	movw	r30, r28
    5f92:	ec 56       	subi	r30, 0x6C	; 108
    5f94:	ff 4f       	sbci	r31, 0xFF	; 255
    5f96:	80 83       	st	Z, r24
				CLCD_voidSendString("Press # Last");
				CLCD_voidGoToXY(0,7);
				Local_u8PressedKey=KPD_u8GetPressedKey();
				Local_u16Angle=0;
				Local_u8Counter=0;
				while(Local_u8PressedKey!='#')
    5f98:	fe 01       	movw	r30, r28
    5f9a:	ec 56       	subi	r30, 0x6C	; 108
    5f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9e:	80 81       	ld	r24, Z
    5fa0:	83 32       	cpi	r24, 0x23	; 35
    5fa2:	09 f0       	breq	.+2      	; 0x5fa6 <main+0x162e>
    5fa4:	ad cf       	rjmp	.-166    	; 0x5f00 <main+0x1588>
						Local_u16Angle=(Local_u16Angle*10)+(Local_u8PressedKey-'0');
					}
					CLCD_voidSendData(Local_u8PressedKey);
					Local_u8PressedKey=KPD_u8GetPressedKey();
				}
				CLCD_voidCLR();
    5fa6:	0e 94 21 1a 	call	0x3442	; 0x3442 <CLCD_voidCLR>
				CLCD_voidSendString("Servo Run");
    5faa:	8e e6       	ldi	r24, 0x6E	; 110
    5fac:	91 e0       	ldi	r25, 0x01	; 1
    5fae:	0e 94 cd 19 	call	0x339a	; 0x339a <CLCD_voidSendString>
				Local_u16MappedAngle=ADC_S16ReadingMap(&Angle,Local_u16Angle);
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	e7 56       	subi	r30, 0x67	; 103
    5fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb8:	20 81       	ld	r18, Z
    5fba:	31 81       	ldd	r19, Z+1	; 0x01
    5fbc:	8d ea       	ldi	r24, 0xAD	; 173
    5fbe:	91 e0       	ldi	r25, 0x01	; 1
    5fc0:	b9 01       	movw	r22, r18
    5fc2:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <ADC_S16ReadingMap>
    5fc6:	fe 01       	movw	r30, r28
    5fc8:	e9 56       	subi	r30, 0x69	; 105
    5fca:	ff 4f       	sbci	r31, 0xFF	; 255
    5fcc:	91 83       	std	Z+1, r25	; 0x01
    5fce:	80 83       	st	Z, r24
				TIMER1_voidSetICR1Value(20000);
    5fd0:	80 e2       	ldi	r24, 0x20	; 32
    5fd2:	9e e4       	ldi	r25, 0x4E	; 78
    5fd4:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <TIMER1_voidSetICR1Value>
				TIMER1_voidSetChannelACompMatchValue(Local_u16MappedAngle);
    5fd8:	fe 01       	movw	r30, r28
    5fda:	e9 56       	subi	r30, 0x69	; 105
    5fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fde:	80 81       	ld	r24, Z
    5fe0:	91 81       	ldd	r25, Z+1	; 0x01
    5fe2:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <TIMER1_voidSetChannelACompMatchValue>
				Local_u16MappedAngle=0; break;
    5fe6:	fe 01       	movw	r30, r28
    5fe8:	e9 56       	subi	r30, 0x69	; 105
    5fea:	ff 4f       	sbci	r31, 0xFF	; 255
    5fec:	11 82       	std	Z+1, r1	; 0x01
    5fee:	10 82       	st	Z, r1
    5ff0:	64 cb       	rjmp	.-2360   	; 0x56ba <main+0xd42>
				default: DC_u8Stop(&DC); STEPPER_u8Stop(&MOTOR1); break;
    5ff2:	85 eb       	ldi	r24, 0xB5	; 181
    5ff4:	91 e0       	ldi	r25, 0x01	; 1
    5ff6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DC_u8Stop>
    5ffa:	ce 01       	movw	r24, r28
    5ffc:	85 56       	subi	r24, 0x65	; 101
    5ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    6000:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <STEPPER_u8Stop>
    6004:	5a cb       	rjmp	.-2380   	; 0x56ba <main+0xd42>

00006006 <App_u16InvertNumber>:
		}
	}
}
/*Function to invert Number EX: 1234 -> 4321*/
u16 App_u16InvertNumber(u16 Copy_u8Number)
{
    6006:	df 93       	push	r29
    6008:	cf 93       	push	r28
    600a:	cd b7       	in	r28, 0x3d	; 61
    600c:	de b7       	in	r29, 0x3e	; 62
    600e:	28 97       	sbiw	r28, 0x08	; 8
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	f8 94       	cli
    6014:	de bf       	out	0x3e, r29	; 62
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	cd bf       	out	0x3d, r28	; 61
    601a:	9e 83       	std	Y+6, r25	; 0x06
    601c:	8d 83       	std	Y+5, r24	; 0x05
	u16 Local_u16InvertedNum=0;
    601e:	1c 82       	std	Y+4, r1	; 0x04
    6020:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Rem=0;
    6022:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 Local_u8Counter=0;Local_u8Counter<4;Local_u8Counter++)
    6024:	19 82       	std	Y+1, r1	; 0x01
    6026:	78 c0       	rjmp	.+240    	; 0x6118 <App_u16InvertNumber+0x112>
	{
		Local_u8Rem=Copy_u8Number%10;
    6028:	8d 81       	ldd	r24, Y+5	; 0x05
    602a:	9e 81       	ldd	r25, Y+6	; 0x06
    602c:	2a e0       	ldi	r18, 0x0A	; 10
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	b9 01       	movw	r22, r18
    6032:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodhi4>
    6036:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8Number/=10;
    6038:	8d 81       	ldd	r24, Y+5	; 0x05
    603a:	9e 81       	ldd	r25, Y+6	; 0x06
    603c:	2a e0       	ldi	r18, 0x0A	; 10
    603e:	30 e0       	ldi	r19, 0x00	; 0
    6040:	b9 01       	movw	r22, r18
    6042:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodhi4>
    6046:	cb 01       	movw	r24, r22
    6048:	9e 83       	std	Y+6, r25	; 0x06
    604a:	8d 83       	std	Y+5, r24	; 0x05
		switch(Local_u8Counter)
    604c:	89 81       	ldd	r24, Y+1	; 0x01
    604e:	28 2f       	mov	r18, r24
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	38 87       	std	Y+8, r19	; 0x08
    6054:	2f 83       	std	Y+7, r18	; 0x07
    6056:	4f 81       	ldd	r20, Y+7	; 0x07
    6058:	58 85       	ldd	r21, Y+8	; 0x08
    605a:	41 30       	cpi	r20, 0x01	; 1
    605c:	51 05       	cpc	r21, r1
    605e:	31 f1       	breq	.+76     	; 0x60ac <App_u16InvertNumber+0xa6>
    6060:	8f 81       	ldd	r24, Y+7	; 0x07
    6062:	98 85       	ldd	r25, Y+8	; 0x08
    6064:	82 30       	cpi	r24, 0x02	; 2
    6066:	91 05       	cpc	r25, r1
    6068:	34 f4       	brge	.+12     	; 0x6076 <App_u16InvertNumber+0x70>
    606a:	2f 81       	ldd	r18, Y+7	; 0x07
    606c:	38 85       	ldd	r19, Y+8	; 0x08
    606e:	21 15       	cp	r18, r1
    6070:	31 05       	cpc	r19, r1
    6072:	61 f0       	breq	.+24     	; 0x608c <App_u16InvertNumber+0x86>
    6074:	4e c0       	rjmp	.+156    	; 0x6112 <App_u16InvertNumber+0x10c>
    6076:	4f 81       	ldd	r20, Y+7	; 0x07
    6078:	58 85       	ldd	r21, Y+8	; 0x08
    607a:	42 30       	cpi	r20, 0x02	; 2
    607c:	51 05       	cpc	r21, r1
    607e:	59 f1       	breq	.+86     	; 0x60d6 <App_u16InvertNumber+0xd0>
    6080:	8f 81       	ldd	r24, Y+7	; 0x07
    6082:	98 85       	ldd	r25, Y+8	; 0x08
    6084:	83 30       	cpi	r24, 0x03	; 3
    6086:	91 05       	cpc	r25, r1
    6088:	d9 f1       	breq	.+118    	; 0x6100 <App_u16InvertNumber+0xfa>
    608a:	43 c0       	rjmp	.+134    	; 0x6112 <App_u16InvertNumber+0x10c>
		{
		case 0: Local_u16InvertedNum=Local_u8Rem*1000; break;
    608c:	8a 81       	ldd	r24, Y+2	; 0x02
    608e:	28 2f       	mov	r18, r24
    6090:	30 e0       	ldi	r19, 0x00	; 0
    6092:	88 ee       	ldi	r24, 0xE8	; 232
    6094:	93 e0       	ldi	r25, 0x03	; 3
    6096:	ac 01       	movw	r20, r24
    6098:	24 9f       	mul	r18, r20
    609a:	c0 01       	movw	r24, r0
    609c:	25 9f       	mul	r18, r21
    609e:	90 0d       	add	r25, r0
    60a0:	34 9f       	mul	r19, r20
    60a2:	90 0d       	add	r25, r0
    60a4:	11 24       	eor	r1, r1
    60a6:	9c 83       	std	Y+4, r25	; 0x04
    60a8:	8b 83       	std	Y+3, r24	; 0x03
    60aa:	33 c0       	rjmp	.+102    	; 0x6112 <App_u16InvertNumber+0x10c>
		case 1: Local_u16InvertedNum+=Local_u8Rem*100; break;
    60ac:	8a 81       	ldd	r24, Y+2	; 0x02
    60ae:	28 2f       	mov	r18, r24
    60b0:	30 e0       	ldi	r19, 0x00	; 0
    60b2:	84 e6       	ldi	r24, 0x64	; 100
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	ac 01       	movw	r20, r24
    60b8:	24 9f       	mul	r18, r20
    60ba:	c0 01       	movw	r24, r0
    60bc:	25 9f       	mul	r18, r21
    60be:	90 0d       	add	r25, r0
    60c0:	34 9f       	mul	r19, r20
    60c2:	90 0d       	add	r25, r0
    60c4:	11 24       	eor	r1, r1
    60c6:	9c 01       	movw	r18, r24
    60c8:	8b 81       	ldd	r24, Y+3	; 0x03
    60ca:	9c 81       	ldd	r25, Y+4	; 0x04
    60cc:	82 0f       	add	r24, r18
    60ce:	93 1f       	adc	r25, r19
    60d0:	9c 83       	std	Y+4, r25	; 0x04
    60d2:	8b 83       	std	Y+3, r24	; 0x03
    60d4:	1e c0       	rjmp	.+60     	; 0x6112 <App_u16InvertNumber+0x10c>
		case 2: Local_u16InvertedNum+=Local_u8Rem*10; break;
    60d6:	8a 81       	ldd	r24, Y+2	; 0x02
    60d8:	88 2f       	mov	r24, r24
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	9c 01       	movw	r18, r24
    60de:	22 0f       	add	r18, r18
    60e0:	33 1f       	adc	r19, r19
    60e2:	c9 01       	movw	r24, r18
    60e4:	88 0f       	add	r24, r24
    60e6:	99 1f       	adc	r25, r25
    60e8:	88 0f       	add	r24, r24
    60ea:	99 1f       	adc	r25, r25
    60ec:	82 0f       	add	r24, r18
    60ee:	93 1f       	adc	r25, r19
    60f0:	9c 01       	movw	r18, r24
    60f2:	8b 81       	ldd	r24, Y+3	; 0x03
    60f4:	9c 81       	ldd	r25, Y+4	; 0x04
    60f6:	82 0f       	add	r24, r18
    60f8:	93 1f       	adc	r25, r19
    60fa:	9c 83       	std	Y+4, r25	; 0x04
    60fc:	8b 83       	std	Y+3, r24	; 0x03
    60fe:	09 c0       	rjmp	.+18     	; 0x6112 <App_u16InvertNumber+0x10c>
		case 3: Local_u16InvertedNum+=Local_u8Rem; break;
    6100:	8a 81       	ldd	r24, Y+2	; 0x02
    6102:	28 2f       	mov	r18, r24
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	8b 81       	ldd	r24, Y+3	; 0x03
    6108:	9c 81       	ldd	r25, Y+4	; 0x04
    610a:	82 0f       	add	r24, r18
    610c:	93 1f       	adc	r25, r19
    610e:	9c 83       	std	Y+4, r25	; 0x04
    6110:	8b 83       	std	Y+3, r24	; 0x03
/*Function to invert Number EX: 1234 -> 4321*/
u16 App_u16InvertNumber(u16 Copy_u8Number)
{
	u16 Local_u16InvertedNum=0;
	u8 Local_u8Rem=0;
	for(u8 Local_u8Counter=0;Local_u8Counter<4;Local_u8Counter++)
    6112:	89 81       	ldd	r24, Y+1	; 0x01
    6114:	8f 5f       	subi	r24, 0xFF	; 255
    6116:	89 83       	std	Y+1, r24	; 0x01
    6118:	89 81       	ldd	r24, Y+1	; 0x01
    611a:	84 30       	cpi	r24, 0x04	; 4
    611c:	08 f4       	brcc	.+2      	; 0x6120 <App_u16InvertNumber+0x11a>
    611e:	84 cf       	rjmp	.-248    	; 0x6028 <App_u16InvertNumber+0x22>
		case 1: Local_u16InvertedNum+=Local_u8Rem*100; break;
		case 2: Local_u16InvertedNum+=Local_u8Rem*10; break;
		case 3: Local_u16InvertedNum+=Local_u8Rem; break;
		}
	}
	return Local_u16InvertedNum;
    6120:	8b 81       	ldd	r24, Y+3	; 0x03
    6122:	9c 81       	ldd	r25, Y+4	; 0x04
}
    6124:	28 96       	adiw	r28, 0x08	; 8
    6126:	0f b6       	in	r0, 0x3f	; 63
    6128:	f8 94       	cli
    612a:	de bf       	out	0x3e, r29	; 62
    612c:	0f be       	out	0x3f, r0	; 63
    612e:	cd bf       	out	0x3d, r28	; 61
    6130:	cf 91       	pop	r28
    6132:	df 91       	pop	r29
    6134:	08 95       	ret

00006136 <APP_DCSpeed>:
void APP_DCSpeed(void)
{
    6136:	df 93       	push	r29
    6138:	cf 93       	push	r28
    613a:	00 d0       	rcall	.+0      	; 0x613c <APP_DCSpeed+0x6>
    613c:	cd b7       	in	r28, 0x3d	; 61
    613e:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    6140:	80 91 d3 01 	lds	r24, 0x01D3
    6144:	8f 5f       	subi	r24, 0xFF	; 255
    6146:	80 93 d3 01 	sts	0x01D3, r24
	if(APP_PotenMappedValue==0)
    614a:	80 91 ce 01 	lds	r24, 0x01CE
    614e:	90 91 cf 01 	lds	r25, 0x01CF
    6152:	00 97       	sbiw	r24, 0x00	; 0
    6154:	79 f4       	brne	.+30     	; 0x6174 <APP_DCSpeed+0x3e>
	{
		if(Local_u8Counter==APP_LM35MappedValue)
    6156:	80 91 d3 01 	lds	r24, 0x01D3
    615a:	28 2f       	mov	r18, r24
    615c:	30 e0       	ldi	r19, 0x00	; 0
    615e:	80 91 d0 01 	lds	r24, 0x01D0
    6162:	90 91 d1 01 	lds	r25, 0x01D1
    6166:	28 17       	cp	r18, r24
    6168:	39 07       	cpc	r19, r25
    616a:	21 f4       	brne	.+8      	; 0x6174 <APP_DCSpeed+0x3e>
		{
			DC_u8Stop(&DC);
    616c:	85 eb       	ldi	r24, 0xB5	; 181
    616e:	91 e0       	ldi	r25, 0x01	; 1
    6170:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DC_u8Stop>
		}
	}
	if(APP_LM35MappedValue==0)
    6174:	80 91 d0 01 	lds	r24, 0x01D0
    6178:	90 91 d1 01 	lds	r25, 0x01D1
    617c:	00 97       	sbiw	r24, 0x00	; 0
    617e:	79 f4       	brne	.+30     	; 0x619e <APP_DCSpeed+0x68>
	{
		if(Local_u8Counter==APP_PotenMappedValue)
    6180:	80 91 d3 01 	lds	r24, 0x01D3
    6184:	28 2f       	mov	r18, r24
    6186:	30 e0       	ldi	r19, 0x00	; 0
    6188:	80 91 ce 01 	lds	r24, 0x01CE
    618c:	90 91 cf 01 	lds	r25, 0x01CF
    6190:	28 17       	cp	r18, r24
    6192:	39 07       	cpc	r19, r25
    6194:	21 f4       	brne	.+8      	; 0x619e <APP_DCSpeed+0x68>
		{
			DC_u8Stop(&DC);
    6196:	85 eb       	ldi	r24, 0xB5	; 181
    6198:	91 e0       	ldi	r25, 0x01	; 1
    619a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DC_u8Stop>
		}
	}
	if(Local_u8Counter==10)
    619e:	80 91 d3 01 	lds	r24, 0x01D3
    61a2:	8a 30       	cpi	r24, 0x0A	; 10
    61a4:	e1 f4       	brne	.+56     	; 0x61de <APP_DCSpeed+0xa8>
	{
		switch(APP_u8Direction)
    61a6:	80 91 d2 01 	lds	r24, 0x01D2
    61aa:	28 2f       	mov	r18, r24
    61ac:	30 e0       	ldi	r19, 0x00	; 0
    61ae:	3a 83       	std	Y+2, r19	; 0x02
    61b0:	29 83       	std	Y+1, r18	; 0x01
    61b2:	89 81       	ldd	r24, Y+1	; 0x01
    61b4:	9a 81       	ldd	r25, Y+2	; 0x02
    61b6:	81 33       	cpi	r24, 0x31	; 49
    61b8:	91 05       	cpc	r25, r1
    61ba:	31 f0       	breq	.+12     	; 0x61c8 <APP_DCSpeed+0x92>
    61bc:	29 81       	ldd	r18, Y+1	; 0x01
    61be:	3a 81       	ldd	r19, Y+2	; 0x02
    61c0:	22 33       	cpi	r18, 0x32	; 50
    61c2:	31 05       	cpc	r19, r1
    61c4:	39 f0       	breq	.+14     	; 0x61d4 <APP_DCSpeed+0x9e>
    61c6:	0b c0       	rjmp	.+22     	; 0x61de <APP_DCSpeed+0xa8>
		{
		case '1': DC_u8Rotate(&DC,CW); break;
    61c8:	85 eb       	ldi	r24, 0xB5	; 181
    61ca:	91 e0       	ldi	r25, 0x01	; 1
    61cc:	61 e0       	ldi	r22, 0x01	; 1
    61ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_u8Rotate>
    61d2:	05 c0       	rjmp	.+10     	; 0x61de <APP_DCSpeed+0xa8>
		case '2': DC_u8Rotate(&DC,CCW); break;
    61d4:	85 eb       	ldi	r24, 0xB5	; 181
    61d6:	91 e0       	ldi	r25, 0x01	; 1
    61d8:	62 e0       	ldi	r22, 0x02	; 2
    61da:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_u8Rotate>
		Local_u8Counter=0;
		}
	}
}
    61de:	0f 90       	pop	r0
    61e0:	0f 90       	pop	r0
    61e2:	cf 91       	pop	r28
    61e4:	df 91       	pop	r29
    61e6:	08 95       	ret

000061e8 <__udivmodhi4>:
    61e8:	aa 1b       	sub	r26, r26
    61ea:	bb 1b       	sub	r27, r27
    61ec:	51 e1       	ldi	r21, 0x11	; 17
    61ee:	07 c0       	rjmp	.+14     	; 0x61fe <__udivmodhi4_ep>

000061f0 <__udivmodhi4_loop>:
    61f0:	aa 1f       	adc	r26, r26
    61f2:	bb 1f       	adc	r27, r27
    61f4:	a6 17       	cp	r26, r22
    61f6:	b7 07       	cpc	r27, r23
    61f8:	10 f0       	brcs	.+4      	; 0x61fe <__udivmodhi4_ep>
    61fa:	a6 1b       	sub	r26, r22
    61fc:	b7 0b       	sbc	r27, r23

000061fe <__udivmodhi4_ep>:
    61fe:	88 1f       	adc	r24, r24
    6200:	99 1f       	adc	r25, r25
    6202:	5a 95       	dec	r21
    6204:	a9 f7       	brne	.-22     	; 0x61f0 <__udivmodhi4_loop>
    6206:	80 95       	com	r24
    6208:	90 95       	com	r25
    620a:	bc 01       	movw	r22, r24
    620c:	cd 01       	movw	r24, r26
    620e:	08 95       	ret

00006210 <__udivmodsi4>:
    6210:	a1 e2       	ldi	r26, 0x21	; 33
    6212:	1a 2e       	mov	r1, r26
    6214:	aa 1b       	sub	r26, r26
    6216:	bb 1b       	sub	r27, r27
    6218:	fd 01       	movw	r30, r26
    621a:	0d c0       	rjmp	.+26     	; 0x6236 <__udivmodsi4_ep>

0000621c <__udivmodsi4_loop>:
    621c:	aa 1f       	adc	r26, r26
    621e:	bb 1f       	adc	r27, r27
    6220:	ee 1f       	adc	r30, r30
    6222:	ff 1f       	adc	r31, r31
    6224:	a2 17       	cp	r26, r18
    6226:	b3 07       	cpc	r27, r19
    6228:	e4 07       	cpc	r30, r20
    622a:	f5 07       	cpc	r31, r21
    622c:	20 f0       	brcs	.+8      	; 0x6236 <__udivmodsi4_ep>
    622e:	a2 1b       	sub	r26, r18
    6230:	b3 0b       	sbc	r27, r19
    6232:	e4 0b       	sbc	r30, r20
    6234:	f5 0b       	sbc	r31, r21

00006236 <__udivmodsi4_ep>:
    6236:	66 1f       	adc	r22, r22
    6238:	77 1f       	adc	r23, r23
    623a:	88 1f       	adc	r24, r24
    623c:	99 1f       	adc	r25, r25
    623e:	1a 94       	dec	r1
    6240:	69 f7       	brne	.-38     	; 0x621c <__udivmodsi4_loop>
    6242:	60 95       	com	r22
    6244:	70 95       	com	r23
    6246:	80 95       	com	r24
    6248:	90 95       	com	r25
    624a:	9b 01       	movw	r18, r22
    624c:	ac 01       	movw	r20, r24
    624e:	bd 01       	movw	r22, r26
    6250:	cf 01       	movw	r24, r30
    6252:	08 95       	ret

00006254 <__divmodsi4>:
    6254:	97 fb       	bst	r25, 7
    6256:	09 2e       	mov	r0, r25
    6258:	05 26       	eor	r0, r21
    625a:	0e d0       	rcall	.+28     	; 0x6278 <__divmodsi4_neg1>
    625c:	57 fd       	sbrc	r21, 7
    625e:	04 d0       	rcall	.+8      	; 0x6268 <__divmodsi4_neg2>
    6260:	d7 df       	rcall	.-82     	; 0x6210 <__udivmodsi4>
    6262:	0a d0       	rcall	.+20     	; 0x6278 <__divmodsi4_neg1>
    6264:	00 1c       	adc	r0, r0
    6266:	38 f4       	brcc	.+14     	; 0x6276 <__divmodsi4_exit>

00006268 <__divmodsi4_neg2>:
    6268:	50 95       	com	r21
    626a:	40 95       	com	r20
    626c:	30 95       	com	r19
    626e:	21 95       	neg	r18
    6270:	3f 4f       	sbci	r19, 0xFF	; 255
    6272:	4f 4f       	sbci	r20, 0xFF	; 255
    6274:	5f 4f       	sbci	r21, 0xFF	; 255

00006276 <__divmodsi4_exit>:
    6276:	08 95       	ret

00006278 <__divmodsi4_neg1>:
    6278:	f6 f7       	brtc	.-4      	; 0x6276 <__divmodsi4_exit>
    627a:	90 95       	com	r25
    627c:	80 95       	com	r24
    627e:	70 95       	com	r23
    6280:	61 95       	neg	r22
    6282:	7f 4f       	sbci	r23, 0xFF	; 255
    6284:	8f 4f       	sbci	r24, 0xFF	; 255
    6286:	9f 4f       	sbci	r25, 0xFF	; 255
    6288:	08 95       	ret

0000628a <__prologue_saves__>:
    628a:	2f 92       	push	r2
    628c:	3f 92       	push	r3
    628e:	4f 92       	push	r4
    6290:	5f 92       	push	r5
    6292:	6f 92       	push	r6
    6294:	7f 92       	push	r7
    6296:	8f 92       	push	r8
    6298:	9f 92       	push	r9
    629a:	af 92       	push	r10
    629c:	bf 92       	push	r11
    629e:	cf 92       	push	r12
    62a0:	df 92       	push	r13
    62a2:	ef 92       	push	r14
    62a4:	ff 92       	push	r15
    62a6:	0f 93       	push	r16
    62a8:	1f 93       	push	r17
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
    62ae:	cd b7       	in	r28, 0x3d	; 61
    62b0:	de b7       	in	r29, 0x3e	; 62
    62b2:	ca 1b       	sub	r28, r26
    62b4:	db 0b       	sbc	r29, r27
    62b6:	0f b6       	in	r0, 0x3f	; 63
    62b8:	f8 94       	cli
    62ba:	de bf       	out	0x3e, r29	; 62
    62bc:	0f be       	out	0x3f, r0	; 63
    62be:	cd bf       	out	0x3d, r28	; 61
    62c0:	09 94       	ijmp

000062c2 <__epilogue_restores__>:
    62c2:	2a 88       	ldd	r2, Y+18	; 0x12
    62c4:	39 88       	ldd	r3, Y+17	; 0x11
    62c6:	48 88       	ldd	r4, Y+16	; 0x10
    62c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    62ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    62cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    62ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    62d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    62d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    62d4:	b9 84       	ldd	r11, Y+9	; 0x09
    62d6:	c8 84       	ldd	r12, Y+8	; 0x08
    62d8:	df 80       	ldd	r13, Y+7	; 0x07
    62da:	ee 80       	ldd	r14, Y+6	; 0x06
    62dc:	fd 80       	ldd	r15, Y+5	; 0x05
    62de:	0c 81       	ldd	r16, Y+4	; 0x04
    62e0:	1b 81       	ldd	r17, Y+3	; 0x03
    62e2:	aa 81       	ldd	r26, Y+2	; 0x02
    62e4:	b9 81       	ldd	r27, Y+1	; 0x01
    62e6:	ce 0f       	add	r28, r30
    62e8:	d1 1d       	adc	r29, r1
    62ea:	0f b6       	in	r0, 0x3f	; 63
    62ec:	f8 94       	cli
    62ee:	de bf       	out	0x3e, r29	; 62
    62f0:	0f be       	out	0x3f, r0	; 63
    62f2:	cd bf       	out	0x3d, r28	; 61
    62f4:	ed 01       	movw	r28, r26
    62f6:	08 95       	ret

000062f8 <_exit>:
    62f8:	f8 94       	cli

000062fa <__stop_program>:
    62fa:	ff cf       	rjmp	.-2      	; 0x62fa <__stop_program>
